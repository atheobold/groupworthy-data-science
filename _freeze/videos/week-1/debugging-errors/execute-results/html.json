{
  "hash": "2c4864381e7cd12277dac4858c7b59e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Debugging Errors!\"\nformat: revealjs\n---\n\n::: {.cell}\n\n:::\n\n\n\n.huge\\[Syntax Errors\\]\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Did you leave off a parenthesis?\\]\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:4:0: unexpected end of input\n2: seq(from = 1, to = 10, by = 1\n3: \n  ^\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Did you leave off a comma?\\]\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:23: unexpected symbol\n1: \n2: seq(from = 1, to = 10 by\n                         ^\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Did you make a typo? Are you using the right names?\\]\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in sequence.default(from = 1, to = 10, by = 1): argument \"nvec\" is missing, with no default\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Object type errors\\]\n\n**Are you using the right *input* that the function expects?**\n\n--\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in sqrt(\"1\"): non-numeric argument to mathematical function\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Object type errors\\]\n\n**Are you expecting the right *output* of the function?**\n\n--\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nclass: center, middle, inverse\n\n.huge\\[Errors, warnings, and messages\\]\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Messages\\]\n\n--\n\nJust because you see scary red text, this does **not** mean something went wrong! This is just **R** communicating with you.\n\n--\n\nFor example, you often see:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Warnings\\]\n\n--\n\nOften, **R** will give you a **warning**.\n\n--\n\nThis means that your code *did* run...\n\n--\n\n...but you probably want to make sure it succeeded.\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Does this look right?\\]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_vec <- c(\"a\", \"b\", \"c\")\n\nmy_new_vec <- as.integer(my_vec)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NAs introduced by coercion\n```\n\n\n:::\n:::\n\n\n\n--\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_new_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA NA NA\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Errors\\]\n\nIf the word **Error** appears in your message from **R**, then you have a problem.\n\n--\n\nThis means your code **could not run**!\n\n--\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_vec <- c(\"a\", \"b\", \"c\")\n\nmy_new_vec <- my_vec + 1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in my_vec + 1: non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nclass: center, middle, inverse\n\n.huge\\[Parlez-vous ERROR?\\]\n\n------------------------------------------------------------------------\n\n.larger\\[**R** says...\\]\n\n> Error: Object `some_obj` not found.\n\nIt *probably* means...\n\n> You haven't run the code to create `some_obj` OR you have a typo in the name!\n\n--\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_ojb <- 1:10\n\nmean(some_obj)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'some_obj' not found\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n.larger\\[**R** says...\\]\n\n> Error: Object of type 'closure' is not subsettable.\n\nIt *probably* means...\n\n> Oops, you tried to use square brackets on a function\n\n--\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean[1, 2]\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in mean[1, 2]: object of type 'closure' is not subsettable\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n.larger\\[**R** says...\\]\n\n> Error: Non-numeric argument to binary operator\n\nIt *probably* means...\n\n> You tried to do math on data that isn't numeric.\n\n--\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"a\" + 2\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in \"a\" + 2: non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n.larger\\[What if none of these solved my error?\\]\n\n--\n\nLook at the help file for the function!\n\n--\n\nWhen all else fails, **Google** your error message.\n\n--\n\n-   Leave out the specifics.\n\n-   Include the function you are using.\n\n------------------------------------------------------------------------\n\nclass: center, middle\n\n.larger\\[Try it...\\]\n\n**What's wrong here?**\n\n</br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(c(\"a\", \"b\", \"c\", \"d\"), num_row = 2)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in matrix(c(\"a\", \"b\", \"c\", \"d\"), num_row = 2): unused argument (num_row = 2)\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}