{
  "hash": "803ca235ec1febc4a8f6f4281128dd15",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bonus Challenge: FizzBuzz (+5)\"\nauthor: \"NAME\"\ndate: \"\"\nformat: html\nself-contained: true\ncode-fold: true\neditor: source\nexecute: \n  echo: true\n  error: true\n---\n\n\n[Download the starter qmd file here](bCH_fizzbuzz.qmd).\n\n## FizzBuzz\n\nThe \"FizzBuzz Test\" is a famous programming interview question. \n> Write a program that prints the numbers from 1 to 30. But for multiples of three, print “Fizz” instead of the number, and for the multiples of five, print “Buzz”. For numbers which are multiples of both three and five, print “FizzBuzz\"\n\n\n### Program Flow Map\n\nCreate a program flow map (on paper, or using an online tool of your choice, such as [Excalidraw](https://excalidraw.com/)) showing how FizzBuzz should be evaluated for a given integer x. You do not need to worry about the for loop in this program flow map. Upload your program flow map image to [imgur.com](https://imgur.com/) and provide an image link here using markdown image syntax. You will need to link directly to the image (with image file extension) - right click on your uploaded image and choose 'copy image address' to get the proper link.\n\n\nCan you think of another way to solve FizzBuzz using a different logical structure? What do you need to know how to do in R for each solution? Do you need to know how to concatenate strings? Convert something from an integer to a string? Just output stuff? Thinking through these requirements can help you decide which solution is the simplest and/or best. \n\nList out the requirements of the solution in your program flow map here:\n\n1. \n\n### R Solution (+4)\n\nIn the `R` chunk below, write code which will solve this problem using a for loop that goes from 1 to 30.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write your code here.\n```\n:::\n\n\nEach logical comparison can take some time to evaluate. How many logical comparisons are evaluated in your for loop? Can you count them up? For instance, if your if-elseif-else statement is TRUE on the first if statement, then the second logical comparison is not evaluated, but if it is FALSE for the first comparison, then the second comparison does get evaluated. Thinking about efficiency is one way to evaluate whether code is well-written or not.\n\nNumber of logical comparisons: \n\n\n### Extra Challenge (+1)\n\nCan you use string concatenation to produce a solution that has only 3 single if statements (that is, one that doesn't use nested if statements or an if-else construction)? This may be different from the way you constructed your solution, and that's good - there are many ways to solve this problem.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write your code here.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}