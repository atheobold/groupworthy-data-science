{
  "hash": "2c37cd48a42b5ed2c43b3201192691cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"PA 8: The Twelve Days of Christmas\"\nsubtitle: \"Starter Functions\"\nformat: \n  html:\n    embed-resources: true\n    code-tools: true\n    toc: true\n    number-sections: true\neditor: source\nexecute: \n  error: true\n  echo: true\n  message: false\n  warning: false\n---\n\n\n\n\n[Download starter .qmd file](PA8.qmd)\n\n## Introduction {-}\n\nThe song *The Twelve Days of Christmas*, written around 1780, tells the tale of the many gifts one person receives in the days after Christmas ([link to lyrics](https://en.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_(song)).\n\n::: callout-note\n\nYou can watch a video of *The Twelve Days of Christmas* being performed at the [Cambria Christmas Market](https://www.youtube.com/watch?v=_N9UeQRf_aQ&ab_channel=SanLuisObispoCountyVisitorsGuide).\n\n:::\n\nThe gifts in this song repeat and compound. For example, on the first day, the narrator receives:\n\n    A partridge in a pear tree.\n\nOn the twelfth day, they receive:\n\n    Twelve Drummers Drumming\n    Eleven Pipers Piping\n    Ten Lords a Leaping\n    Nine Ladies Waiting\n    Eight Maids a Milking\n    Seven Swans a Swimming\n    Six Geese a Laying\n    Five Golden Rings\n    Four Calling Birds\n    Three French Hens\n    Two Turtle Doves\n    And a Partridge in a Pear Tree\n\nThis week, your task is to write functions that will automatically sing this very repetitive song. In the practice activity, we will start by writing **two helper functions**. We will then use these helper functions in the lab to sing the entire song.\n\n## Dataset {-}\n\nRun the provided code to load a dataset called `xmas`. This dataset contains the crucial information about each gift in the song. We will use this dataset to test our functions as we work on them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmas <- read.csv(\"https://raw.githubusercontent.com/zoerehnberg/STAT331-S23/main/practice_activities/xmas.csv\")\n```\n:::\n\n\n::: callout-tip\n### Advice\n\n##### Workflow {-}\n\n+ Make smaller versions of the `xmas` dataset (e.g., the first two days) to test your functions *before* testing them on the full data set.\n+ Your functions should reference each other. That is, don't duplicate code; use earlier, smaller functions inside your larger functions.\n\n##### Build from small pieces {-}\n\n+ If you have some trouble getting started, I recommend writing a function that works in one case (e.g., for day 3), and then trying to generalize it.\n\n##### Don't sweat the small stuff {-}\n\n+ There's a lot you can do to polish the way the song prints, but we're going to leave that to the lab assignment.\n+ At this point, don't get bogged down in details like how the song displays, or small grammar rules (like commas!). \n:::\n\n## Plurals -- `pluralize_gift()`\n\nIn the `xmas` dataset, the gifts are listed as singular. For example, on day 5, the narrator in the song receives \"five golden rings\", but the entry in the dataset for gift 5 simply says \"ring\".\n\n::: callout-tip\n\n*Hint 1:* The gifts on days six and nine have unusual pluralization (not just adding an \"s\"). You may assume that in any other dataset we might apply this function to, there will be **no** additional special cases beyond these two types.\n\n*Hint 2:* The following example may be useful to you:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_fruits <- c(\"banana\",\"kiwi\",\"strawberry\",\"apple\",\"blueberry\",\"pear\")\n\nmy_fruits |> \n  str_c(\"s\", sep = \"\") |> \n  str_replace(\"ys$\", \"ies\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"bananas\"      \"kiwis\"        \"strawberries\" \"apples\"       \"blueberries\" \n[6] \"pears\"       \n```\n\n\n:::\n:::\n\n\n:::\n\n::: callout-caution\n\n#### Important!\n\nYou should **absolutely not** hard-code anything into this function. It should work in general, not just for the items in the traditional version of *The Twelve Days of Christmas*.\n\nFor example, the word \"ring\" should not appear anywhere in the function. I should be able to give your function **any gift** and get back the plural of that gift.\n\n:::\n\nComplete the `pluralize_gift()` function below. This function should take in a gift (or a vector of gifts) and return the appropriate plural(s).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function that takes a noun and makes it plural\n# Arguments: gift -- a string or vector of strings\n# Return:    a string or vector of strings with the pluralized words\n\npluralize_gift <- function(gift){\n\n  \n  \n\n  return(gift)\n}\n```\n:::\n\n\n::: callout-note\n\n### Test Your Function\n\nTry your function on a smaller and then on the full gift dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If your function is vectorized:\npluralize_gift(xmas$Gift.Item)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"partridge\" \"dove\"      \"hen\"       \"bird\"      \"ring\"      \"goose\"    \n [7] \"swan\"      \"maid\"      \"lady\"      \"lord\"      \"piper\"     \"drummer\"  \n```\n\n\n:::\n\n```{.r .cell-code}\n# If your function is not vectorized:\nmap_chr(xmas$Gift.Item, pluralize_gift)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"partridge\" \"dove\"      \"hen\"       \"bird\"      \"ring\"      \"goose\"    \n [7] \"swan\"      \"maid\"      \"lady\"      \"lord\"      \"piper\"     \"drummer\"  \n```\n\n\n:::\n:::\n\n\n:::\n\n## Creating Sentences -- `make_phrase()`\n\nWrite a function called `make_phrase()` that takes in the necessary information and returns a phrase. For example:\n\n    make_phrase(num       = 10,\n                item      = \"lord\", \n                verb      = \"a-leaping\", \n                adjective = \"\", \n                location  = \"\")\n\nshould return\n\n    \"ten lords a-leaping\"\n\n::: callout-tip\n\nThe `Day.in.Words` variable isn't quite what you want. You want `12` to say `\"twelve\"` **not** `\"twelfth\"`. I suggest using the `english` package to create number words from number digits.\n\nIf you get a frustrating error from the `english` package, try wrapping `as.character()` around your new number word.\n\n:::\n    \n\n::: {.cell}\n\n```{.r .cell-code}\nmake_phrase <- function(num, item, verb, adjective, location) {\n  \n  ## Step 1: Replace NAs with blank strings.\n  verb <- str_replace_na(verb, \"\")\n  \n  \n  ## Step 2: If the day number is larger than 1, the gift must be plural.\n  ### Hint: call the function you created above!\n  \n  \n  ## Step 3: Figure out if the gift starts with a vowel.\n  \n  \n  ## Step 4: For day 1, if the gift starts with a vowel, make day_word be \"an\" and if the gift does not start with a vowel, make the day_word be \"a\" (e.g. a partridge in a pear tree).\n  ### For the other days, make day_word be the number word (e.g. ten lords a-leaping).\n  ### See the tip above about turning numbers into words (e.g. 10 into ten).\n  day_word\n  \n  ## Step 5: Glue all of the pieces together into one string and return!\n  \n  return(phrase)\n}\n```\n:::\n\n\n::: callout-note\n### Test Your Function\n\nTry your function out on the `xmas` data by making a new variable containing the daily phrases. I've provided you with skeleton code to iterate through each row of the dataset -- all you need to do is provide the necessary inputs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmas2 <- xmas |> \n  mutate(Full.Phrase = pmap_chr(.l = list(num       = ______,\n                                          item      = ______, \n                                          verb      = ______, \n                                          adjective = ______, \n                                          location  = ______), \n                                .f = make_phrase))\nxmas2\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:56: unexpected input\n1: xmas2 <- xmas |> \n2:   mutate(Full.Phrase = pmap_chr(.l = list(num       = __\n                                                          ^\n```\n\n\n:::\n:::\n\n:::\n\n## Canvas Submission {-}\n\n> Your `Full.Phrase` column is the answer to this week's practice activity.\n>\n> Copy and paste your `Full.Phrase` column to show me the phrases you made!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}