{
  "hash": "6b6b9fdb8de8f0be01e23793c23aea58",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 8: The Twelve Days of Christmas\"\nsubtitle: \"Sing the Full Song\"\nauthor: \"Your name\"\nformat: \n  html:\n    embed-resources: true\n    code-tools: true\n    toc: true\n    number-sections: true\neditor: source\nexecute: \n  error: true\n  echo: true\n  message: false\n  warning: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nxmas <- read.csv(\"https://raw.githubusercontent.com/zoerehnberg/STAT331-S23/main/practice_activities/xmas.csv\")\n```\n:::\n\n\n[Download starter .qmd file](LA8_fprogram.qmd)\n\nYou've already created two helper functions, `pluralize_gift()` and `make_phrase()`, which you used to create a column of song phrases in the practice activity.\n\nToday, you will write a function that sings the appropriate lines of the song for a given day. We will then use this function to iterate through the 12 days of Christmas to sing the full song!\n\n## Helper Functions\n\n::: callout-note\n\nYou will need to copy over your functions from the practice activity into your new lab Quarto document.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Copy over functions from your practice activity!\n```\n:::\n\n\nUse your PA functions to create a `Full.Phrase` column in the `xmas2` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmas2 <- xmas |>\n  mutate(\n    Full.Phrase = pmap_chr(.l = list(num       = Day,\n                                     item      = Gift.Item, \n                                     verb      = Verb, \n                                     adjective = Adjective, \n                                     location  = Location), \n                           .f = make_phrase))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `mutate()`:\nℹ In argument: `Full.Phrase = pmap_chr(...)`.\nCaused by error:\n! object 'make_phrase' not found\n```\n\n\n:::\n:::\n\n\n\n## Iteration\n\nWrite a function called `sing_day()` that takes as input:\n\n+ A dataset (input as a dataframe).\n+ A number indicating which day to sing about (input as an integer).\n+ The name of a column in the dataset that contains the phrases for each day (input as a tidy name).\n\nFor example,\n\n    sing_day(xmas2, 2, Full.Phrase)\n\nshould return\n\n    On the second day of Christmas, my true love sent to me:\n    two turtle doves and\n    a partridge in a pear tree.\n\n::: callout-tip\n\n**Hint 1:** The `{{phrase_col}}` part, which I provided for you, lets you use column names as arguments to a function. Don't delete that line of code!\n\n**Hint 2:** The `ordinal()` function from the **english** package could be helpful when converting the `line` input (e.g., 1) to a word (e.g., \"first\").\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Produces the string for one day of the song.\n# Arguments:  dataset -- a dataframe containing information about gifts.\n#             num -- the number of the day you want to sing about.\n#             phrase_col -- the variable name for the column in dataset with the song phrases.\n# Returns:    a string with the line of the song containing ALL gifts for the given day.\n\nsing_day <- function(dataset, num, phrase_col){\n  \n  # Step 1: Setup the intro line\n  # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)\n  num_word <- ____\n  \n  intro <- glue::glue(\"On the {num_word} day of Christmas, my true love sent to me:\")\n  \n  # Step 2: Sing the gift phrases\n  # Hint: What order are they gifts sung in each day?\n\n    phrases <- dataset |>\n      pull({{phrase_col}})\n\n  ????\n    \n  ## put it together\n    \n  ????\n\n}\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:11:16: unexpected input\n10:   # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)\n11:   num_word <- __\n                   ^\n```\n\n\n:::\n:::\n\n\n::: callout-note\n\n### A Small Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmas2 |>\n  sing_day(num = 2, phrase_col = Full.Phrase)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in sing_day(xmas2, num = 2, phrase_col = Full.Phrase): could not find function \"sing_day\"\n```\n\n\n:::\n:::\n\n\n:::\n\n## Sing the Song\n\nRun the following code to test out your functions! The output should be the lyrics for the entire *The Twelve Days of Christmas* song.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_chr(1:12, ~ sing_day(dataset = xmas2, \n                         num = .x, \n                         phrase_col = Full.Phrase)) |>\n  str_c(collapse = \"\\n\") |>\n  cat()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_chr()`:\nℹ In index: 1.\nCaused by error in `sing_day()`:\n! could not find function \"sing_day\"\n```\n\n\n:::\n:::\n\n\n::: callout-warning\n\n**You will get automatic deductions for:**\n\n+ Functions that do not work the way they are intended.\n+ Hard coding values in your in functions.\n+ Not using the `map()` code supplied for you to iterate the function you just wrote.\n+ Not singing the full song. Remember, each day, you get the gift for that day *and* all the prior days.\n\n:::\n\n## Style the Song Output\n\nLet's output the song in a visually appealing way!\n\n::: callout-note\n\nMake the following changes to your `sing_day()` function above. Do not copy the code to a new code chunk for the style section.\n\n:::\n\n\n\n**a. Remove any additional whitespace.**\n\n+ There should be only *one* whitespace character between words.\n+ There should be *no* whitespace at the beginning or end of each phrase.\n\n**b. Print each phase on its own line.**\n\n+ For example, your function should output the following for `sing_day(xmas, num = 2, phrase_col = Full.Phrase)`:\n\n```\nOn the second day of Christmas, my true love sent to me: \ntwo turtle doves and \na partridge in a pear tree\n```\n\n**c. Add blank lines between the different lines of the song.**\n\n+ For example, your output should look like the following:\n\n```\nOn the first day of Christmas, my true love sent to me:\na partridge in a pear tree\n\nOn the second day of Christmas, my true love sent to me: \ntwo turtle doves and \na partridge in a pear tree\n```\n\n**d. Ensure the lines of your song are grammatically correct.**\n\n1.  *Use of Commas* -- each line should end in a comma *except* for the last line.\n2.  *Use of And* -- there should be an \"and\" included *either* at the [end]{.underline} of the second to last line *or* at the [beginning]{.underline} of the final line.\n3.  *Use of Period* -- there should be a period at the end of the final line.\n\n+ For example, your function should output the following for `sing_day(xmas, num = 3, phrase_col = Full.Phrase)`:\n\n```\nOn the third day of Christmas, my true love sent to me: \nthree french hens, \ntwo turtle doves and \na partridge in a pear tree.\n```\n\n::: callout-note\n\nWhile I am a fan of the Oxford comma, you do not have to use an Oxford comma for the second to last phrase of your song.\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}