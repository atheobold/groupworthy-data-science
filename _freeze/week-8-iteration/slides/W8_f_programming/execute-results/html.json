{
  "hash": "3ab8e337722d7d7b9e97893a74b5ec40",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Functional Programming\"\nformat: \n  revealjs:\n    theme: default\n    auto-stretch: false\neditor: source\nembed-resources: true\nexecute:\n  echo: true\n---\n\n\n\n\n\n## Monday, May 20\n\nToday we will...\n\n+ Project Proposal + Data\n+ New Material^[Material and images for today's lecture were modified from Dr. Theobold and [Hansjörg Neth's ds4psy text](https://bookdown.org/hneth/ds4psy/12.3-iter:functional-programming.html#iter:functional-programming)]\n  + Performing Repeated Tasks + Vectorization\n  + Functional Programming: the `map()` family\n+ PA 8: The Twelve Days of Christmas Starter Functions\n\n\n## Project Proposal + Data\n\nYou must complete the *objectives* and write up the *written components* outlined under Section 1 on the Project Details page on Canvas.\n\n  + Due on Canvas by 11:59pm on Tuesday, 5/28 (Tuesday follows a Monday schedule...).\n\n\n# Performing Repeated Tasks\n\n\n## Repetition\n\nType out the task over and over.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![https://bookdown.org/hneth/ds4psyl](images/bart_board_iter.png){fig-align='center' width=50%}\n:::\n:::\n\n\n. . .\n\nDo not do this.\n\n## Iteration\n\nRepeatedly execute the *same* operation over and over.\n\n+ Loops (e.g., `for()` and `while()`) allow us to iterate.\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:6){\n  print(i^2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n[1] 36\n```\n\n\n:::\n:::\n\n\n:::\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![https://bookdown.org/hneth/ds4psyl](images/bart_board_for.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n::::\n\n\n## Iteration\n\nRepeatedly execute the *same* operation over and over.\n\n+ Loops (e.g., `for()` and `while()`) allow us to iterate.\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:6){\n  print(i^2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n[1] 36\n```\n\n\n:::\n:::\n\n\n+ But loops tend to be **slow**!\n\n:::\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![https://bookdown.org/hneth/ds4psyl](images/bart_board_for.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n::::\n\n\n## Vectorization\n\nMany operations in R are **vectorized**.\n\n+ These functions operate on *vectors* of values rather than a *single* value.\n+ We can iterate *without* writing a loop.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(from = -4, to = 6)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -4 -3 -2 -1  0  1  2  3  4  5  6\n```\n\n\n:::\n:::\n\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nLoop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:length(x)){\n  x[i] <- abs(x[i])\n}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 4 3 2 1 0 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n:::\n::::\n\n\n## Vectorization\n\nMany operations in R are **vectorized**.\n\n+ These functions operate on *vectors* of values rather than a *single* value.\n+ We can iterate *without* writing a loop.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(from = -4, to = 6)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -4 -3 -2 -1  0  1  2  3  4  5  6\n```\n\n\n:::\n:::\n\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nLoop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:length(x)){\n  x[i] <- abs(x[i])\n}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 4 3 2 1 0 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\nVectorized:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nabs(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 4 3 2 1 0 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n## Vectorization\n\n**Not every function is vectorized.**\n\n+ E.g., a function using `if()` statements **cannot** operate on vectors.\n\n. . .\n\n:::: {.columns}\n::: {.column width=\"47%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npos_neg_zero <- function(x){\n  if(x > 0){\n    return(\"Greater than 0!\")\n  } else if (x < 0){\n    return(\"Less than 0!\")\n  } else {\n    return(\"Equal to 0!\")\n  }\n}\n\nx <- seq(from = -4, to = 4)\npos_neg_zero(x)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in if (x > 0) {: the condition has length > 1\n```\n\n\n:::\n:::\n\n\n:::\n::: {.column width=\"53%\"}\n\nThe `if(x > 0)` statement can only be checked for something of length 1 (a single number, not a vector).\n\n:::\n::::\n\n\n## Vectorization\n\n**Not every function is vectorized.**\n\n+ E.g., a function using `if()` statements **cannot** operate on vectors.\n\n:::: {.columns}\n::: {.column width=\"47%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npos_neg_zero <- function(x){\n  if(x > 0){\n    return(\"Greater than 0!\")\n  } else if (x < 0){\n    return(\"Less than 0!\")\n  } else {\n    return(\"Equal to 0!\")\n  }\n}\n\nx <- seq(from = -4, to = 3)\npos_neg_zero(x)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in if (x > 0) {: the condition has length > 1\n```\n\n\n:::\n:::\n\n\n:::\n::: {.column width=\"53%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- rep(NA, length(x))\nfor(i in 1:length(x)){\n  result[i] <- pos_neg_zero(x[i])\n}\n\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"   \n[5] \"Equal to 0!\"     \"Greater than 0!\" \"Greater than 0!\" \"Greater than 0!\"\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n## Vectorization\n\n**Not every function is vectorized.**\n\n+ **Vectorized** versions of `if()` statements?\n\n<center>\n\n`if_else()` and `case_when()`\n\n</center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npos_neg_zero <- function(x){\n  state <- case_when(x > 0 ~ \"Greater than 0!\", \n                     x < 0 ~ \"Less than 0!\", \n                     .default = \"Equal to 0!\")\n  return(state)\n}\n\nx <- seq(from = -4, to = 3)\npos_neg_zero(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"    \"Less than 0!\"   \n[5] \"Equal to 0!\"     \"Greater than 0!\" \"Greater than 0!\" \"Greater than 0!\"\n```\n\n\n:::\n:::\n\n\n\n## Some functions cannot be vectorized!\n\nApplying `class()` to a **single** variable in a dataframe returns the data type of that column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(penguins[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\nTrying to apply `class()` to **every** variable in a dataframe returns the data type of the dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n## What can we do instead?\n\nWrite a `for()` loop...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_type <- rep(NA, length = ncol(penguins))\nfor(i in 1:ncol(penguins)){\n  data_type[i] <- class(penguins[[i]])\n}\n\n# format table nicely\ntibble(column = names(penguins), \n       type = data_type) |> \n  pivot_wider(names_from = column, \n              values_from = type) |>  \n  knitr::kable() |>\n  kableExtra::kable_styling(font_size = 30)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 30px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> species </th>\n   <th style=\"text-align:left;\"> island </th>\n   <th style=\"text-align:left;\"> bill_length_mm </th>\n   <th style=\"text-align:left;\"> bill_depth_mm </th>\n   <th style=\"text-align:left;\"> flipper_length_mm </th>\n   <th style=\"text-align:left;\"> body_mass_g </th>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:left;\"> year </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> factor </td>\n   <td style=\"text-align:left;\"> factor </td>\n   <td style=\"text-align:left;\"> numeric </td>\n   <td style=\"text-align:left;\"> numeric </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> factor </td>\n   <td style=\"text-align:left;\"> integer </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n. . .\n\n... but loops are computationally intensive!\n\n\n## What can we do instead?\n\nWhat about `across()`?\n\n+ Easily perform the **same** operation on multiple columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  summarise(across(.cols = everything(), \n                   .fns = class))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>  <chr>          <chr>         <chr>             <chr>      \n1 factor  factor numeric        numeric       integer           integer    \n# ℹ 2 more variables: sex <chr>, year <chr>\n```\n\n\n:::\n:::\n\n\n. . .\n\nUgh. Internally, `across()` uses a `for()` loop!\n\n```\nfor (j in seq_fns) {\n  fn <- fns[[j]]\n  out[[k]] <- fn(col, ...)\n  k <- k + 1L\n```\n\n\n## What can we do instead?\n\n<br>\n\n...\n\n\n# Functional Programming\n\n> To understand computations in R, two slogans are helpful:\n> \n> - Everything that exists is an object.\n> \n> - Everything that happens is a function call.\n> \n> John Chambers (creator of the pre-cursor to R)\n\n\n## Functional Programming\n\nWhat's the big picture?\n\n+ We will use **functions** as the **arguments** to other functions!\n\n<br>\n\n::: callout-note\nThere are a slew of `apply()` functions you will likely come across.\n\nWe will instead focus on the `purrr` package and the `map()` family of functions.\n:::\n\n\n## `purrr`\n\n:::: {.columns}\n::: {.column width=\"80%\"}\nThe `purrr` package breaks common list manipulations into small, independent pieces.\n\nThis strategy involves two steps:\n\n:::\n::: {.column width=\"20%\"}\n![](images/purrr.png){width=80%}\n:::\n::::\n\n1. Break a complex problem into smaller **sub-problems**.\n    + We then compose the small pieces together with `|>`.\n2. Solve each sub-problem for **a single element** of a list.\n    + Once done, `purrr` will generalize the solution to every element in the list.\n\n\n## Brief Review: Lists\n\nA list is a 1-dimensional, heterogeneous data structure.\n\n+ There are no restrictions on what data type or structure it can contain -- values, vectors, other lists, dataframes, etc.\n+ Lists are indexed with `[]` or `[[]]`.\n\n. . .\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1]  TRUE FALSE  TRUE  TRUE\n\n[[2]]\n     [,1] [,2]\n[1,] 6.70  4.4\n[2,] 5.58  6.0\n\n[[3]]\n[1] \"A\"\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1]  TRUE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,] 6.70  4.4\n[2,] 5.58  6.0\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list[[2]][1,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.4\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n## Brief Review: Lists\n\nA dataframe / tibble is a specially formatted **list of columns**!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_penguins <- penguins[1:8,]\nsmall_penguins[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 1\n  bill_length_mm\n           <dbl>\n1           39.1\n2           39.5\n3           40.3\n4           NA  \n5           36.7\n6           39.3\n7           38.9\n8           39.2\n```\n\n\n:::\n\n```{.r .cell-code}\nsmall_penguins[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 39.1 39.5 40.3   NA 36.7 39.3 38.9 39.2\n```\n\n\n:::\n:::\n\n\n. . .\n\nThe `purrr` package works for lists, so it works for dataframes.\n\n\n## `map()`\n\nThe `map()` function **iterates** through each item in a list and applies a function, then returns the new list.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/map.png){fig-align='center' width=30%}\n:::\n:::\n\n\nNote: the first argument in `map()` is the list, so if we pipe into it, we **only** specify the function!\n\n\n## `map()` + Dataframes\n\nA dataframe is just a list of columns -- `map()` will apply a function to every column.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(bill_length_mm:body_mass_g) |>\n  map(~ mean(.x, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$bill_length_mm\n[1] 43.92193\n\n$bill_depth_mm\n[1] 17.15117\n\n$flipper_length_mm\n[1] 200.9152\n\n$body_mass_g\n[1] 4201.754\n```\n\n\n:::\n:::\n\n\nUse a lambda function (with `~` and `.x`), just like in <font size=6> `across()`</font>!\n\n\n## The `map()` Family\n\nThe `map_xxx()` variants allow you to specify the **type of output** you want.\n\n+ `map()` creates a *list*.\n+ `map_chr()` creates a *character vector*.\n+ `map_lgl()` creates an *logical vector*.\n+ `map_int()` creates a *integer vector*.\n+ `map_dbl()` creates a *numeric vector*.\n\nAll take in a list and a function as arguments.\n\n\n## `map()` + penguins\n\n::: panel-tabset\n\n### `map_dbl()`\n\nCalculate the mean of each column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(bill_length_mm:body_mass_g) |> \n  map_dbl(~ mean(.x, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   bill_length_mm     bill_depth_mm flipper_length_mm       body_mass_g \n         43.92193          17.15117         200.91520        4201.75439 \n```\n\n\n:::\n:::\n\n\nOutput is a **vector of doubles**.\n\n\n### `map_int()`\n\nCalculate the number of `NA`s in each column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  map_int(~ sum(is.na(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          species            island    bill_length_mm     bill_depth_mm \n                0                 0                 2                 2 \nflipper_length_mm       body_mass_g               sex              year \n                2                 2                11                 0 \n```\n\n\n:::\n:::\n\n\nOutput is a **vector of integers**.\n\n\n### `map_lgl()`\n\nCalculate the number of `NA`s in each column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  map_lgl(~ sum(is.na(.x)))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_lgl()`:\nℹ In index: 3.\nℹ With name: bill_length_mm.\nCaused by error:\n! Can't coerce from an integer to a logical.\n```\n\n\n:::\n:::\n\n\nR returns an error if the output is of the wrong type!\n\n+ Output is a logical vector??\n\n:::\n\n\n## Comparing Speed\n\nUsing functional programming can be **much faster** than using `for` loops.\n\n::: panel-tabset\n\n### `for()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloop_func <- function(d){\n  typ <- rep(NA, ncol(d))\n  for(i in 1:ncol(d)){\n    typ[i] <- class(d[,i])\n  }\n  return(typ)\n}\n```\n:::\n\n\n### `map()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_func <- function(d){\n  typ <- map_chr(d, class)\n  return(typ)\n}\n```\n:::\n\n\n### Run\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(matrix(1,\n                           nrow = 5,\n                           ncol = 7))\n\nloop_func(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmap_func(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       V1        V2        V3        V4        V5        V6        V7 \n\"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \n```\n\n\n:::\n:::\n\n\n### Comparae\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(matrix(1,\n                           nrow = 5,\n                           ncol = 100000))\n\nmicrobenchmark::microbenchmark(loop_func(df),\n                               map_func(df),\n                               times = 20)\n```\n:::\n\n\n![](images/speed.png)\n\n:::\n\n\n## `map_if()`\n\nThe `map_if()` function allows us to **conditionally** apply a function to each item in a list.\n\n. . .\n\n::: panel-tabset\n\n### `across()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  mutate(across(.cols = where(is.numeric), \n                .fns = scale))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 5\n  species island    bill_length_mm[,1] bill_depth_mm[,1] sex   \n  <fct>   <fct>                  <dbl>             <dbl> <fct> \n1 Adelie  Torgersen             -0.883             0.784 male  \n2 Adelie  Torgersen             -0.810             0.126 female\n3 Adelie  Torgersen             -0.663             0.430 female\n4 Adelie  Torgersen             NA                NA     <NA>  \n5 Adelie  Torgersen             -1.32              1.09  female\n6 Adelie  Torgersen             -0.847             1.75  male  \n7 Adelie  Torgersen             -0.920             0.329 female\n8 Adelie  Torgersen             -0.865             1.24  male  \n```\n\n\n:::\n:::\n\n\n### `map_if()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  map_if(is.numeric, scale)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$species\n  [1] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n  [8] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [15] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [22] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [29] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [36] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [43] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [50] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [57] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [64] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [71] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [78] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [85] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [92] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [99] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[106] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[113] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[120] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[127] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[134] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[141] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[148] Adelie    Adelie    Adelie    Adelie    Adelie    Gentoo    Gentoo   \n[155] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[162] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[169] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[176] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[183] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[190] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[197] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[204] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[211] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[218] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[225] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[232] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[239] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[246] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[253] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[260] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[267] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[274] Gentoo    Gentoo    Gentoo    Chinstrap Chinstrap Chinstrap Chinstrap\n[281] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[288] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[295] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[302] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[309] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[316] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[323] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[330] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[337] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[344] Chinstrap\nLevels: Adelie Chinstrap Gentoo\n\n$island\n  [1] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n  [8] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n [15] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Biscoe   \n [22] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n [29] Biscoe    Biscoe    Dream     Dream     Dream     Dream     Dream    \n [36] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n [43] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n [50] Dream     Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n [57] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n [64] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Torgersen Torgersen\n [71] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n [78] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n [85] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n [92] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n [99] Dream     Dream     Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[106] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[113] Biscoe    Biscoe    Biscoe    Biscoe    Torgersen Torgersen Torgersen\n[120] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen\n[127] Torgersen Torgersen Torgersen Torgersen Torgersen Torgersen Dream    \n[134] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[141] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[148] Dream     Dream     Dream     Dream     Dream     Biscoe    Biscoe   \n[155] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[162] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[169] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[176] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[183] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[190] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[197] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[204] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[211] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[218] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[225] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[232] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[239] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[246] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[253] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[260] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[267] Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe    Biscoe   \n[274] Biscoe    Biscoe    Biscoe    Dream     Dream     Dream     Dream    \n[281] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[288] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[295] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[302] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[309] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[316] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[323] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[330] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[337] Dream     Dream     Dream     Dream     Dream     Dream     Dream    \n[344] Dream    \nLevels: Biscoe Dream Torgersen\n\n$bill_length_mm\n              [,1]\n  [1,] -0.88320467\n  [2,] -0.80993901\n  [3,] -0.66340769\n  [4,]          NA\n  [5,] -1.32279862\n  [6,] -0.84657184\n  [7,] -0.91983750\n  [8,] -0.86488825\n  [9,] -1.79902541\n [10,] -0.35202864\n [11,] -1.12131806\n [12,] -1.12131806\n [13,] -0.51687637\n [14,] -0.97478674\n [15,] -1.70744334\n [16,] -1.34111504\n [17,] -0.95647033\n [18,] -0.26044656\n [19,] -1.74407616\n [20,]  0.38062795\n [21,] -1.12131806\n [22,] -1.13963448\n [23,] -1.46932994\n [24,] -1.04805240\n [25,] -0.93815391\n [26,] -1.57922843\n [27,] -0.60845845\n [28,] -0.62677486\n [29,] -1.10300165\n [30,] -0.62677486\n [31,] -0.80993901\n [32,] -1.23121655\n [33,] -0.80993901\n [34,] -0.55350920\n [35,] -1.37774787\n [36,] -0.86488825\n [37,] -0.93815391\n [38,] -0.31539581\n [39,] -1.15795089\n [40,] -0.75498976\n [41,] -1.35943145\n [42,] -0.57182562\n [43,] -1.45101353\n [44,]  0.03261607\n [45,] -1.26784938\n [46,] -0.79162259\n [47,] -0.51687637\n [48,] -1.17626731\n [49,] -1.45101353\n [50,] -0.29707939\n [51,] -0.79162259\n [52,] -0.70004052\n [53,] -1.63417768\n [54,] -0.35202864\n [55,] -1.72575975\n [56,] -0.46192713\n [57,] -0.90152108\n [58,] -0.60845845\n [59,] -1.35943145\n [60,] -1.15795089\n [61,] -1.50596277\n [62,] -0.48024354\n [63,] -1.15795089\n [64,] -0.51687637\n [65,] -1.37774787\n [66,] -0.42529430\n [67,] -1.54259560\n [68,] -0.51687637\n [69,] -1.46932994\n [70,] -0.38866147\n [71,] -1.90892390\n [72,] -0.77330618\n [73,] -0.79162259\n [74,]  0.34399512\n [75,] -1.54259560\n [76,] -0.20549732\n [77,] -0.55350920\n [78,] -1.23121655\n [79,] -1.41438070\n [80,] -0.33371222\n [81,] -1.70744334\n [82,] -0.18718091\n [83,] -1.32279862\n [84,] -1.61586126\n [85,] -1.21290014\n [86,] -0.48024354\n [87,] -1.39606428\n [88,] -1.28616579\n [89,] -1.02973599\n [90,] -0.91983750\n [91,] -1.50596277\n [92,] -0.51687637\n [93,] -1.81734182\n [94,] -0.79162259\n [95,] -1.41438070\n [96,] -0.57182562\n [97,] -1.06636882\n [98,] -0.66340769\n [99,] -1.98218956\n[100,] -0.13223166\n[101,] -1.63417768\n[102,] -0.53519279\n[103,] -1.13963448\n[104,] -1.12131806\n[105,] -1.10300165\n[106,] -0.77330618\n[107,] -0.97478674\n[108,] -1.04805240\n[109,] -1.06636882\n[110,] -0.13223166\n[111,] -1.06636882\n[112,]  0.30736229\n[113,] -0.77330618\n[114,] -0.31539581\n[115,] -0.79162259\n[116,] -0.22381374\n[117,] -0.97478674\n[118,] -1.21290014\n[119,] -1.50596277\n[120,] -0.51687637\n[121,] -1.41438070\n[122,] -1.13963448\n[123,] -0.68172411\n[124,] -0.46192713\n[125,] -1.59754485\n[126,] -0.60845845\n[127,] -0.93815391\n[128,] -0.44361071\n[129,] -0.90152108\n[130,]  0.03261607\n[131,] -0.99310316\n[132,] -0.15054808\n[133,] -1.30448221\n[134,] -1.17626731\n[135,] -1.06636882\n[136,] -0.51687637\n[137,] -1.52427919\n[138,] -0.68172411\n[139,] -1.26784938\n[140,] -0.77330618\n[141,] -0.68172411\n[142,] -0.60845845\n[143,] -2.16535371\n[144,] -0.59014203\n[145,] -1.21290014\n[146,] -0.90152108\n[147,] -0.86488825\n[148,] -1.34111504\n[149,] -1.45101353\n[150,] -1.12131806\n[151,] -1.45101353\n[152,] -0.44361071\n[153,]  0.39894437\n[154,]  1.11328455\n[155,]  0.87517115\n[156,]  1.11328455\n[157,]  0.67369059\n[158,]  0.47221003\n[159,]  0.27072946\n[160,]  0.50884286\n[161,] -0.11391525\n[162,]  0.52715927\n[163,] -0.55350920\n[164,]  0.93012040\n[165,]  0.28904588\n[166,]  0.82022191\n[167,]  0.34399512\n[168,]  0.98506964\n[169,] -0.35202864\n[170,]  0.96675323\n[171,]  0.41726078\n[172,]  0.87517115\n[173,]  1.14991738\n[174,]  0.21578022\n[175,]  0.47221003\n[176,]  0.43557720\n[177,] -0.18718091\n[178,]  0.39894437\n[179,]  0.10588173\n[180,]  0.71032342\n[181,]  0.78358908\n[182,]  1.11328455\n[183,]  0.61874135\n[184,] -0.20549732\n[185,]  0.21578022\n[186,]  2.87166037\n[187,]  0.94843681\n[188,]  0.82022191\n[189,] -0.24213015\n[190,]  0.08756532\n[191,]  0.01429966\n[192,]  0.87517115\n[193,] -0.22381374\n[194,]  1.04001889\n[195,]  0.25241305\n[196,]  1.04001889\n[197,]  1.20486662\n[198,] -0.05896600\n[199,]  0.28904588\n[200,]  1.20486662\n[201,]  0.17914739\n[202,]  0.23409663\n[203,]  0.49052644\n[204,]  0.83853832\n[205,]  0.21578022\n[206,]  1.13160096\n[207,]  0.47221003\n[208,]  0.19746381\n[209,] -0.02233317\n[210,]  0.28904588\n[211,] -0.13223166\n[212,]  1.18655021\n[213,]  0.25241305\n[214,]  0.41726078\n[215,]  0.32567871\n[216,]  1.90089038\n[217,]  0.34399512\n[218,]  1.07665172\n[219,]  0.41726078\n[220,]  1.02170247\n[221,] -0.07728242\n[222,]  1.24149945\n[223,]  0.69200701\n[224,]  0.45389361\n[225,]  0.78358908\n[226,]  0.47221003\n[227,]  0.45389361\n[228,]  0.85685474\n[229,]  0.65537418\n[230,]  1.31476511\n[231,]  0.23409663\n[232,]  0.23409663\n[233,]  0.94843681\n[234,]  1.57119492\n[235,]  0.63705776\n[236,]  1.11328455\n[237,]  0.17914739\n[238,]  1.25981586\n[239,] -0.09559883\n[240,]  1.35139794\n[241,]  0.65537418\n[242,]  1.49792926\n[243,]  0.65537418\n[244,]  1.51624567\n[245,]  0.28904588\n[246,]  1.02170247\n[247,]  0.10588173\n[248,]  1.25981586\n[249,]  1.00338606\n[250,]  0.54547569\n[251,]  0.82022191\n[252,]  1.31476511\n[253,]  0.83853832\n[254,]  2.19395302\n[255,]  0.60042493\n[256,]  0.94843681\n[257,]  0.61874135\n[258,]  0.52715927\n[259,] -0.40697788\n[260,]  1.73604265\n[261,] -0.11391525\n[262,]  0.76527266\n[263,]  1.20486662\n[264,]  1.07665172\n[265,] -0.07728242\n[266,]  1.38803077\n[267,]  0.41726078\n[268,]  2.04742170\n[269,]  0.10588173\n[270,]  0.89348757\n[271,]  0.60042493\n[272,]          NA\n[273,]  0.52715927\n[274,]  1.18655021\n[275,]  0.23409663\n[276,]  1.09496813\n[277,]  0.47221003\n[278,]  1.11328455\n[279,]  1.35139794\n[280,]  0.27072946\n[281,]  1.60782775\n[282,]  0.23409663\n[283,]  0.39894437\n[284,]  1.35139794\n[285,]  0.38062795\n[286,]  1.35139794\n[287,]  0.49052644\n[288,]  1.42466360\n[289,]  0.56379210\n[290,]  1.47961284\n[291,]  0.36231154\n[292,]  1.20486662\n[293,]  1.16823379\n[294,]  2.57859773\n[295,]  0.45389361\n[296,]  0.96675323\n[297,] -0.27876298\n[298,]  0.83853832\n[299,] -0.13223166\n[300,]  1.22318303\n[301,]  0.50884286\n[302,]  1.47961284\n[303,]  1.20486662\n[304,]  1.02170247\n[305,]  0.45389361\n[306,]  1.62614416\n[307,] -0.55350920\n[308,]  1.88257397\n[309,] -0.26044656\n[310,]  1.29644869\n[311,]  1.05833530\n[312,]  0.65537418\n[313,]  0.67369059\n[314,]  1.47961284\n[315,]  0.54547569\n[316,]  1.75435906\n[317,]  0.93012040\n[318,]  0.41726078\n[319,]  1.27813228\n[320,]  0.28904588\n[321,]  1.27813228\n[322,]  1.25981586\n[323,]  1.13160096\n[324,]  0.93012040\n[325,]  1.38803077\n[326,]  1.07665172\n[327,]  0.76527266\n[328,]  1.36971435\n[329,]  0.32567871\n[330,]  1.24149945\n[331,] -0.26044656\n[332,]  1.51624567\n[333,]  0.23409663\n[334,]  0.98506964\n[335,]  1.14991738\n[336,]  0.30736229\n[337,]  1.46129643\n[338,]  0.52715927\n[339,]  0.32567871\n[340,]  2.17563660\n[341,] -0.07728242\n[342,]  1.04001889\n[343,]  1.25981586\n[344,]  1.14991738\nattr(,\"scaled:center\")\n[1] 43.92193\nattr(,\"scaled:scale\")\n[1] 5.459584\n\n$bill_depth_mm\n              [,1]\n  [1,]  0.78430007\n  [2,]  0.12600328\n  [3,]  0.42983257\n  [4,]          NA\n  [5,]  1.08812936\n  [6,]  1.74642615\n  [7,]  0.32855614\n  [8,]  1.24004400\n  [9,]  0.48047078\n [10,]  1.54387329\n [11,] -0.02591137\n [12,]  0.07536506\n [13,]  0.22727971\n [14,]  2.05025544\n [15,]  1.99961722\n [16,]  0.32855614\n [17,]  0.93621471\n [18,]  1.79706436\n [19,]  0.63238542\n [20,]  2.20217008\n [21,]  0.58174721\n [22,]  0.78430007\n [23,]  1.03749114\n [24,]  0.48047078\n [25,]  0.02472685\n [26,]  0.88557650\n [27,]  0.73366185\n [28,]  0.37919435\n [29,]  0.73366185\n [30,]  0.88557650\n [31,] -0.22846423\n [32,]  0.48047078\n [33,]  0.32855614\n [34,]  0.88557650\n [35,] -0.07654958\n [36,]  1.99961722\n [37,]  1.44259686\n [38,]  0.68302364\n [39,]  1.08812936\n [40,]  0.98685293\n [41,]  0.42983257\n [42,]  0.63238542\n [43,]  0.68302364\n [44,]  1.29068222\n [45,] -0.12718780\n [46,]  0.83493828\n [47,]  0.93621471\n [48,]  0.88557650\n [49,]  0.37919435\n [50,]  2.05025544\n [51,]  0.27791792\n [52,]  0.88557650\n [53,]  0.37919435\n [54,]  1.18940579\n [55,]  0.48047078\n [56,]  0.73366185\n [57,]  0.17664149\n [58,]  0.83493828\n [59,] -0.27910244\n [60,]  0.98685293\n [61,] -0.12718780\n [62,]  1.99961722\n [63,] -0.07654958\n [64,]  0.53110900\n [65,] -0.02591137\n [66,]  0.42983257\n [67,] -0.48165530\n [68,]  0.98685293\n [69,] -0.27910244\n [70,]  1.13876757\n [71,]  0.93621471\n [72,]  0.63238542\n [73,]  0.02472685\n [74,]  0.88557650\n [75,]  0.17664149\n [76,]  0.68302364\n [77,] -0.17782601\n [78,]  1.13876757\n [79,] -0.53229351\n [80,]  0.98685293\n [81,]  0.02472685\n [82,]  0.22727971\n [83,]  0.83493828\n [84,]  1.13876757\n [85,]  0.32855614\n [86,]  1.59451151\n [87,]  1.18940579\n [88,]  0.73366185\n [89,]  1.03749114\n [90,]  0.83493828\n [91,]  0.42983257\n [92,]  0.48047078\n [93,] -0.02591137\n [94,]  0.48047078\n [95,]  0.07536506\n [96,]  0.88557650\n [97,]  0.73366185\n [98,]  0.68302364\n [99,] -0.53229351\n[100,]  0.68302364\n[101,]  0.37919435\n[102,]  1.44259686\n[103,] -0.58293173\n[104,]  1.44259686\n[105,]  0.73366185\n[106,]  0.88557650\n[107,]  0.02472685\n[108,]  1.44259686\n[109,] -0.07654958\n[110,]  0.93621471\n[111,] -0.32974066\n[112,]  1.59451151\n[113,]  0.27791792\n[114,]  1.18940579\n[115,]  1.79706436\n[116,]  0.58174721\n[117,] -0.07654958\n[118,]  1.69578793\n[119,] -0.07654958\n[120,]  0.73366185\n[121,]  0.02472685\n[122,]  1.34132043\n[123,] -0.07654958\n[124,]  0.68302364\n[125,] -0.63356994\n[126,]  0.93621471\n[127,]  0.22727971\n[128,]  0.58174721\n[129,] -0.02591137\n[130,]  0.42983257\n[131,]  0.37919435\n[132,]  1.03749114\n[133,]  0.68302364\n[134,]  0.68302364\n[135,]  0.22727971\n[136,]  0.17664149\n[137,]  0.17664149\n[138,]  1.49323508\n[139,] -0.32974066\n[140,]  0.37919435\n[141,] -0.02591137\n[142,]  0.02472685\n[143,] -0.83612280\n[144,] -0.07654958\n[145,] -0.17782601\n[146,]  0.78430007\n[147,]  0.73366185\n[148,]  0.63238542\n[149,]  0.32855614\n[150,]  0.48047078\n[151,] -0.02591137\n[152,]  0.68302364\n[153,] -2.00080174\n[154,] -0.43101709\n[155,] -1.54505781\n[156,] -0.98803745\n[157,] -1.34250495\n[158,] -1.84888710\n[159,] -1.29186674\n[160,] -0.93739923\n[161,] -1.89952531\n[162,] -0.88676102\n[163,] -1.74761067\n[164,] -0.53229351\n[165,] -1.74761067\n[166,] -1.29186674\n[167,] -1.29186674\n[168,] -0.73484637\n[169,] -1.84888710\n[170,] -0.98803745\n[171,] -1.34250495\n[172,] -1.03867566\n[173,] -1.44378138\n[174,] -1.34250495\n[175,] -1.34250495\n[176,] -0.68420816\n[177,] -2.05143996\n[178,] -1.03867566\n[179,] -1.44378138\n[180,] -1.08931388\n[181,] -1.44378138\n[182,] -0.93739923\n[183,] -0.93739923\n[184,] -1.49441960\n[185,] -1.34250495\n[186,] -0.07654958\n[187,] -1.19059031\n[188,] -0.43101709\n[189,] -1.74761067\n[190,]  0.07536506\n[191,] -1.79824888\n[192,] -0.73484637\n[193,] -1.74761067\n[194,] -0.58293173\n[195,] -1.74761067\n[196,] -1.08931388\n[197,] -0.63356994\n[198,] -1.64633424\n[199,] -1.64633424\n[200,] -0.63356994\n[201,] -1.95016353\n[202,] -0.68420816\n[203,] -1.49441960\n[204,] -1.54505781\n[205,] -1.39314317\n[206,] -1.08931388\n[207,] -1.39314317\n[208,] -0.88676102\n[209,] -1.64633424\n[210,] -1.08931388\n[211,] -1.34250495\n[212,] -0.93739923\n[213,] -1.69697245\n[214,] -1.13995209\n[215,] -1.64633424\n[216,] -0.73484637\n[217,] -1.49441960\n[218,] -0.17782601\n[219,] -1.39314317\n[220,] -0.48165530\n[221,] -1.49441960\n[222,] -1.08931388\n[223,] -1.08931388\n[224,] -0.78548459\n[225,] -0.78548459\n[226,] -1.19059031\n[227,] -1.08931388\n[228,] -0.58293173\n[229,] -1.49441960\n[230,] -0.43101709\n[231,] -1.69697245\n[232,] -0.38037887\n[233,] -1.34250495\n[234,] -0.78548459\n[235,] -1.29186674\n[236,] -0.63356994\n[237,] -1.69697245\n[238,]  0.07536506\n[239,] -1.39314317\n[240,] -1.49441960\n[241,] -1.59569603\n[242,] -0.07654958\n[243,] -1.08931388\n[244,] -0.02591137\n[245,] -1.34250495\n[246,] -0.53229351\n[247,] -1.24122852\n[248,] -0.73484637\n[249,] -0.68420816\n[250,] -1.29186674\n[251,] -1.39314317\n[252,] -0.32974066\n[253,] -1.08931388\n[254,] -0.07654958\n[255,] -0.83612280\n[256,] -1.08931388\n[257,] -1.69697245\n[258,] -0.53229351\n[259,] -1.24122852\n[260,] -0.68420816\n[261,] -1.59569603\n[262,] -1.03867566\n[263,] -0.98803745\n[264,] -0.63356994\n[265,] -0.98803745\n[266,] -0.43101709\n[267,] -1.54505781\n[268,] -0.58293173\n[269,] -0.73484637\n[270,] -0.48165530\n[271,] -1.74761067\n[272,]          NA\n[273,] -1.44378138\n[274,] -0.73484637\n[275,] -1.19059031\n[276,] -0.53229351\n[277,]  0.37919435\n[278,]  1.18940579\n[279,]  1.03749114\n[280,]  0.78430007\n[281,]  1.34132043\n[282,]  0.32855614\n[283,]  0.53110900\n[284,]  0.53110900\n[285,]  0.88557650\n[286,]  1.39195865\n[287,]  0.32855614\n[288,]  1.59451151\n[289,]  0.07536506\n[290,]  0.48047078\n[291,] -0.02591137\n[292,]  1.24004400\n[293,]  1.44259686\n[294,]  0.32855614\n[295,]  0.73366185\n[296,]  0.53110900\n[297,]  0.07536506\n[298,]  0.17664149\n[299,] -0.27910244\n[300,]  1.13876757\n[301,]  0.37919435\n[302,]  0.93621471\n[303,]  0.63238542\n[304,]  0.93621471\n[305,]  0.32855614\n[306,]  1.44259686\n[307,] -0.27910244\n[308,]  1.84770258\n[309,] -0.22846423\n[310,]  0.83493828\n[311,]  0.73366185\n[312,] -0.17782601\n[313,]  0.58174721\n[314,]  1.79706436\n[315,] -0.27910244\n[316,]  1.39195865\n[317,]  1.18940579\n[318,]  0.17664149\n[319,]  0.98685293\n[320,] -0.07654958\n[321,]  0.37919435\n[322,]  0.68302364\n[323,]  0.37919435\n[324,]  1.24004400\n[325,]  0.78430007\n[326,]  0.07536506\n[327,] -0.38037887\n[328,]  0.93621471\n[329,]  0.07536506\n[330,]  1.29068222\n[331,]  0.07536506\n[332,]  0.83493828\n[333,] -0.27910244\n[334,]  1.39195865\n[335,]  0.83493828\n[336,]  1.13876757\n[337,]  1.18940579\n[338,] -0.32974066\n[339,] -0.07654958\n[340,]  1.34132043\n[341,]  0.48047078\n[342,]  0.53110900\n[343,]  0.93621471\n[344,]  0.78430007\nattr(,\"scaled:center\")\n[1] 17.15117\nattr(,\"scaled:scale\")\n[1] 1.974793\n\n$flipper_length_mm\n               [,1]\n  [1,] -1.416271525\n  [2,] -1.060696087\n  [3,] -0.420660299\n  [4,]           NA\n  [5,] -0.562890474\n  [6,] -0.776235737\n  [7,] -1.416271525\n  [8,] -0.420660299\n  [9,] -0.562890474\n [10,] -0.776235737\n [11,] -1.060696087\n [12,] -1.487386613\n [13,] -1.345156438\n [14,] -0.705120649\n [15,] -0.207315036\n [16,] -1.131811175\n [17,] -0.420660299\n [18,] -0.278430124\n [19,] -1.202926262\n [20,] -0.491775386\n [21,] -1.914077138\n [22,] -1.487386613\n [23,] -0.847350824\n [24,] -1.131811175\n [25,] -1.487386613\n [26,] -0.989581000\n [27,] -1.274041350\n [28,] -0.989581000\n [29,] -2.056307313\n [30,] -1.487386613\n [31,] -1.629616788\n [32,] -1.629616788\n [33,] -0.918465912\n [34,] -1.202926262\n [35,] -0.420660299\n [36,] -0.349545211\n [37,] -0.776235737\n [38,] -1.487386613\n [39,] -1.416271525\n [40,] -1.202926262\n [41,] -1.345156438\n [42,] -0.420660299\n [43,] -1.060696087\n [44,] -0.349545211\n [45,] -1.131811175\n [46,] -0.776235737\n [47,] -1.345156438\n [48,] -1.558501700\n [49,] -0.776235737\n [50,] -0.705120649\n [51,] -1.060696087\n [52,] -0.918465912\n [53,] -0.776235737\n [54,] -0.065084861\n [55,] -0.989581000\n [56,] -0.705120649\n [57,] -1.060696087\n [58,] -0.562890474\n [59,] -1.416271525\n [60,] -0.491775386\n [61,] -1.131811175\n [62,] -0.420660299\n [63,] -1.131811175\n [64,] -0.634005562\n [65,] -1.202926262\n [66,] -0.634005562\n [67,] -0.420660299\n [68,] -0.918465912\n [69,] -0.776235737\n [70,] -0.207315036\n [71,] -0.776235737\n [72,] -0.776235737\n [73,] -0.349545211\n [74,] -0.278430124\n [75,] -0.776235737\n [76,] -0.420660299\n [77,] -0.705120649\n [78,] -1.202926262\n [79,] -0.989581000\n [80,] -0.420660299\n [81,] -0.847350824\n [82,] -0.349545211\n [83,] -0.989581000\n [84,] -0.562890474\n [85,] -0.705120649\n [86,] -0.491775386\n [87,] -0.776235737\n [88,] -0.847350824\n [89,] -0.847350824\n [90,] -0.776235737\n [91,]  0.077145314\n [92,]  0.290490577\n [93,] -1.131811175\n [94,] -1.060696087\n [95,] -0.989581000\n [96,]  0.503835840\n [97,] -0.776235737\n [98,] -0.349545211\n [99,] -1.629616788\n[100,] -0.634005562\n[101,] -0.634005562\n[102,]  0.148260402\n[103,] -1.274041350\n[104,] -0.776235737\n[105,] -0.562890474\n[106,] -1.202926262\n[107,] -0.136199948\n[108,] -0.776235737\n[109,] -1.416271525\n[110,] -0.278430124\n[111,] -0.207315036\n[112,] -0.705120649\n[113,] -0.562890474\n[114,] -0.278430124\n[115,] -0.705120649\n[116,] -0.349545211\n[117,] -0.918465912\n[118,] -0.136199948\n[119,] -0.847350824\n[120,] -0.847350824\n[121,] -0.989581000\n[122,] -0.207315036\n[123,] -1.771846963\n[124,]  0.077145314\n[125,] -1.060696087\n[126,] -0.136199948\n[127,] -0.705120649\n[128,] -0.420660299\n[129,] -0.705120649\n[130,]  0.646066015\n[131,] -0.776235737\n[132,] -0.278430124\n[133,] -0.562890474\n[134,] -0.136199948\n[135,] -0.989581000\n[136,] -0.776235737\n[137,] -0.705120649\n[138,] -0.065084861\n[139,] -1.131811175\n[140,] -0.562890474\n[141,] -0.562890474\n[142,] -0.989581000\n[143,] -0.918465912\n[144,] -0.776235737\n[145,] -0.634005562\n[146,] -1.131811175\n[147,] -0.776235737\n[148,] -1.202926262\n[149,] -0.420660299\n[150,] -0.562890474\n[151,] -0.989581000\n[152,]  0.006030227\n[153,]  0.717181103\n[154,]  2.068367767\n[155,]  0.646066015\n[156,]  1.214986716\n[157,]  1.001641453\n[158,]  0.646066015\n[159,]  0.717181103\n[160,]  1.286101803\n[161,]  0.574950927\n[162,]  1.001641453\n[163,]  0.930526365\n[164,]  1.072756541\n[165,]  0.930526365\n[166,]  0.859411278\n[167,]  0.646066015\n[168,]  1.143871628\n[169,]  0.646066015\n[170,]  1.428331979\n[171,]  0.574950927\n[172,]  1.499447066\n[173,]  1.214986716\n[174,]  1.001641453\n[175,]  0.859411278\n[176,]  1.001641453\n[177,]  1.001641453\n[178,]  1.001641453\n[179,]  1.072756541\n[180,]  1.001641453\n[181,]  0.646066015\n[182,]  1.357216891\n[183,]  1.499447066\n[184,]  0.574950927\n[185,]  0.432720752\n[186,]  2.068367767\n[187,]  1.357216891\n[188,]  1.357216891\n[189,]  0.859411278\n[190,]  1.286101803\n[191,]  0.503835840\n[192,]  0.503835840\n[193,]  0.503835840\n[194,]  1.712792329\n[195,]  0.646066015\n[196,]  1.072756541\n[197,]  1.499447066\n[198,]  1.143871628\n[199,]  0.646066015\n[200,]  1.712792329\n[201,]  0.859411278\n[202,]  1.001641453\n[203,]  0.646066015\n[204,]  1.357216891\n[205,]  0.646066015\n[206,]  1.712792329\n[207,]  1.143871628\n[208,]  1.357216891\n[209,]  0.503835840\n[210,]  1.357216891\n[211,]  0.503835840\n[212,]  1.641677241\n[213,]  0.503835840\n[214,]  1.428331979\n[215,]  0.930526365\n[216,]  2.139482854\n[217,]  1.286101803\n[218,]  2.068367767\n[219,]  0.930526365\n[220,]  1.997252679\n[221,]  1.357216891\n[222,]  1.570562154\n[223,]  1.072756541\n[224,]  1.428331979\n[225,]  1.428331979\n[226,]  1.143871628\n[227,]  1.072756541\n[228,]  2.068367767\n[229,]  0.574950927\n[230,]  1.357216891\n[231,]  1.001641453\n[232,]  1.570562154\n[233,]  0.788296190\n[234,]  1.428331979\n[235,]  0.788296190\n[236,]  1.641677241\n[237,]  0.788296190\n[238,]  1.926137592\n[239,]  1.214986716\n[240,]  1.214986716\n[241,]  0.788296190\n[242,]  2.068367767\n[243,]  1.214986716\n[244,]  1.926137592\n[245,]  0.788296190\n[246,]  1.641677241\n[247,]  0.930526365\n[248,]  1.783907417\n[249,]  1.072756541\n[250,]  1.499447066\n[251,]  0.148260402\n[252,]  1.712792329\n[253,]  1.286101803\n[254,]  1.926137592\n[255,]  1.001641453\n[256,]  1.926137592\n[257,]  1.072756541\n[258,]  1.001641453\n[259,]  0.646066015\n[260,]  1.286101803\n[261,]  0.503835840\n[262,]  0.574950927\n[263,]  1.072756541\n[264,]  1.997252679\n[265,]  0.859411278\n[266,]  2.068367767\n[267,]  1.143871628\n[268,]  2.068367767\n[269,]  1.143871628\n[270,]  1.499447066\n[271,]  0.930526365\n[272,]           NA\n[273,]  1.001641453\n[274,]  1.499447066\n[275,]  0.788296190\n[276,]  0.859411278\n[277,] -0.634005562\n[278,] -0.349545211\n[279,] -0.562890474\n[280,] -0.918465912\n[281,] -0.278430124\n[282,] -0.207315036\n[283,] -1.629616788\n[284,] -0.278430124\n[285,] -0.420660299\n[286,] -0.207315036\n[287,] -0.562890474\n[288,] -0.491775386\n[289,] -1.131811175\n[290,]  0.006030227\n[291,] -0.776235737\n[292,]  0.006030227\n[293,] -0.278430124\n[294,] -1.416271525\n[295,] -0.776235737\n[296,] -0.420660299\n[297,] -1.416271525\n[298,] -0.705120649\n[299,] -0.989581000\n[300,] -0.562890474\n[301,] -0.420660299\n[302,] -0.278430124\n[303,] -0.065084861\n[304,] -0.065084861\n[305,] -0.705120649\n[306,]  0.290490577\n[307,] -0.989581000\n[308,]  0.006030227\n[309,] -0.989581000\n[310,]  0.148260402\n[311,] -0.420660299\n[312,] -0.136199948\n[313,] -0.420660299\n[314,]  0.646066015\n[315,] -0.634005562\n[316,]  0.290490577\n[317,]  0.646066015\n[318,] -0.989581000\n[319,] -0.349545211\n[320,] -0.349545211\n[321,] -0.349545211\n[322,]  0.006030227\n[323,] -0.776235737\n[324,]  0.788296190\n[325,] -0.989581000\n[326,] -0.207315036\n[327,] -0.136199948\n[328,]  0.006030227\n[329,] -0.562890474\n[330,]  0.148260402\n[331,] -0.989581000\n[332,] -0.278430124\n[333,] -0.705120649\n[334,]  0.148260402\n[335,]  0.077145314\n[336,] -0.491775386\n[337,]  0.361605665\n[338,] -0.847350824\n[339,] -0.420660299\n[340,]  0.432720752\n[341,]  0.077145314\n[342,] -0.562890474\n[343,]  0.646066015\n[344,] -0.207315036\nattr(,\"scaled:center\")\n[1] 200.9152\nattr(,\"scaled:scale\")\n[1] 14.06171\n\n$body_mass_g\n               [,1]\n  [1,] -0.563316704\n  [2,] -0.500969030\n  [3,] -1.186793445\n  [4,]           NA\n  [5,] -0.937402749\n  [6,] -0.688012052\n  [7,] -0.719185889\n  [8,]  0.590115266\n  [9,] -0.906228912\n [10,]  0.060160036\n [11,] -1.124445771\n [12,] -0.625664378\n [13,] -1.249141119\n [14,] -0.500969030\n [15,]  0.247203059\n [16,] -0.625664378\n [17,] -0.937402749\n [18,]  0.371898407\n [19,] -1.093271934\n [20,] -0.002187638\n [21,] -0.999750423\n [22,] -0.750359726\n [23,] -0.500969030\n [24,] -0.313926008\n [25,] -0.500969030\n [26,] -0.500969030\n [27,] -0.812707400\n [28,] -1.249141119\n [29,] -1.311488793\n [30,] -0.313926008\n [31,] -1.186793445\n [32,] -0.376273682\n [33,] -1.124445771\n [34,] -0.376273682\n [35,] -1.093271934\n [36,] -0.064535312\n [37,] -0.313926008\n [38,] -0.812707400\n [39,] -1.124445771\n [40,]  0.558941429\n [41,] -1.311488793\n [42,] -0.376273682\n [43,] -1.373836467\n [44,]  0.247203059\n [45,] -1.498531815\n [46,]  0.496593755\n [47,] -0.968576586\n [48,] -1.529705652\n [49,] -0.937402749\n [50,] -0.064535312\n [51,] -0.875055074\n [52,]  0.122507710\n [53,] -0.937402749\n [54,] -0.189230660\n [55,] -1.623227163\n [56,] -0.625664378\n [57,] -0.812707400\n [58,] -0.500969030\n [59,] -1.685574837\n [60,] -0.563316704\n [61,] -1.311488793\n [62,]  0.247203059\n [63,] -0.750359726\n [64,] -0.189230660\n [65,] -1.685574837\n [66,] -0.313926008\n [67,] -1.062098097\n [68,] -0.126882986\n [69,] -1.436184141\n [70,]  0.309550733\n [71,] -0.750359726\n [72,] -0.376273682\n [73,] -0.812707400\n [74,] -0.064535312\n [75,] -0.625664378\n [76,]  0.060160036\n [77,] -0.625664378\n [78,] -0.376273682\n [79,] -0.812707400\n [80,] -0.251578334\n [81,] -1.249141119\n [82,]  0.621289103\n [83,] -0.500969030\n [84,] -0.002187638\n [85,] -1.062098097\n [86,] -0.812707400\n [87,] -0.500969030\n [88,] -0.875055074\n [89,] -0.313926008\n [90,] -0.750359726\n [91,] -0.812707400\n [92,]  0.122507710\n [93,] -0.999750423\n [94,]  0.309550733\n [95,] -1.124445771\n [96,]  0.122507710\n [97,] -0.625664378\n [98,]  0.184855384\n [99,] -1.623227163\n[100,] -0.126882986\n[101,] -0.594490541\n[102,]  0.652462940\n[103,] -1.405010304\n[104,]  0.060160036\n[105,] -1.592053326\n[106,] -0.812707400\n[107,] -0.563316704\n[108,] -0.376273682\n[109,] -1.280314956\n[110,]  0.714810614\n[111,] -0.469795193\n[112,]  0.496593755\n[113,] -1.249141119\n[114,]  0.091333873\n[115,] -0.376273682\n[116,] -0.158056823\n[117,] -1.623227163\n[118,] -0.532142867\n[119,] -1.062098097\n[120,] -1.093271934\n[121,] -1.311488793\n[122,] -0.875055074\n[123,] -0.937402749\n[124,] -0.407447519\n[125,] -1.436184141\n[126,] -0.251578334\n[127,] -1.155619608\n[128,]  0.122507710\n[129,] -1.436184141\n[130,] -0.251578334\n[131,] -1.093271934\n[132,] -0.875055074\n[133,] -0.875055074\n[134,]  0.340724570\n[135,] -0.968576586\n[136,] -0.376273682\n[137,] -1.280314956\n[138,] -0.282752171\n[139,] -0.999750423\n[140,]  0.060160036\n[141,] -0.999750423\n[142,] -0.906228912\n[143,] -1.436184141\n[144,] -0.594490541\n[145,] -1.498531815\n[146,] -0.688012052\n[147,]  0.060160036\n[148,] -0.906228912\n[149,] -0.937402749\n[150,] -0.563316704\n[151,] -0.625664378\n[152,] -0.251578334\n[153,]  0.371898407\n[154,]  1.868242584\n[155,]  0.309550733\n[156,]  1.868242584\n[157,]  1.494156540\n[158,]  0.434246081\n[159,]  0.745984451\n[160,]  1.244765843\n[161,]  0.247203059\n[162,]  1.182418169\n[163,]  0.558941429\n[164,]  1.681199562\n[165,]  0.558941429\n[166,]  2.055285606\n[167,] -0.002187638\n[168,]  2.055285606\n[169,] -0.064535312\n[170,]  2.616414673\n[171,]  0.745984451\n[172,]  1.431808866\n[173,]  1.868242584\n[174,]  0.995375147\n[175,]  0.247203059\n[176,]  1.057722821\n[177,]  0.995375147\n[178,]  1.120070495\n[179,] -0.126882986\n[180,]  1.805894910\n[181,]  0.496593755\n[182,]  1.681199562\n[183,]  1.307113518\n[184,]  0.621289103\n[185,]  1.057722821\n[186,]  2.304676302\n[187,]  1.182418169\n[188,]  1.494156540\n[189,]  0.933027473\n[190,]  1.307113518\n[191,]  0.184855384\n[192,]  1.431808866\n[193,] -0.313926008\n[194,]  1.868242584\n[195,]  0.122507710\n[196,]  0.683636777\n[197,]  1.681199562\n[198,]  0.870679799\n[199,] -0.002187638\n[200,]  1.494156540\n[201,]  1.120070495\n[202,]  1.369461192\n[203,]  0.808332125\n[204,]  1.369461192\n[205,]  0.247203059\n[206,]  0.995375147\n[207,]  0.870679799\n[208,]  1.057722821\n[209,]  0.122507710\n[210,]  0.995375147\n[211,]  0.309550733\n[212,]  1.681199562\n[213,] -0.002187638\n[214,]  1.369461192\n[215,]  0.247203059\n[216,]  1.805894910\n[217,]  0.621289103\n[218,]  1.868242584\n[219,]  0.558941429\n[220,]  1.992937932\n[221,]  0.621289103\n[222,]  1.681199562\n[223,]  0.683636777\n[224,]  0.995375147\n[225,]  1.120070495\n[226,]  1.244765843\n[227,]  0.621289103\n[228,]  1.992937932\n[229,]  0.496593755\n[230,]  2.242328628\n[231,]  0.683636777\n[232,]  2.179980954\n[233,]  0.527767592\n[234,]  1.556504214\n[235,]  0.652462940\n[236,]  1.431808866\n[237,]  0.683636777\n[238,]  1.743547236\n[239,]  0.496593755\n[240,]  1.369461192\n[241,]  0.839505962\n[242,]  1.681199562\n[243,]  0.933027473\n[244,]  1.494156540\n[245,]  0.683636777\n[246,]  1.805894910\n[247,]  0.808332125\n[248,]  1.244765843\n[249,]  0.901853636\n[250,]  0.839505962\n[251,]  0.527767592\n[252,]  1.307113518\n[253,]  0.808332125\n[254,]  1.743547236\n[255,]  0.964201310\n[256,]  1.618851888\n[257,]  0.652462940\n[258,]  1.618851888\n[259,]  0.621289103\n[260,]  1.618851888\n[261,]  0.465419918\n[262,]  1.618851888\n[263,]  0.995375147\n[264,]  2.179980954\n[265,]  0.558941429\n[266,]  1.618851888\n[267,]  0.216029222\n[268,]  2.055285606\n[269,]  0.839505962\n[270,]  2.242328628\n[271,]  0.901853636\n[272,]           NA\n[273,]  0.808332125\n[274,]  1.930590258\n[275,]  1.244765843\n[276,]  1.494156540\n[277,] -0.875055074\n[278,] -0.376273682\n[279,] -0.688012052\n[280,] -0.843881237\n[281,] -0.594490541\n[282,] -0.313926008\n[283,] -1.186793445\n[284,] -0.563316704\n[285,] -0.064535312\n[286,] -0.625664378\n[287,] -0.500969030\n[288,] -0.532142867\n[289,] -0.625664378\n[290,] -0.189230660\n[291,] -0.781533563\n[292,] -0.189230660\n[293,] -1.124445771\n[294,] -0.625664378\n[295,] -0.937402749\n[296,]  0.247203059\n[297,] -0.750359726\n[298,] -0.999750423\n[299,] -1.623227163\n[300,] -0.500969030\n[301,] -1.124445771\n[302,] -0.064535312\n[303,] -0.999750423\n[304,] -0.500969030\n[305,] -0.625664378\n[306,]  0.434246081\n[307,] -1.249141119\n[308,]  0.122507710\n[309,] -1.062098097\n[310,] -0.126882986\n[311,] -0.750359726\n[312,] -0.376273682\n[313,] -0.438621356\n[314,]  0.745984451\n[315,] -1.872617859\n[316,]  0.371898407\n[317,] -0.313926008\n[318,] -0.688012052\n[319,] -0.812707400\n[320,] -0.875055074\n[321,] -0.656838215\n[322,]  0.309550733\n[323,] -0.999750423\n[324,]  0.122507710\n[325,] -1.186793445\n[326,] -0.656838215\n[327,] -1.093271934\n[328,] -0.313926008\n[329,] -0.750359726\n[330,] -0.189230660\n[331,] -1.062098097\n[332,] -0.937402749\n[333,] -1.186793445\n[334,] -0.189230660\n[335,] -0.500969030\n[336,] -0.843881237\n[337,] -0.313926008\n[338,] -0.688012052\n[339,] -0.688012052\n[340,] -0.251578334\n[341,] -0.999750423\n[342,] -0.532142867\n[343,] -0.126882986\n[344,] -0.532142867\nattr(,\"scaled:center\")\n[1] 4201.754\nattr(,\"scaled:scale\")\n[1] 801.9545\n\n$sex\n  [1] male   female female <NA>   female male   female male   <NA>   <NA>  \n [11] <NA>   <NA>   female male   male   female female male   female male  \n [21] female male   female male   male   female male   female female male  \n [31] female male   female male   female male   male   female female male  \n [41] female male   female male   female male   male   <NA>   female male  \n [51] female male   female male   female male   female male   female male  \n [61] female male   female male   female male   female male   female male  \n [71] female male   female male   female male   female male   female male  \n [81] female male   female male   female male   male   female male   female\n [91] female male   female male   female male   female male   female male  \n[101] female male   female male   female male   female male   female male  \n[111] female male   female male   female male   female male   female male  \n[121] female male   female male   female male   female male   female male  \n[131] female male   female male   female male   female male   female male  \n[141] female male   female male   female male   male   female female male  \n[151] female male   female male   female male   male   female female male  \n[161] female male   female male   female male   female male   female male  \n[171] female male   male   female female male   female male   <NA>   male  \n[181] female male   male   female female male   female male   female male  \n[191] female male   female male   female male   male   female female male  \n[201] female male   female male   female male   female male   female male  \n[211] female male   female male   female male   female male   <NA>   male  \n[221] female male   female male   male   female female male   female male  \n[231] female male   female male   female male   female male   female male  \n[241] female male   female male   female male   female male   male   female\n[251] female male   female male   female male   <NA>   male   female male  \n[261] female male   female male   female male   female male   <NA>   male  \n[271] female <NA>   female male   female male   female male   male   female\n[281] male   female female male   female male   female male   female male  \n[291] female male   male   female female male   female male   female male  \n[301] female male   female male   female male   female male   female male  \n[311] male   female female male   female male   male   female male   female\n[321] female male   female male   male   female female male   female male  \n[331] female male   female male   male   female male   female female male  \n[341] female male   male   female\nLevels: female male\n\n$year\n              [,1]\n  [1,] -1.25748435\n  [2,] -1.25748435\n  [3,] -1.25748435\n  [4,] -1.25748435\n  [5,] -1.25748435\n  [6,] -1.25748435\n  [7,] -1.25748435\n  [8,] -1.25748435\n  [9,] -1.25748435\n [10,] -1.25748435\n [11,] -1.25748435\n [12,] -1.25748435\n [13,] -1.25748435\n [14,] -1.25748435\n [15,] -1.25748435\n [16,] -1.25748435\n [17,] -1.25748435\n [18,] -1.25748435\n [19,] -1.25748435\n [20,] -1.25748435\n [21,] -1.25748435\n [22,] -1.25748435\n [23,] -1.25748435\n [24,] -1.25748435\n [25,] -1.25748435\n [26,] -1.25748435\n [27,] -1.25748435\n [28,] -1.25748435\n [29,] -1.25748435\n [30,] -1.25748435\n [31,] -1.25748435\n [32,] -1.25748435\n [33,] -1.25748435\n [34,] -1.25748435\n [35,] -1.25748435\n [36,] -1.25748435\n [37,] -1.25748435\n [38,] -1.25748435\n [39,] -1.25748435\n [40,] -1.25748435\n [41,] -1.25748435\n [42,] -1.25748435\n [43,] -1.25748435\n [44,] -1.25748435\n [45,] -1.25748435\n [46,] -1.25748435\n [47,] -1.25748435\n [48,] -1.25748435\n [49,] -1.25748435\n [50,] -1.25748435\n [51,] -0.03552216\n [52,] -0.03552216\n [53,] -0.03552216\n [54,] -0.03552216\n [55,] -0.03552216\n [56,] -0.03552216\n [57,] -0.03552216\n [58,] -0.03552216\n [59,] -0.03552216\n [60,] -0.03552216\n [61,] -0.03552216\n [62,] -0.03552216\n [63,] -0.03552216\n [64,] -0.03552216\n [65,] -0.03552216\n [66,] -0.03552216\n [67,] -0.03552216\n [68,] -0.03552216\n [69,] -0.03552216\n [70,] -0.03552216\n [71,] -0.03552216\n [72,] -0.03552216\n [73,] -0.03552216\n [74,] -0.03552216\n [75,] -0.03552216\n [76,] -0.03552216\n [77,] -0.03552216\n [78,] -0.03552216\n [79,] -0.03552216\n [80,] -0.03552216\n [81,] -0.03552216\n [82,] -0.03552216\n [83,] -0.03552216\n [84,] -0.03552216\n [85,] -0.03552216\n [86,] -0.03552216\n [87,] -0.03552216\n [88,] -0.03552216\n [89,] -0.03552216\n [90,] -0.03552216\n [91,] -0.03552216\n [92,] -0.03552216\n [93,] -0.03552216\n [94,] -0.03552216\n [95,] -0.03552216\n [96,] -0.03552216\n [97,] -0.03552216\n [98,] -0.03552216\n [99,] -0.03552216\n[100,] -0.03552216\n[101,]  1.18644003\n[102,]  1.18644003\n[103,]  1.18644003\n[104,]  1.18644003\n[105,]  1.18644003\n[106,]  1.18644003\n[107,]  1.18644003\n[108,]  1.18644003\n[109,]  1.18644003\n[110,]  1.18644003\n[111,]  1.18644003\n[112,]  1.18644003\n[113,]  1.18644003\n[114,]  1.18644003\n[115,]  1.18644003\n[116,]  1.18644003\n[117,]  1.18644003\n[118,]  1.18644003\n[119,]  1.18644003\n[120,]  1.18644003\n[121,]  1.18644003\n[122,]  1.18644003\n[123,]  1.18644003\n[124,]  1.18644003\n[125,]  1.18644003\n[126,]  1.18644003\n[127,]  1.18644003\n[128,]  1.18644003\n[129,]  1.18644003\n[130,]  1.18644003\n[131,]  1.18644003\n[132,]  1.18644003\n[133,]  1.18644003\n[134,]  1.18644003\n[135,]  1.18644003\n[136,]  1.18644003\n[137,]  1.18644003\n[138,]  1.18644003\n[139,]  1.18644003\n[140,]  1.18644003\n[141,]  1.18644003\n[142,]  1.18644003\n[143,]  1.18644003\n[144,]  1.18644003\n[145,]  1.18644003\n[146,]  1.18644003\n[147,]  1.18644003\n[148,]  1.18644003\n[149,]  1.18644003\n[150,]  1.18644003\n[151,]  1.18644003\n[152,]  1.18644003\n[153,] -1.25748435\n[154,] -1.25748435\n[155,] -1.25748435\n[156,] -1.25748435\n[157,] -1.25748435\n[158,] -1.25748435\n[159,] -1.25748435\n[160,] -1.25748435\n[161,] -1.25748435\n[162,] -1.25748435\n[163,] -1.25748435\n[164,] -1.25748435\n[165,] -1.25748435\n[166,] -1.25748435\n[167,] -1.25748435\n[168,] -1.25748435\n[169,] -1.25748435\n[170,] -1.25748435\n[171,] -1.25748435\n[172,] -1.25748435\n[173,] -1.25748435\n[174,] -1.25748435\n[175,] -1.25748435\n[176,] -1.25748435\n[177,] -1.25748435\n[178,] -1.25748435\n[179,] -1.25748435\n[180,] -1.25748435\n[181,] -1.25748435\n[182,] -1.25748435\n[183,] -1.25748435\n[184,] -1.25748435\n[185,] -1.25748435\n[186,] -1.25748435\n[187,] -0.03552216\n[188,] -0.03552216\n[189,] -0.03552216\n[190,] -0.03552216\n[191,] -0.03552216\n[192,] -0.03552216\n[193,] -0.03552216\n[194,] -0.03552216\n[195,] -0.03552216\n[196,] -0.03552216\n[197,] -0.03552216\n[198,] -0.03552216\n[199,] -0.03552216\n[200,] -0.03552216\n[201,] -0.03552216\n[202,] -0.03552216\n[203,] -0.03552216\n[204,] -0.03552216\n[205,] -0.03552216\n[206,] -0.03552216\n[207,] -0.03552216\n[208,] -0.03552216\n[209,] -0.03552216\n[210,] -0.03552216\n[211,] -0.03552216\n[212,] -0.03552216\n[213,] -0.03552216\n[214,] -0.03552216\n[215,] -0.03552216\n[216,] -0.03552216\n[217,] -0.03552216\n[218,] -0.03552216\n[219,] -0.03552216\n[220,] -0.03552216\n[221,] -0.03552216\n[222,] -0.03552216\n[223,] -0.03552216\n[224,] -0.03552216\n[225,] -0.03552216\n[226,] -0.03552216\n[227,] -0.03552216\n[228,] -0.03552216\n[229,] -0.03552216\n[230,] -0.03552216\n[231,] -0.03552216\n[232,] -0.03552216\n[233,]  1.18644003\n[234,]  1.18644003\n[235,]  1.18644003\n[236,]  1.18644003\n[237,]  1.18644003\n[238,]  1.18644003\n[239,]  1.18644003\n[240,]  1.18644003\n[241,]  1.18644003\n[242,]  1.18644003\n[243,]  1.18644003\n[244,]  1.18644003\n[245,]  1.18644003\n[246,]  1.18644003\n[247,]  1.18644003\n[248,]  1.18644003\n[249,]  1.18644003\n[250,]  1.18644003\n[251,]  1.18644003\n[252,]  1.18644003\n[253,]  1.18644003\n[254,]  1.18644003\n[255,]  1.18644003\n[256,]  1.18644003\n[257,]  1.18644003\n[258,]  1.18644003\n[259,]  1.18644003\n[260,]  1.18644003\n[261,]  1.18644003\n[262,]  1.18644003\n[263,]  1.18644003\n[264,]  1.18644003\n[265,]  1.18644003\n[266,]  1.18644003\n[267,]  1.18644003\n[268,]  1.18644003\n[269,]  1.18644003\n[270,]  1.18644003\n[271,]  1.18644003\n[272,]  1.18644003\n[273,]  1.18644003\n[274,]  1.18644003\n[275,]  1.18644003\n[276,]  1.18644003\n[277,] -1.25748435\n[278,] -1.25748435\n[279,] -1.25748435\n[280,] -1.25748435\n[281,] -1.25748435\n[282,] -1.25748435\n[283,] -1.25748435\n[284,] -1.25748435\n[285,] -1.25748435\n[286,] -1.25748435\n[287,] -1.25748435\n[288,] -1.25748435\n[289,] -1.25748435\n[290,] -1.25748435\n[291,] -1.25748435\n[292,] -1.25748435\n[293,] -1.25748435\n[294,] -1.25748435\n[295,] -1.25748435\n[296,] -1.25748435\n[297,] -1.25748435\n[298,] -1.25748435\n[299,] -1.25748435\n[300,] -1.25748435\n[301,] -1.25748435\n[302,] -1.25748435\n[303,] -0.03552216\n[304,] -0.03552216\n[305,] -0.03552216\n[306,] -0.03552216\n[307,] -0.03552216\n[308,] -0.03552216\n[309,] -0.03552216\n[310,] -0.03552216\n[311,] -0.03552216\n[312,] -0.03552216\n[313,] -0.03552216\n[314,] -0.03552216\n[315,] -0.03552216\n[316,] -0.03552216\n[317,] -0.03552216\n[318,] -0.03552216\n[319,] -0.03552216\n[320,] -0.03552216\n[321,]  1.18644003\n[322,]  1.18644003\n[323,]  1.18644003\n[324,]  1.18644003\n[325,]  1.18644003\n[326,]  1.18644003\n[327,]  1.18644003\n[328,]  1.18644003\n[329,]  1.18644003\n[330,]  1.18644003\n[331,]  1.18644003\n[332,]  1.18644003\n[333,]  1.18644003\n[334,]  1.18644003\n[335,]  1.18644003\n[336,]  1.18644003\n[337,]  1.18644003\n[338,]  1.18644003\n[339,]  1.18644003\n[340,]  1.18644003\n[341,]  1.18644003\n[342,]  1.18644003\n[343,]  1.18644003\n[344,]  1.18644003\nattr(,\"scaled:center\")\n[1] 2008.029\nattr(,\"scaled:scale\")\n[1] 0.8183559\n```\n\n\n:::\n:::\n\n\n### `map_if()` to tibble\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  map_if(is.numeric, scale) |> \n  as.tibble()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 5\n  species island    bill_length_mm[,1] bill_depth_mm[,1] sex   \n  <fct>   <fct>                  <dbl>             <dbl> <fct> \n1 Adelie  Torgersen             -0.883             0.784 male  \n2 Adelie  Torgersen             -0.810             0.126 female\n3 Adelie  Torgersen             -0.663             0.430 female\n4 Adelie  Torgersen             NA                NA     <NA>  \n5 Adelie  Torgersen             -1.32              1.09  female\n6 Adelie  Torgersen             -0.847             1.75  male  \n7 Adelie  Torgersen             -0.920             0.329 female\n8 Adelie  Torgersen             -0.865             1.24  male  \n```\n\n\n:::\n:::\n\n\n:::\n\n\n## The `pmap()` Family\n\nThese functions take in a **list of vectors** and a **function**.\n\n+ The function must accept a number of arguments equal to the length of the list,\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/pmap.png){fig-align='center' width=65%}\n:::\n:::\n\n\n\n## The `pmap()` Family\n\nThe vectors need to have the **same names** as the arguments of the function you are applying.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit <- data.frame(string = c(\"apple\", \"banana\", \"cherry\"),\n                    pattern = c(\"p\", \"n\", \"h\"),\n                    replacement = c(\"P\", \"N\", \"H\"))\nfruit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  string pattern replacement\n1  apple       p           P\n2 banana       n           N\n3 cherry       h           H\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit |> \n  pmap_chr(str_replace_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aPPle\"  \"baNaNa\" \"cHerry\"\n```\n\n\n:::\n:::\n\n\n\n## The `map()` and `pmap()` Family\n\n<br>\n\nThere are **so many** functions -- check out the `purrr` [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf)!\n\n\n## Use functional programming!\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![https://bookdown.org/hneth/ds4psy](images/bart_board_map.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n## [PA 8: The Twelve Days of Christmas](https://zoerehnberg.github.io/STAT331-S23/practice_activities/PA8.html)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![https://studioplayhouse.org/the-12-days-of-christmas/](https://studioplayhouse.org/wp-content/uploads/2020/06/12-Days-of-christmas.jpg){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## `glue()`\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\nThe `glue` package embeds R expressions in curly brackets that are then evaluated and inserted into the argument string.\n\n:::\n::: {.column width=\"30%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/glue.jpg){fig-align='center' width=50%}\n:::\n:::\n\n:::\n::::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glue)\n\nname <- \"Dr. Rehnberg\"\nglue('My name is {name}.')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMy name is Dr. Rehnberg.\n```\n\n\n:::\n:::\n\n\n</br>\n\nThis will be a handy function (and package) for putting our song together!\n\n## An Example\n\n*99 bottles of beer on the wall, 99 bottles of beer. Take one down, pass it around, 98 bottles of beer on the wall...*\n\n::: panel-tabset\n\n### Lyrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbottles_lyrics <- function(n){\n  lyrics <- glue(\"{n} bottles of beer on the wall, {n} bottles of beer \\nTake one down, pass it around, {n -1} bottles of beer on the wall\")\n  return(lyrics)\n}\n\nbottles_lyrics(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3 bottles of beer on the wall, 3 bottles of beer \nTake one down, pass it around, 2 bottles of beer on the wall\n```\n\n\n:::\n:::\n\n\n### Song\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbottles_song <- function(n){\n  song <- map_chr(n:0, bottles_lyrics)\n  return(glue(\"{song}\"))\n}\n\nbottles_song(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3 bottles of beer on the wall, 3 bottles of beer \nTake one down, pass it around, 2 bottles of beer on the wall\n2 bottles of beer on the wall, 2 bottles of beer \nTake one down, pass it around, 1 bottles of beer on the wall\n1 bottles of beer on the wall, 1 bottles of beer \nTake one down, pass it around, 0 bottles of beer on the wall\n0 bottles of beer on the wall, 0 bottles of beer \nTake one down, pass it around, -1 bottles of beer on the wall\n```\n\n\n:::\n:::\n\n\n### Alternate Ending\n\n*No more bottles of beer on the wall, no more bottles of beer. Go to the store, buy some more, 99 bottles of beer on the wall...*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbottles_lyrics <- function(n){\n  if(n == 0){\n    lyrics <- glue(\"No more bottles of beer on the wall, no more bottles of beer. \\nGo to the store, buy some more, 99 bottles of beer on the wall...\")\n  } else{\n    lyrics <- glue(\"{n} bottles of beer on the wall, {n} bottles of beer \\nTake one down, pass it around, {n -1} bottles of beer on the wall\")\n  }\n  return(lyrics)\n}\n```\n:::\n\n\n### Final Song\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbottles_song(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n4 bottles of beer on the wall, 4 bottles of beer \nTake one down, pass it around, 3 bottles of beer on the wall\n3 bottles of beer on the wall, 3 bottles of beer \nTake one down, pass it around, 2 bottles of beer on the wall\n2 bottles of beer on the wall, 2 bottles of beer \nTake one down, pass it around, 1 bottles of beer on the wall\n1 bottles of beer on the wall, 1 bottles of beer \nTake one down, pass it around, 0 bottles of beer on the wall\nNo more bottles of beer on the wall, no more bottles of beer. \nGo to the store, buy some more, 99 bottles of beer on the wall...\n```\n\n\n:::\n:::\n\n:::\n\n\n## To do...\n  \n+ **PA 8: The Twelve Days of Christmas Starter Functions**\n  + Due Wednesday 5/22 at 10:00am.\n  \n+ **Project Proposal + Data**\n  + Due Tuesday 5/28 at 11:59pm.\n  \n</br>\n\n**Tuesday, 5/28 follows a Monday schedule!**\n\n\n## Wednesday, May 22\n\nToday we will...\n\n+ Midterm Exam (extra point on SA and OEA)\n+ New Material\n  + The `map2()` Family\n+ Work Time\n  + Lab 8: The Twelve Days of Christmas\n  + PC3: Project Proposal + Data\n\n\n## The `map2()` Family\n\nThese functions allow us to iterate over **two** lists at the same time.\n\n![](images/map2.png){width=80%)}\n\n\n## The `map2()` Family\n\nThese functions include:\n\n+ `map2()`\n+ `map2_chr()`\n+ `map2_lgl()`\n+ `map2_int()`\n+ `map2_dbl()`\n\nEach function has **two** list arguments, denoted `.x` and `.y`, and a function argument.\n\n\n## Small `map2()` Example\n\nFind the minimum.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 2, 4)\nb <- c(6, 5, 3)\n\nmap2_chr(a, b,\n         ~ str_glue(\"The minimum of {.x} and {.y} is {min(.x, .y)}.\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The minimum of 1 and 6 is 1.\" \"The minimum of 2 and 5 is 2.\"\n[3] \"The minimum of 4 and 3 is 3.\"\n```\n\n\n:::\n:::\n\n\n\n## Big `map2()` Example\n\n\n::: panel-tabset\n\n### The Problem\n\n+ Regress vehicle MPG on vehicle weight.\n+ Do the regression *separately* for 4-, 6-, and 8-cylinder vehicles.\n\n### Split Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(by_cyl <- mtcars |>\n   split(mtcars$cyl))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`4`\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n$`6`\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nValiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n\n$`8`\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n```\n\n\n:::\n:::\n\n\n### Fit Model\n\nFit a linear regression model to each subset of the data.\n\n+ Regress vehicle MPG on vehicle weight.\n+ We are fitting **three** separate models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmods <- by_cyl |>\n  map(~ lm(mpg ~ wt, data = .x))\n```\n:::\n\n\n### Predict\n\nPredict vehicle MPG from observed vehicle weight.\n\n+ The `predict()` function needs **two** inputs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap2(mods, by_cyl, predict)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`4`\n    Datsun 710      Merc 240D       Merc 230       Fiat 128    Honda Civic \n      26.47010       21.55719       21.78307       27.14774       30.45125 \nToyota Corolla  Toyota Corona      Fiat X1-9  Porsche 914-2   Lotus Europa \n      29.20890       25.65128       28.64420       27.48656       31.02725 \n    Volvo 142E \n      23.87247 \n\n$`6`\n     Mazda RX4  Mazda RX4 Wag Hornet 4 Drive        Valiant       Merc 280 \n      21.12497       20.41604       19.47080       18.78968       18.84528 \n     Merc 280C   Ferrari Dino \n      18.84528       20.70795 \n\n$`8`\n  Hornet Sportabout          Duster 360          Merc 450SE          Merc 450SL \n           16.32604            16.04103            14.94481            15.69024 \n        Merc 450SLC  Cadillac Fleetwood Lincoln Continental   Chrysler Imperial \n           15.58061            12.35773            11.97625            12.14945 \n   Dodge Challenger         AMC Javelin          Camaro Z28    Pontiac Firebird \n           16.15065            16.33700            15.44907            15.43811 \n     Ford Pantera L       Maserati Bora \n           16.91800            16.04103 \n```\n\n\n:::\n:::\n\n:::\n\n\n## `nest()` and `unnest()`\n\n+ We can pair functions from the `map()` family very nicely with two `tidyr` functions: `nest()` and `unnest()`.\n+ These allow us to easily map functions onto subsets of the data.\n\n\n## `nest()`\n\n**Nest** subsets of the data (as tibbles) inside a tibble.\n\n+ Specify the column(s) to create subsets on.\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  nest(cyl_data = -cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    cyl cyl_data          \n  <dbl> <list>            \n1     6 <tibble [7 × 10]> \n2     4 <tibble [11 × 10]>\n3     8 <tibble [14 × 10]>\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  nest(cg_data = -c(cyl,gear))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n    cyl  gear cg_data          \n  <dbl> <dbl> <list>           \n1     6     4 <tibble [4 × 9]> \n2     4     4 <tibble [8 × 9]> \n3     6     3 <tibble [2 × 9]> \n4     8     3 <tibble [12 × 9]>\n5     4     3 <tibble [1 × 9]> \n6     4     5 <tibble [2 × 9]> \n7     8     5 <tibble [2 × 9]> \n8     6     5 <tibble [1 × 9]> \n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n## `unnest()`\n\n**Un-nest** the data by row binding the subsets back together.\n\n+ Specify the column(s) that contains the subsets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  nest(cyl_data = -cyl) |> \n  unnest(cyl_data) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n    cyl   mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     6  21    160    110  3.9   2.62  16.5     0     1     4     4\n2     6  21    160    110  3.9   2.88  17.0     0     1     4     4\n3     6  21.4  258    110  3.08  3.22  19.4     1     0     3     1\n4     6  18.1  225    105  2.76  3.46  20.2     1     0     3     1\n5     6  19.2  168.   123  3.92  3.44  18.3     1     0     4     4\n6     6  17.8  168.   123  3.92  3.44  18.9     1     0     4     4\n```\n\n\n:::\n:::\n\n\n\n## Big `map2()` Example (Again)\n\n::: panel-tabset\n\n### `nest()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  nest(cyl_data = -cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    cyl cyl_data          \n  <dbl> <list>            \n1     6 <tibble [7 × 10]> \n2     4 <tibble [11 × 10]>\n3     8 <tibble [14 × 10]>\n```\n\n\n:::\n:::\n\n\n### `lm()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  nest(cyl_data = -cyl) |>\n  mutate(mod = map(cyl_data, \n                   ~ lm(mpg ~ wt, data = .x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    cyl cyl_data           mod   \n  <dbl> <list>             <list>\n1     6 <tibble [7 × 10]>  <lm>  \n2     4 <tibble [11 × 10]> <lm>  \n3     8 <tibble [14 × 10]> <lm>  \n```\n\n\n:::\n:::\n\n\n### `predict()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  nest(cyl_data = -cyl) |>\n  mutate(mod = map(cyl_data, \n                   ~ lm(mpg ~ wt, data = .x)),\n         pred_mpg = map2(.x = mod,\n                         .y = cyl_data, \n                         .f = ~ predict(object = .x, data = .y)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n    cyl cyl_data           mod    pred_mpg  \n  <dbl> <list>             <list> <list>    \n1     6 <tibble [7 × 10]>  <lm>   <dbl [7]> \n2     4 <tibble [11 × 10]> <lm>   <dbl [11]>\n3     8 <tibble [14 × 10]> <lm>   <dbl [14]>\n```\n\n\n:::\n:::\n\n\n### `unnest()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  nest(cyl_data = -cyl) |>\n  mutate(mod = map(cyl_data, \n                   ~ lm(mpg ~ wt, data = .x)),\n         pred_mpg = map2(.x = mod,\n                         .y = cyl_data,\n                         .f = ~ predict(object = .x, data = .y))) |> \n  select(-mod) |> \n  unnest(cols = c(cyl_data, pred_mpg)) |> \n  select(cyl, wt, mpg, pred_mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 4\n     cyl    wt   mpg pred_mpg\n   <dbl> <dbl> <dbl>    <dbl>\n 1     6  2.62  21       21.1\n 2     6  2.88  21       20.4\n 3     6  3.22  21.4     19.5\n 4     6  3.46  18.1     18.8\n 5     6  3.44  19.2     18.8\n 6     6  3.44  17.8     18.8\n 7     6  2.77  19.7     20.7\n 8     4  2.32  22.8     26.5\n 9     4  3.19  24.4     21.6\n10     4  3.15  22.8     21.8\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## [Lab 8: The Twelve Days of Christmas](https://zoerehnberg.github.io/STAT331-S23/lab_assignments/lab8/LA8_fprogram.html)\n\n1. Write a `sing_day()` function.\n  \n::: callout-tip\n\n+ Start with a small example and test it on a single day **outside of the function**.\n+ `str_flatten()` might be useful -- find its arguments in the documentation.\n\n:::\n\n2. Iterate your `sing_day()` function over all days.\n3. Style your output!\n\n\n## To do...\n  \n+ **Lab 8: The Twelve Days of Christmas**\n  + Due Saturday, 5/25 at 11:59pm.\n  \n+ **Project Proposal + Data**\n  + Due Tuesday, 5/28 at 11:59pm.\n  \n+ Read **Chapter 9: Regression & Simulation**\n  + Check-in 9.1 & 9.2 due Tuesday, 5/28 at 10:00am.\n  \n  ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}