{
  "hash": "1d3be1f303e2b0210b04a6d4f9b4aa58",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 1, Part 3: Version Control with Git and GitHub\"\nexecute:\n  freeze: auto  # re-render only when source changes\n  warning: false\n  message: false\nbibliography: references.bib\nnumber-sections: true\nnumber-depth: 2\neditor: source\n---\n\n\n\n\n### üìñ Reading: 60-75 minutes\n\n### üìΩÔ∏è  Videos: 0 minute(s)\n\n### ‚úÖ Check-ins: 4\n\n\n## Objectives\n\nMost of this section is either heavily inspired by Happy Git and Github for the\nUseR [@bryanHappyGitGitHub2021] or directly links to that book. \n\n+ Recognize the benefits of using version control to improve your coding\npractices and workflow.\n+ Identify git / GitHub as a version control platform (and helper).\n+ Install git onto your computer and register for a GitHub account\n+ Start applying version control practices to your workflow.\n\n# What is Version Control?\n\nVersion control is a system that (1) allows you to store your files in the\ncloud, (2) track change in those files over time, and (3) share your files with\nothers.\n\n### üìñ Required Reading: [Big Picture](https://happygitwithr.com/big-picture)\n\n# Git\n\n::: columns\n::: {.column width=\"40%\"}\nGit is a **version control system** - a structured way for tracking changes to\nfiles over the course of a project that may also make it easy to have multiple\npeople working on the same files at the same time. Git manages a collection of\nfiles in a structured way---like \"track changes\" in Microsoft Word or version\nhistory in Google Docs, but much more powerful.\n\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"55%\"}\n![](https://www.phdcomics.com/comics/archive/phd101212s.gif){width=\"50%\" fig-alt=\"\"}\n\n:::\n:::\n\nIf you are working alone, you will benefit from adopting version control because\nit removes the need to add `_final.qmd` or `_final_finalforreal.qmd` to the end\nof your file names. However, most of us work in collaboration with other people\n(or will have to work with others eventually), so one of the goals of this\nprogram is to teach you how to use git because it is a useful tool that will\nmake you a better collaborator. \n\nIn data science programming, we use git for a similar, but slightly different\npurpose. We use it to keep track of changes not only to code files, but to data\nfiles, figures, reports, and other essential bits of information. \n\n### Git Basics\n\n::: columns\n::: {.column width=\"50%\"}\nGit tracks changes to each file that it is told to monitor, and as the files\nchange, you provide short labels describing what the changes were and why they\nexist (called \"**commits**\"). The log of these changes (along with the file\nhistory) is called your **commit history**. \n\nWhen writing papers, this means you can cut material out freely, so long as the\npaper is being tracked by git---you can always go back and get that paragraph\nyou cut out if you need to. You also don't have to rename files---you can\nconfidently save over your old files, so long as you remember to commit\nfrequently. \n\n### üìñ Required Reading: [Install Git](https://happygitwithr.com/install-git)\n\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"45%\"}\n![](images/week-1/git.png){fig-alt=\"Person 1: 'This is GIT. It tracks collaborative work on projects through a beautiful distributed graph theory tree model'. Person 2: 'Cool, How do we use it?' Person 1: 'No Idea. Just memorize these shell commands and type them to sync up. If you get errors, save your work elsewhere, delete the project, and download a fresh copy.'\"}\n:::\n:::\n\n\n### ‚úÖ Check-in: Install Git\n\nWe will be working with Git/GitHub every week for the next 10 weeks, starting \nthis week! To be prepared for class, follow the instructions in the above\nreading to install Git onto your computer. \n\n<!-- Change to a screenshot they need to submit -->\nOnce you have installed Git, tell me \"yes\" in the Canvas Quiz.\n\n# GitHub\n\nGit by itself is nice enough, but where git really becomes amazing is when you\ncombine it with GitHub---an online service that makes it easy to use git across\nmany computers, share information with collaborators, publish to the web, and\nmore. Git is great, but GitHub is ... essential.\n\nSimilar to the differences between R and RStudio, git is a program that runs on\nyour machine which includes a language for monitoring changes to specific \nfiles (similar to a programming language like R). GitHub is a website that hosts\npeople's git repositories (similar to a IDE like RStudio). You can use git\nwithout GitHub (like using R without RStudio), but you can't use GitHub without\ngit. \n\nIf you want, you can hook git up to GitHub, and make a copy of your local git\nrepository that lives in the cloud. Then, if you configure things correctly,\nyour local repository will talk to GitHub without too much trouble. Using\nGithub with git allows you to **easily make a cloud backup of your important\ncode**, so that even if your computer suddenly catches on fire, all your\nimportant code files exist somewhere else. Any data you don't have in three\ndifferent places is data you don't care about.^[Yes, I'm aware that this sounds\nparanoid. It's been a very rare occasion that I've needed to restore something\nfrom another backup. You don't want to take chances.]\n\n### üìñ Required Reading: [Register for a GitHub Account](https://happygitwithr.com/github-acct)\n\n### ‚úÖ Check-in: Show me your GitHub Account\n\nFollow the instructions in [Registering a GitHub Account](https://happygitwithr.com/github-acct.html) to create a **free**\nGitHub account.\n\nCopy and paste the link to your GitHub profile into the Canvas quiz. \n\n+ Your GitHub profile link should look like -- https://github.com/USERNAME\n+ Here is mine! [https://github.com/atheobold](https://github.com/atheobold)\n\n::: {.callout-tip}\n# (Optional) Register for the Student Developer Pack \n\nI would highly recommend checking out \n[GitHub Education](https://education.github.com/) and signing up for the\n[GitHub Student Developer Pack](https://education.github.com/pack). Signing \nup gets you unlimited private repositories among other perks. \n:::\n\n::: {.callout-caution}\n### Save your login information!\n\nMake sure you remember your username and password so you don't have to try to\nhack into your own account during class this week.\n\nWrite your information down somewhere safe.\n:::\n\n# Introducing Yourself to Git\n\nNow that you have git downloaded and have a GitHub account, it is time to \nintroduce yourself to git! \n\n### üìñ Required Reading: [Introduce Yourself to Git](https://happygitwithr.com/hello-git)\n\nRather than using the terminal on your computer (like they do in the chapter\nabove), let's get familiar with the **usethis** package in R. \n\n1. Open RStudio.\n2. Run the following code **in your console** (bottom left), substituting your \nname for `\"Jane Doe\"` and the email associated with your GitHub account with \n`\"jane@example.org\"`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\n\nlibrary(usethis)\n\n# Change this to use your name and your GitHub email address! \nuse_git_config(user.name = \"Jane Doe\", \n               user.email = \"jane@example.org\")\n```\n:::\n\n\n### ‚úÖ Check-in: Introduce Yourself to git\n\nFollow the instructions for introducing yourself to git by running the code \nin your console. Once you've run the code, take a screenshot of the output in \nyour console. \n\n# Connecting Git, GitHub, and RStudio\n\nIn order to interact with a remote Git server (e.g., GitHub), we need to include\nour credentials. The credentials proves to GitHub who we are and that we are\nallowed to do what we are trying to do. There are a few ways to setup your \ncredential, but we will specifically be using **P**ersonal **A**ccess **T**okens\nor PATs. \n\n::: {.callout-warning}\n# No support for username & password credentials \n\nLet it be known that the password that you use to login to GitHub‚Äôs website is\nNOT an acceptable credential when talking to GitHub as a Git server. \n:::\n\n### üìñ Required Reading: [Personal Access Tokens for HTTPS](https://happygitwithr.com/hello-git)\n\n::: {.callout-note}\n# Skip Section 9.2\n\nWe're not using SSH, so feel free to skip that section!\n:::\n\n### ‚úÖ Check-in: PAT\n\nFollow the instructions for setting up your own personal access token. When\nselecting an expiration either choose one of the options that will allow your\nPAT to last the entire quarter (90 days, No expiration, or use Custom and input\na date after the end of the quarter). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\ngitcreds::gitcreds_set()\n```\n:::\n\n\nOnce you've completed this process, run the following code **in your console** \nand take a screenshot of the output you get. I've included the output I get \nwhen I run this, so you have an idea of how your output should look. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_sitrep()\n```\n:::\n\n\n```\n‚îÄ‚îÄ Git global (user) \n‚Ä¢ Name: 'Allison Theobold'\n‚Ä¢ Email: 'atheobol@calpoly.edu'\n‚Ä¢ Global (user-level) gitignore file: '~/.gitignore'\n‚Ä¢ Vaccinated: FALSE\n‚Ñπ See `?git_vaccinate` to learn more\n‚Ä¢ Default Git protocol: 'https'\n‚Ä¢ Default initial branch name: 'main'\n\n‚îÄ‚îÄ GitHub user \n‚Ä¢ Default GitHub host: 'https://github.com'\n‚Ä¢ Personal access token for 'https://github.com': '<discovered>'\n‚Ä¢ GitHub user: 'atheobold'\n‚Ä¢ Token scopes: 'admin:org, admin:public_key, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:packages'\n‚Ä¢ Email(s): 'atheobol@calpoly.edu (primary)', 'theobold.allison970@gmail.com', '12439090+atheobold@users.noreply.github.com'\n‚Ñπ No active usethis project\n```\n\n# Getting Started with GitHub\n\nNow you are setup and ready to get started working with GitHub and RStudio for \nthis week's lab! \n\n# Learn More\n\n::: {.callout-note}\n### Extra Resources\n\n- [Git \"Hello World\" Tutorial on GitHub](https://guides.github.com/activities/hello-world/)\n\n- [Crash course on git](https://www.youtube.com/watch?v=SWYqp7iY_Tc) (30 minute YouTube video) [@traversymediaGitGitHubCrash2017]\n\n- [Git and GitHub for poets](https://www.youtube.com/watch?v=BCQHnlnPusY&list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV) YouTube playlist (this is supposed to be the best introduction to Git out there...) [@thecodingtrainIntroductionGitGitHub2016]\n\n- [More advanced git concepts, in comic form](https://dev.to/erikaheidi/stage-commit-push-a-git-story-comic-a37), by Erika Heidi [@ericaheidiStageCommitPush2020]\n\n- [A quick guide to the command line (Terminal)](https://towardsdatascience.com/a-quick-guide-to-using-command-line-terminal-96815b97b955) [@weiQuickGuideUsing2019]\n:::\n\n### References {-}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}