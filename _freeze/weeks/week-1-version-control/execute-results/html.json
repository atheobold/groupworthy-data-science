{
  "hash": "e5e4649946e219d96a10e79458d87519",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 1, Part 3: Version Control with Git and GitHub\"\nexecute:\n  freeze: auto  # re-render only when source changes\n  warning: false\n  message: false\nbibliography: references.bib\nnumber-sections: true\nnumber-depth: 2\neditor: source\n---\n\n\n\n\n### üìñ Reading: 60 minutes\n\n### üìΩÔ∏è  Videos: 0 minute(s)\n\n### ‚úÖ Check-ins: 2\n\n\n## Objectives\n\nMost of this section is either heavily inspired by Happy Git and Github for the\nUseR [@bryanHappyGitGitHub2021] or directly links to that book. \n\n+ Recognize the benefits of using version control to improve your coding\npractices and workflow.\n+ Identify git / GitHub as a version control platform (and helper).\n+ Install git onto your computer and register for a GitHub account\n+ Start applying version control practices to your workflow.\n\n# What is Version Control?\n\nVersion control is a system that (1) allows you to store your files in the\ncloud, (2) track change in those files over time, and (3) share your files with\nothers.\n\n### üìñ Required Reading: [Big Picture](https://happygitwithr.com/big-picture)\n\n# Git\n\n::: columns\n::: {.column width=\"40%\"}\nGit is a **version control system** - a structured way for tracking changes to\nfiles over the course of a project that may also make it easy to have multiple\npeople working on the same files at the same time. Git manages a collection of\nfiles in a structured way---like \"track changes\" in Microsoft Word or version\nhistory in Google Docs, but much more powerful.\n\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"55%\"}\n![](https://www.phdcomics.com/comics/archive/phd101212s.gif){width=\"50%\" fig-alt=\"\"}\n\n:::\n:::\n\nIf you are working alone, you will benefit from adopting version control because\nit removes the need to add `_final.qmd` or `_final_finalforreal.qmd` to the end\nof your file names. However, most of us work in collaboration with other people\n(or will have to work with others eventually), so one of the goals of this\nprogram is to teach you how to use git because it is a useful tool that will\nmake you a better collaborator. \n\nIn data science programming, we use git for a similar, but slightly different\npurpose. We use it to keep track of changes not only to code files, but to data\nfiles, figures, reports, and other essential bits of information. \n\n### Git Basics\n\n::: columns\n::: {.column width=\"50%\"}\nGit tracks changes to each file that it is told to monitor, and as the files\nchange, you provide short labels describing what the changes were and why they\nexist (called \"**commits**\"). The log of these changes (along with the file\nhistory) is called your **commit history**. \n\nWhen writing papers, this means you can cut material out freely, so long as the\npaper is being tracked by git---you can always go back and get that paragraph\nyou cut out if you need to. You also don't have to rename files---you can\nconfidently save over your old files, so long as you remember to commit\nfrequently. \n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"45%\"}\n![](images/week-1/git.png){fig-alt=\"Person 1: 'This is GIT. It tracks collaborative work on projects through a beautiful distributed graph theory tree model'. Person 2: 'Cool, How do we use it?' Person 1: 'No Idea. Just memorize these shell commands and type them to sync up. If you get errors, save your work elsewhere, delete the project, and download a fresh copy.'\"}\n:::\n:::\n\n### üìñ Required Reading: [Install Git](https://happygitwithr.com/install-git)\n\n### ‚úÖ Check-in: Install Git\n\nWe will be working with Git/GitHub every week for the next 10 weeks, starting \nthis week! To be prepared for class, follow the instructions in the above\nreading to install Git onto your computer. \n\n<!-- Change to a screenshot they need to submit -->\nOnce you have installed Git, tell me \"yes\" in the Canvas Quiz.\n\n# GitHub\n\nGit itself is nice enough, but where git really becomes amazing is when you combine it with GitHub - an online service that makes it easy to use git across many computers, share information with collaborators, publish to the web, and more. Git is great, but GitHub is ... essential.\n\nGit is a program that runs on your machine and keeps track of changes to files that you tell it to monitor. GitHub is a website that hosts people's git repositories. You can use git without GitHub, but you can't use GitHub without git. \n\nIf you want, you can hook Git up to GitHub, and make a copy of your local git repository that lives in the cloud. Then, if you configure things correctly, your local repository will talk to GitHub without too much trouble. Using Github with Git allows you to **easily make a cloud backup of your important code**, so that even if your  computer suddenly catches on fire, all of your important code files exist somewhere else. \n\nRemember: any data you don't have in 3 different places is data you don't care about.^[Yes, I'm aware that this sounds paranoid. It's been a very rare occasion that I've needed to restore something from another backup. You don't want to take chances.]\n\n### üìñ Required Reading: [Register for a GitHub Account](https://happygitwithr.com/github-acct)\n\n### ‚úÖ Check-in: Show me your GitHub Account\n\nFollow the instructions in [Registering a GitHub Account](https://happygitwithr.com/github-acct.html) to create a **free** GitHub account.\n\nCopy and paste the link to your GitHub profile into the Canvas assignment.\n\n+ Your GitHub profile link should look like -- https://github.com/USERNAME\n+ Here is mine! [https://github.com/atheobold](https://github.com/atheobold)\n\n(Optional) You may want to check out [GitHub Education](https://education.github.com/) and sign up for the [GitHub Student Developer Pack](https://education.github.com/pack).\n\n::: {.callout-caution}\n### Save your login information!\n\nMake sure you remember your username and password so you don't have to try to hack into your own account during class this week.\n\nWrite your information down somewhere safe.\n:::\n\n### üìñ Required Reading: [Introduce Yourself to Git](https://happygitwithr.com/hello-git)\n\n### ‚úÖ Check-in: \n\n\n# Using Version Control (with RStudio)\n\nThis course will briefly introduced working with GitHub, but will not provide you with extensive practice using version control. By using version control, you will learn better habits for programming, and you'll get access to a platform for collaboration, hosting your work online, keeping track of features and necessary changes, and more. \n\nIn class this week, we will connect git/GitHub to RStudio so you can use version control for your code. We will then see what a typical git/GitHub workflow looks like.\n\n::: {.callout-note}\n## Learn More {-}\n\n### Extra Resources {-}\n\n- [Happy Git and GitHub for the useR](https://happygitwithr.com/index.html) - Guide to using git, R, and RStudio together. [@bryanHappyGitGitHub2021]\n\n- [Git \"Hello World\" Tutorial on GitHub](https://guides.github.com/activities/hello-world/)\n\n- [Crash course on git](https://www.youtube.com/watch?v=SWYqp7iY_Tc) (30 minute YouTube video) [@traversymediaGitGitHubCrash2017]\n\n- [Git and GitHub for poets](https://www.youtube.com/watch?v=BCQHnlnPusY&list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV) YouTube playlist (this is supposed to be the best introduction to Git out there...) [@thecodingtrainIntroductionGitGitHub2016]\n\n- [More advanced git concepts, in comic form](https://dev.to/erikaheidi/stage-commit-push-a-git-story-comic-a37), by Erika Heidi [@ericaheidiStageCommitPush2020]\n\n- [A quick guide to the command line (Terminal)](https://towardsdatascience.com/a-quick-guide-to-using-command-line-terminal-96815b97b955) [@weiQuickGuideUsing2019]\n:::\n\n### References {-}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}