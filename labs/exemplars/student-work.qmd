---
title: "Gallary of Exemplary Student Work"
execute: 
  warning: false
  message: false
  echo: true
---

```{r}
#| label: set-up-packages
#| echo: false

library(tidyverse)
library(ggtext)
```

# Challenge 2

Here are some of the exemplary assignments from your peers!

```{r}
#| label: data-for-lab-2
#| echo: false

surveys <- read_csv(here::here("labs",
                               "student",
                               "data", 
                               "surveys.csv")
                        )

```

## Themes

This code is brought to us by Jonathan Flores! I really appreciated the extensive themes they included and how these themes make the plot clearer to the reader.

```{r}
#| label: challenge-3-themes

ggplot(data = surveys,
    mapping = aes(x = species, y = weight)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(color = "steel blue", alpha = 0.08) +
  labs(title = "Distribution of Weight by Species Boxplot",
       subtitle = "Vertical Orientation",
       x = "Species Name", y = "Weight (g)") + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45),
        axis.ticks.length.x = unit(8, "mm"),
        axis.ticks.x = element_line(color = "white"),
        panel.border = element_rect(color = "black", linewidth = 1),
        plot.title = element_text(face = "bold"),
        plot.subtitle = element_text(color = "steelblue"),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())
```

## Unique Colors

This code is brought to us by Fisher Fraley! I really appreciated how they found a unique color theme from a context they liked!

```{r}
# Color Palette: https://color.adobe.com/TRON-color-theme-6970180/
tron_colors <- c("#DF7212", "#6FC3DF", "#E6FFFF", "#FFE64D", "#0C141F")

ggplot(data = surveys, aes(x = weight, y = species, color = sex)) +
  geom_boxplot(outlier.shape = NA, width = 0.6) +
  geom_jitter(width = 0.15, height = 0, alpha = 0.3, size = 1) +
  scale_color_manual(values = tron_colors) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  labs(
    title = "Rodent Weight by Species",
    subtitle = "Y-Axis = Rodent Species",
    x = "Rodent Weight (g)",
    y = NULL,
    caption = "Source: Portal Project Database"
   )
```

## Removing the Legend (and More)

This code is brought to us by Lucy Thackray! I thought it was special that Lucy stacked all three challenged to make a clean, easy to read plot.

```{r}
colors <- c("#f07857", "#4fb06d" )

ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
  geom_jitter( alpha = 0.5) +
  geom_boxplot(outliers = FALSE, mapping = aes(color = sex)) +
  labs(x = "Weight (g)", y = "Species", color = "Sex",
       subtitle = "<span style = 'color:#f07857;'>Female</span> vs <span style = 'color:#4fb06d;'>Male</span> rodent species weights") +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
   theme(
    legend.position = "none", 
    plot.subtitle = element_markdown()) +
   theme(axis.ticks.y = element_blank()) +
scale_color_manual(values = colors)
```

# Lab 3

```{r}
#| label: data-for-lab-3
#| echo: false

library(knitr)

teacher_evals <- read_csv(here::here("labs", 
                                     "student",
                                     "data",
                                     "teacher_evals.csv")
                          )
```

## `across()` + `mutate()`

This code is brought to us by a student who wishes to remain anonymous! What I appreciated about this code was the use of `across()` when converting multiple columns to numeric. I also loved their use of the most current syntax for the
`across()` function!

```{r}
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id),
         question_no = as.character(question_no),
         across(
           .cols = c(no_participants, 
                     resp_share, 
                     SET_score_avg, 
                     percent_failed_cur, 
                     seniority),
           .fns = ~ as.numeric(.x)
           )
         )|>
  filter(no_participants > 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
```

## Confirming Unique Row Identification

This code is brought to us by Akshat Khandelwal! I thought it was very clever how Akshat played with different combinations of variables to confirm which combination uniquely identified a row.

```{r}
#| echo: true

teacher_question <- teacher_evals |>
  distinct(teacher_id, question_no)

print(nrow(teacher_question) == nrow(teacher_evals))  # False

teacher_question_course <- teacher_evals |>
  distinct(teacher_id, question_no, course_id)

print(nrow(teacher_question_course) == nrow(teacher_evals))  # True

course_question <- teacher_evals |>
  distinct(question_no, course_id) 

print(nrow(course_question) == nrow(teacher_evals)) # False
```

## Proportions in Demographic Table

This code is brought to us by Arturo Ordaz-Gutierrez! I really appreciated how Art added the proportions to this demographic table so it is easier to see the representation of each group. 

```{r}
#| echo: true

teacher_evals_clean |>
  distinct(teacher_id, .keep_all = TRUE) |>
  count(academic_degree, sex) |>
  mutate(percent = round(100 * n / sum(n), 1)) |>
  arrange(desc(percent))
```

## `across()` + `summarize()`

This code is brought to us by Rachel Survilas! I loved how Rachel noticed they were using the same `n_distinct()` function **across** multiple columns and 
decided to use `across()`! Also, the syntax they are using is on point!

```{r}
#| echo: true

teacher_evals_clean |> 
  summarize(
    across(
      .cols = c(teacher_id, course_id),
      .fns = ~ n_distinct(.x))
    )
```

## Slicing the Max & Min Together

This code is brought to us by a student who wishes to remain anonymous! I thought this code was great because they got both the maximum values and the minimum values in **one** pipeline. Very efficient!

```{r}
#| echo: true

teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarize(
    avg_rating = mean(percent_failed_cur, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(
    avg_rating == min(avg_rating)|
    avg_rating == max(avg_rating)
  ) |> 
  arrange(avg_rating)
```

## Using `kable()` for Nicer Looking Tables

This code is brought to us by a student who wishes to remain anonymous! I appreciated that they read the instructions to use the `kable()` function to get nicer looking tables. The code is very simple, but the tables look **much** nicer!

```{r}
#| echo: true

percent_failed <- teacher_evals_clean |> 
  group_by(teacher_id) |> 
  filter(seniority == 1) |> 
  summarize(avg_percent_failed = mean(percent_failed_cur))

percent_failed |> 
  slice_min(avg_percent_failed) |> 
  kable()
```

# Challenge 3

## Hypothesis Test Conclusion

These statements are brought to us by Abel Alcala and Sebastien Montgrain! I really appreciated the context they infused into their hypothesis test conclusion!

**Based on the results of the Chi-Squared test of Independence, we have a p-value of 0.006075 and a X\^2 value of 10.207. Since the p-value is less than Î± = 0.05, we reject the null hypotheses indicating a statistically significant association between seniority level and SET evaluation results. This suggests that instructor experience across junior, senior, and very senior appears to influence how students perceive the use of engaging activities in class.**

**Because the p-value of our Chi-squared test of independence is less than 0.05 (0.006075), we know that there is an association between a teachers seniority and their SET scores from question 3 on if the professor used activities to make the class more engaging. Combining this Chi-squared test with the graph, we can see that more experienced teachers do a better job of implementing engaging activities is their classes.**

<!-- # Lab 4 -->

```{r}
#| label: data-for-lab-4
#| echo: false

childcare_costs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')

counties <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')

ca_childcare <- counties |>
  filter(state_abbreviation == "CA") |>
  inner_join(childcare_costs,
             by = "county_fips_code") %>% 
    mutate(region = fct_collapse(county_name,
                               `Superior California` = c("Butte County", 
                                                         "Colusa County", 
                                                         "El Dorado County", 
                                                         "Glenn County", 
                                                         "Lassen County", 
                                                         "Modoc County", 
                                                         "Nevada County", 
                                                         "Placer County", 
                                                         "Plumas County", 
                                                         "Sacramento County", 
                                                         "Shasta County", 
                                                         "Sierra County", 
                                                         "Siskiyou County", 
                                                         "Sutter County", 
                                                         "Tehama County", 
                                                         "Yolo County", 
                                                         "Yuba County"),
                               `North Coast` = c("Del Norte County", 
                                                 "Humboldt County", 
                                                 "Lake County", 
                                                 "Mendocino County", 
                                                 "Napa County", 
                                                 "Sonoma County", 
                                                 "Trinity County"),
                               `San Francisco Bay Area` = c("Alameda County", 
                                                            "Contra Costa County",
                                                            "Marin County",
                                                            "San Francisco County",
                                                            "San Mateo County",
                                                            "Santa Clara County",
                                                            "Solano County"),
                               `Northern San Joaquin Valley` = c("Alpine County",
                                                                 "Amador County",
                                                                 "Calaveras County",
                                                                 "Madera County",
                                                                 "Mariposa County",
                                                                 "Merced County",
                                                                 "Mono County", 
                                                                 "San Joaquin County",
                                                                 "Stanislaus County",
                                                                 "Tuolumne County"),
                               `Central Coast` = c("Monterey County", 
                                                   "San Benito County", 
                                                   "San Luis Obispo County", 
                                                   "Santa Barbara County", 
                                                   "Santa Cruz County",
                                                   "Ventura County"),
                               `Southern San Joaquin Valley` = c("Fresno County",
                                                                 "Inyo County", 
                                                                 "Kern County",
                                                                 "Kings County",
                                                                 "Tulare County"),
                               `Inland Empire` = c("Riverside County",
                                                   "San Bernardino County"),
                               `Los Angeles County` = c("Los Angeles County"),
                               `Orange County` = c("Orange County"),
                               `San Diego - Imperial` = c("Imperial County",
                                                          "San Diego County")
                               )
         )

```

<!-- # Lab 7 -->

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: data-for-lab-7

fish <- read_csv(here::here("labs", 
                            "instructions", 
                            "data", 
                            "BlackfootFish.csv")
                 )
```
