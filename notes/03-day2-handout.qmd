---
title: "Week 3 Day 2: `dplyr` Extensions"
format: docx
execute: 
  eval: false
---

```{r}
#| label: setup
#| message: false
#| echo: false

library(tidyverse)
```

# Practice Activity Review

## `filter()`

Do you want to filter a set of values of a variable?

```{r}
colleges_clean |> 
  filter(STABBR %in% c("CO", "MT", "ID", "UT", "WY"))
```

1.  How would you negate the above filter? Meaning how would you **remove** colleges in CO, MT, ID, UT, and WY from the dataset?

## `select()`

Do you want to select a range of columns?

```{r}
colleges |> 
  select(ADM_RATE:UGDS)
```

Do you want to select columns that share a common word or symbol?

```{r}
cereal |> 
  select(name, starts_with("TUITION"))
```

Do you want to select columns that share a common data type?

```{r}
colleges_clean |> 
  select(INSTNM, where(is.numeric))
```

2.  What types of columns will this select?

# Peer Code Feedback

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

ggplot(data = surveys, mapping = aes(x=hindfoot_length,y= weight)) +  
  geom_jitter(alpha=.2,color='tomato')+ facet_wrap(~species)+geom_boxplot(outlier.shape = NA)+labs(
    title ='Weight to hindfoot comparison'
  )+ xlab('length (mm)')+ylab('Weight(g)')
```

1.  What feedback would you give for this code?

# Grade Expectations

| Learning Objective | A (Superior Attainment) | B (Good Attainment) | C (Acceptable Attainment) |
|----|----|----|----|
| Learning Targets |  |  |  |
| Revising Thinking |  |  |  |
| Extending Thinking |  |  |  |
| Collaboration |  |  |  |

# Using the Native Pipe (`|>`)

In RStudio: `Tools` \> `Global Options...` \> `Code` \> check `Use native pipe operator` box

Keyboard shortcut: `ctrl/cmd` + `shift` + `m`

# New Functions!

## `rename()`

> Change (bad) column names!

3.  In the `rename()` function, what goes on the right hand side of the `=` sign? What goes on the left hand side?

```{r}
cereal |> 
  select(name,
         temp = type,
         cons_rating = rating)
```

**Bonus:** If you want to rename variables **and then** only select some variables, use `select()`!

# `count()`

> Obtain frequency tables of the number of observations in each level of a categorical variable

4.  You could have obtained frequencies of observations by using `group_by()` + `summarize()`. Why is `count()` a better choice?

## `group_by()` + `slice_max()`

5.  What happens when you use `group_by()` before `slice_max()`? What output will you get?

## `group_by()` + `summarize()`

6.  What groups are dropped after `summarize()` calculates the statistics?

7.  What groups **are not** dropped after `summarize()` calculates the statistics?

8.  How can you make sure all the groups have been dropped after `summarize()` calculates the statistics?

## `if_else()` & `case_when()`

`if_else()` is designed for **binary** options:

```{r}
colleges_clean |> 
  filter(CONTROL != 3) |> 
  mutate(CONTROL = if_else(CONTROL == 1, 
                           "Public", 
                           "Private, Non-Profit")
         )
```

`case_when()` is designed for **three or more** options:

```{r}
colleges_clean |> 
  mutate(TYPE = case_when(CONTROL == 1 ~ "Public", 
                          CONTROL == 2 ~ "Private, Non-Profit", 
                          CONTROL == 3 ~ "Private, For Profit")
         )
```

## `across()`

> Performing the same function `across()` multiple columns

```{r}
colleges_clean |> 
  group_by(REGION) |> 
  summarize(
    across(
      .cols = c(ADM_RATE, SAT_AVG, TUITIONFEE_IN, TUITIONFEE_OUT, UGDS), 
      .fns = ~ mean(.x)
      )
    )
```

9.  How do columns need to be input into the `across()` function?

10. How do functions need to be input into the `across()` function?

11. What does the `.x` inside the function represent?

# `across()` friends

## `if_any()` & `if_all()`

Remember, you got warnings in PA3 when converting some columns to numeric? If you look at the original data, you can see this is because missing values were indicated with the string `"NULL"`.

We could drop these rows before converting the columns to numeric if desired, using `if_any()`:

```{r}
#| echo: true

colleges_clean <- colleges_clean |> 
  filter(
    !if_any(.cols = ADM_RATE:TUITIONFEE_OUT, 
            .fns = ~ .x == "NULL")
    ) 
```

12. How would you describe what `~ .x == "NULL"` is doing?

13. What does the `!` in front of the `if_any()` do?

## Saving Objects

Sometimes you just want to show a table and there is no need to save an object:

```{r}
colleges_clean |> 
  group_by(REGION) |> 
  slice_max(order_by = UGDS)
```

Other times, you will want to save your wrangled data for later:

```{r}
colleges_clean <- colleges |> 
  rename(TYPE = CONTROL) |> 
  filter(TYPE != 3) |> 
  mutate(REGION = case_when(REGION == 0 ~ "Military", 
                            REGION == 1 ~ "New England", 
                            REGION == 2 ~ "Mid Atlantic",
                            REGION == 3 ~ "Great Lakes", 
                            REGION == 4 ~ "Plains", 
                            REGION == 5 ~ "South", 
                            REGION == 6 ~ "Southwest", 
                            REGION == 7 ~ "West", 
                            REGION == 8 ~ "Pacific"), 
         TYPE = if_else(TYPE == 1, 
                        "Public",
                        "Private"
                        )
         ) |> 
  drop_na(TYPE, REGION)
```

## `kable()`

```{r}
library(knitr)
```

```{r}
colleges_clean |> 
  group_by(REGION) |> 
  slice_max(order_by = TUITION_DIFF, n = 5) |> 
  kable()
```
