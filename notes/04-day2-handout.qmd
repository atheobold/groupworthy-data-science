---
title: "Week 4 Day 2: Lab Warm-up"
format: docx
execute: 
  eval: false
---

```{r}
#| include: false
#| message: false
#| label: setup

library(tidyverse)
library(liver)
library(readxl)
library(ggridges)
```

## Lab 3 Debrief 

1. Why do you need to use a `.x` inside ` ~ mean()` for the `across()` function?

2. What does it mean for a function to be "superseded"?

3. What does it mean for a function to be "deprecated"?

4. How would you know if the function you are using is superseded or deprecated?

5. What should you do if the function you are using is superseded or deprecated?


## Relational Data

> Do counties with higher property taxes also have higher childcare costs? Has this relationship changed over time?

![](images/childcare-relations.jpg){fig-alt="A figure showing the relations between three different datasets: childcare_costs, counties, and ca_tax_revenue. The childcare_costs dataset has an arrow connecting the variable 'county_fips_code' to the 'county_fips' in the counties dataset. The counties dataset has an arrow connecting the 'county name' variable to the 'entity name' variable in the ca_tax_revenue dataset. Each of the arrows represents the keys (variables) that link each dataset." width=50%}

### `inner_join()`

> Keeps observations when their keys are present in **both** datasets.

```{r}
#| label: counties-inner-2
#| eval: false
#| echo: true

inner_join(x = counties, 
           y = ca_tax_rev, 
           by = join_by(county_name == entity_name)
           )
```

6. Why am I using `join_by()` to join these two datasets?


7. What counties will remain in the joined dataset?


### `left_join()`

> Keeps only (and all) observations present in the left data set

```{r}
#| eval: false
#| echo: true

left_join(x = counties, 
          y = ca_tax_rev, 
          by = join_by(county_name == entity_name)
          )
```
 

8. What counties will remain in the joined dataset?

### `right_join()`

> Keeps only (and all) observations present in the right data set 

```{r}
#| eval: false
#| echo: true

right_join(x = counties, 
          y = ca_tax_rev, 
          by = join_by(county_name == entity_name)
          )
          
```

9. What counties will remain in the joined dataset?

### `NAs` in Joins

10. What might be the cause of `NA` values when joining two datasets together?

## Filtering Joins

> Filter *observations* based on values in new dataframe.

### `anti_join()`

> Removes observations when their keys are present in both datasets, and only keeps variables from the first dataset

```{r}
military |> 
  anti_join(cont_region, 
            by = join_by(Country == Region))
```

11. How is this approach different from what we did in the Practice Activity?

## Factor Variables

12. What are the two general purposes for factor variables (in R)?

13. What function have you used previously to create a factor variable? What function inside the **forcats** package does this?

14. Can you specify the order you want the levels (of a factor) to be in?

### `fct_reorder()`

```{r}
#| echo: true
#| eval: false

ca_tax_rev <- ca_tax_rev |> 
  mutate(entity_name = fct_reorder(.f = entity_name,
                                   .x = sales_and_use_taxes,
                                   .fun = mean)
         )
```

15. What does this code do?

16. In what setting would you want to use code like this?

### `fct_reorder2()`

17. What does this function do? 

18. When would you want to use it?

### `fct_collapse()`

19. What does this function do? 

20. When would you want to use it?


## Code Formatting

Don't forget, writing "tidy" and "well documented" code are two of the learning targets for this course. As such, I would strongly encourage you to use every opportunity to practice these skills.

As you are writing code for this assignment, make sure your code follows the [tidyverse style guide for dplyr code](https://style.tidyverse.org/pipes.html). Specifically, your code should:

-   use whitespace liberally
    -   before & after every `=` sign
    -   after every `,`
    -   before every `|>`
-   use new lines liberally
    -   after every `|>`
    -   after `,` when needed (if code is more than 80 characters in length)
