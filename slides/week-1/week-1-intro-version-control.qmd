---
title: "Scripts, Notebooks & Version Control"
format: 
  revealjs:
    theme: [../style.scss]
    auto-stretch: false
editor: source
embed-resources: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(liver)
data(cereal)
```

## Thursday, September 26

Today we will...

::: {.small}
-   Answer Clarifying Questions:
    -   Syllabus?
    -   Questions from the reading?
    -   PA 1: Find the Mistakes?
-   New Material
    -   Scripts + Notebooks
    -   Version Control
-   Lab 1: Introduction to Quarto
-   Challenge 1: Modifying your Quarto Document
:::

# Questions about the syllabus

# Questions from the reading

# Questions from PA 1

# Scripts + Notebooks

## Scripts

-   **Scripts** (`File > New File > R Script`) are files of code that are meant to be run on their own.

. . .

-   Scripts can be run in RStudio by clicking the `Run` button at the top of the editor window when the script is open.

-   You can also run code interactively in a script by:

    -   highlighting lines of code and hitting run.

    -   placing your cursor on a line of code and hitting run.

    -   placing your cursor on a line of code and hitting `ctrl + enter` or `command + enter`.

## Notebooks

Notebooks are an implementation of **literate programming**.

-   They allow you to integrate code, output, text, images, etc. into a single document.

-   E.g.,

    -   **Quarto notebook**
    -   R Markdown notebook
    -   Jupyter notebook

We love notebooks because they help us produce a reproducible analysis! 

## What is Markdown?

**Markdown** is a *markup language*.

It uses special symbols and formatting to make pretty documents.

. . .

-   \*italics\* -- makes italics
-   \*\*bold\*\* -- makes bold text
-   \# -- makes headers
-   \![ ]( ) -- includes images or HTML links
-   < > -- embeds URLs

. . .

Markdown files have the **.md** extension.

## What is Quarto?

Quarto **unifies** and **extends** the R Markdown ecosystem.

```{r}
#| echo: false
#| out-width: "50%"
#| fig-align: center
knitr::include_graphics("images/rmd_ecosystem.png")
```

Quarto files have the **.qmd** extension.

## Highlights of Quarto

-   Consistent implementation of attractive and handy features across outputs:

    -   E.g., tabsets, code-folding, syntax highlighting, etc.

-   More accessible defaults and better support for accessibility.

-   Guardrails that are helpful when learning:

    -   E.g., YAML completion, informative syntax errors, etc.

-   Support for other languages like Python, Julia, Observable, and more.

## Quarto Formats

Quarto makes moving between outputs straightforward.

-   All that needs to change between these formats is a few lines in the front matter (YAML)!

::: columns
::: {.column width="50%"}
**Document**

``` yaml
title: "Lesson 1"
format: html
```

**Presentation**

``` yaml
title: "Lesson 1"
format: revealjs
```
:::

::: {.column width="50%"}
**Website**

``` yaml
project:
  type: website

website: 
  navbar: 
    left:
      - lesson-1.qmd
```
:::
:::

## Quarto Components

![](images/quarto_sections.jpeg){width="80%"}

## R Code Options in Quarto

**R code chunk** options are included at the top of each code chunk, prefaced with a `#|` (hashpipe).

-   These options control how the following code is run and reported in the final Quarto document.
-   Some R code options can also be included in the front matter (YAML) which would be applied globally to the entire document.

## R Code Options in Quarto

<center>![](images/code_options.png)</center>

## YAML Completion in Quarto

<center>![](images/quarto_code_options.png)</center>

## Rendering your Quarto Document

To take your *.qmd* file and make it look pretty, you have to **render** it.

<center>

![](images/render.png)

![](images/render_on_save.png)

</center>

## Rendering your Quarto Document

Quarto CLI (command line interface) orchestrates each step of rendering:

1.  Process the executable code chunks with either `knitr` or `jupyter`.
2.  Convert the resulting Markdown file to the desired output.

![](images/horst_qmd_render_schema.png){fig-alt="A diagram of the proecess of rendering a Quarto document. First the qmd is passed to knitr or jupyter, then it is passed to markdown, finally it's passed to pandoc, resulting in a PDF, Word, or HTML output file." width="50%" fig-align="center"}


## Rendering your Quarto Document

When you click **Render**:

::: {.incremental}
1.    Your file is saved.
2.    The R code written in your *.qmd* file gets run **in order**.

  -   It starts from scratch, even if you previously ran some of the code in RStudio.
3.    A new file is created.

  -   If your Quarto file is called "Lab1.qmd", then a file called "Lab1.html" will be created.
  -   This will be saved in the same folder as "Lab1.qmd".
:::

# Version Control

# Version Control

> A process of **tracking changes** to a file or set of files over time so that
you can **recall specific versions later**.


## Git vs GitHub

:::: columns
::: column

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png") 
```

+ A system for version control that manages a collection of files in a structured way.
+ Uses the command line or a GUI.
+ Git is local.

:::
::: column


:::
::::


## Git vs GitHub

:::: columns
::: column

![](https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png){fig-align="center" width="50%" fig-alt="git's logo, a red diamond, with two 'branches', one large branch and one smaller branch stemming from the main branch."}

+ A system for version control that manages a collection of files in a structured way.
+ Uses the command line or a GUI.
+ Git is local.

:::
::: column

![](https://pngimg.com/d/github_PNG65.png){fig-align="center" width="60%" fig-alt="GitHub's logo, a black circle, with the outline of a cat in white. The cat seems to have a snake-like tail."}

+ A cloud-based service that lets you use git across many computers.
+ Basic services are free, advanced services are paid (like RStudio!). 
+ GitHub is remote.

:::
::::


## Why Learn GitHub?

1. GitHub provides a structured way for tracking changes to files over the course of a project.
  + *Think Google Docs or Dropbox history, but more structured and powerful!*

2. GitHub makes it easy to have multiple people working on the same files at the same time.

3. You can host a URL of fun things (like the class text, these slides, a personal website, etc.) with [GitHub pages](https://pages.github.com/).


## Git Repositories

Git is based on **repositories**.

:::: {.columns}
::: {.column width="80%"}

+ Think of a repository (**repo**) as a directory (folder) for a single project.
  + This directory will likely contain code, documentation, data, to do lists, etc. associated with the project.
  + You can link a local repo with a remote copy.

:::
::: {.column width="20%"}

![](https://miro.medium.com/max/512/1*w07Er4gPg8H2Ew-P0HhxNA.png){fig-align="center" fig-alt="A red file folder, with the git logo on it (one large branch with one smaller branch stemming off of it)."}



:::
::::

<!-- ## `.gitignore` -->

<!-- Sometimes there are files that you **do not** want to track. -->

<!-- + A `.gitignore` file specifies the files that git should intentionally ignore. -->
<!-- + Often these are machine generated files (e.g., `/bin`, `.DS_Store`) or files/directories that you do not want to be shared (e.g., `solutions/`). -->
<!-- + **We want to ignore `.Rproj` files!** -->


# Actions in Git

## Cloning a Repo

:::: columns
::: column

<bR>

Create an exact copy of a remote repo on your local machine.

:::
::: column
![](images/git_clone_diagram.png){fig-align="center" fig-alt="A diagram of the process of cloning a repository. At the top of the picture, there is a cloud (representing the internet), with a pink box labeled 'remote' symbolizing the remote GitHub repository. There is a down arrow connecting the cloud to a laptop, mimicking the process of cloning a remote repository onto a local computer. The laptop has a greeen box labeled 'local' symbolizing the local copy of the remote GitHub repository." width="50%"}
:::
::::


## Committing Changes

Tell git you have made changes you want to add to the repo.

+ Also provide a *commit message* -- a short label describing what the changes are and why they exist.

:::: {.columns}
::: {.column width="60%"}

The red line is a change we commit (add) to the repo.

:::
::: {.column width="40%"}

![](images/git-commit.png){fig-align="center" fig-alt="A diagram of the process of committing changes that were made to a document. On the left is a document with four lines of text. The third line is colored red, to symbolize where a change was made, while the other lines are colored black. There is a right arrow connecting the document to a laptop, with the phrase 'git commit' printed above the arrow. The arrow terminates at a green box labeled 'local' on the laptop, symbolizing committing changes made to the document to the local repository."}

:::
::::

. . .

The log of these changes is called your *commit history*.

+ You can always go back to old copies!



## Commit Tips

+ Use short, but informative commit messages.
+ Commit small blocks of changes -- commit every time you accomplish a small task (e.g., one problem in the lab). 
  + You’ll have a set of bite-sized changes (with description) to serve as a record of what you’ve done.
  + With frequent commits, its easier to find the issue if / when you mess up!


## Pushing Changes

:::: columns
::: column

<br>

Update the copy of your repo on GitHub so it has the most recent changes you’ve made on your machine.

:::
::: column

![](images/git_push_diagram.png){fig-align="center" width="75%" fig-alt="A diagram of the process of pushing local changes to the remote repository. There is a laptop with a green box labeled 'local' symbolizing the local copy of the GitHub repository. Above the laptop is cloud with a pink box labeled 'remote' symbolizing the remote GitHub repository (that lives on the internet). There is an arrow pointing from the laptop to the cloud with the phrase 'git push' next to the arrow, symbolizing the action of pushing the local changes (that have been committed) up to the remote repository."}
:::
::::


## Pulling Changes

:::: columns
::: column

<br>

Update the local copy of your repo (the copy on your computer) with the version on GitHub.

:::
::: column

![](images/git_pull_diagram.png){fig-align="center" fig-alt="A diagram of the process of pulling from the remote repository to update the local repository. There is a laptop with a green box labeled 'local' symbolizing the local copy of the GitHub repository. Above the laptop is cloud with a pink box labeled 'remote' symbolizing the remote GitHub repository (that lives on the internet). There is an arrow pointing from the cloud to the laptop with the phrase 'git pull' next to the arrow, symbolizing the action of pull the changes that exist on the remote repository (possibly from a different computer) to update the local repository." width="75%"}
:::
::::


## Workflow

**When you have an existing local repo:**

::: incremental
1. Pull the repo to make sure you have the most up to date version (especially if you are working on different computers).
2. Make some changes locally.
3. Commit the changes to git.
4. Push your changes to GitHub.
:::

# Connect GitHub to RStudio

## Verifying Your Connection

You were asked to 
## Install + Load `R` Packages

Work in your console or an Rscript for this.

1. Install and load the `usethis` package.

```{r}
#| eval: false
#| echo: true
install.packages("usethis")
library(usethis)
```

2. Install and load the `gitcreds` Package.

```{r}
#| eval: false
#| echo: true
install.packages("gitcreds")
library(gitcreds)
```


## Configure git

3. Tell git your email and GitHub username.

```{r}
#| eval: false
#| echo: true
usethis::use_git_config(user.name = "JaneDoe2", user.email = "jane@example.org")
```

(Nothing should happen.)


## Generate your Personal Access Token

4. Generate a PAT.

```{r}
#| eval: false
#| echo: true
create_github_token()
```

## Verify your PAT

7. Let's verify.

```{r}
#| echo: true
#| eval: false
git_sitrep()
```

# Accessing Lab 1 

# Accessing Lab 1 

Step 1: Fork the [Lab 1 repository](https://github.com/atheobold/stat-331-lab-1)

add screenshot of forking the repo

# Once You've Forked the Repo 

# Once You've Forked the Repo 

Step 2: Clone your Lab 1 repository to your computer

Step 3: Open the `lab-1.qmd` file

Step 4: Change your name 

Step 5: Commit your change (with a nice message!)

Step 6: Push your change

# [Lab 1 Instructions](../../labs/instructions/lab-1-instructions.qmd)

## Some words about ChatGPT...

<!-- insert course policy -->

## To do...

-   **Lab 1: Introduction to Quarto**
    -   Due Sunday (9/29) at 11:59pm
-   **Challenge 1: Modifying Your Quarto Document**
    -   Due Sunday (9/29) at 11:59pm
-   **Complete the Week 2 Coursework**
    -   **Check-ins 2.1 + 2.2** due Tuesday (10/1) by the start of class
  