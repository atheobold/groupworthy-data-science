---
title: "Basics of Graphics"
format: 
  revealjs:
    theme: ../style.scss
editor: source
---

```{r}
#| include: false
#| label: setup
#| message: false
library(tidyverse)
library(palmerpenguins)
```

## Tuesday, September 23

Today we will...

+ Warm-up for `ggplot2` practice activity (30-minutes)
+ Set-up for the practice activity (15-minutes)
  + Review pair programming norms
  + Learn how to access practice activities
+ Take a 10-minute break
+ Complete the practice activity (60-minutes)
  + Find your partner!    
  + Fill out the collaboration survey (2-minutes)

## Data Context for Today

::: columns
::: {.column width="45%"}
::: {.midi}
```{r}
#| echo: true
#| eval: false
#| label: loading-data-help
#| code-line-numbers: false

library(palmerpenguins)

?penguins
```
:::
:::

::: {.column width="55%"}
![](images/penguins-docs.png){fig-alt="A screenshot of the R documentation page for the penguins dataset. The documentation page describes the context of the data (body measurements of penguins from the Palmer Archipeligo of Antarctica), the variables included in the data (species, island, bill_length_mm, etc.), and the units for each variable."}
:::
:::

::: {.callout-important}
# What do you notice about these data?
:::

## Grammar of Graphics

The Grammar of Graphics (GoG) is a principled way of specifying **exactly** how
to create a particular graph from a given data set. It helps us to 
systematically design new graphs.

. . .

<br>

Think of a graph or a data visualization as a mapping...

...**FROM variables** in the data set (or statistics computed from the data)...

...**TO visual attributes** (or "aesthetics") **of marks** (or "geometric elements") on the page/screen.

## How to Build a Graphic

Complete this template to build a basic graphic:

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

ggplot(
  data = <DATA>, 
  mapping = aes(<MAPPINGS>)
  ) +
  <GEOM FUNCTION>() + 
  any other arguments...
```

. . .

Notice, every `+` adds another **layer** to our graphic.

. . .

::: {.callout-tip}
Notice that I'm using **named arguments** to make my code easier to read.
:::

##

::: panel-tabset

### Add data

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

ggplot(data = penguins)
```

What do you expect to see after running this code?

::: {.fragment}

```{r}
#| echo: false
#| code-line-numbers: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 4
#| label: blank-plot
#| fig-alt: "An image of a blank gray square representing a blank plotting canvas."

ggplot(data = penguins)
```
:::

### Add aesthetics

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

ggplot(data = penguins, 
       mapping = aes(x = species, y = bill_length_mm)
       )
```

What do you expect to see after running this code?

::: {.fragment}

```{r}
#| echo: false
#| code-line-numbers: "2"
#| fig-align: center
#| fig-height: 4
#| fig-width: 4
#| label: add-variables-to-aesthetics
#| fig-alt: "An image of a gray square with white gridlines representing a plotting canvas where the variables have been assigned to the x and y aesthetics. On the x-axis there is a variable named 'class' with seven different values mapped to a particular white gridline---2seater, compact, midsize, minivan, pickup, subcompact, suv. On the y-axis there is a variable named 'hwy' with three printed values mapped to different white gridlines---20, 30, and 40. The spaces between these gridlines represent values between the printed values (e.g., 25)."


ggplot(data = penguins, 
       mapping = aes(x = species, y = bill_length_mm)
       )
```
:::

### Add one `geom` per layer

::: {.midi}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

ggplot(data = penguins, 
       mapping = aes(x = species, y = bill_length_mm)
       ) +
  geom_jitter() +
  geom_boxplot()
```
:::

::: columns
::: {.column width="25%"}
**What do you expect to see after running this code?**
:::

::: {.column width="5%"}
:::

::: {.column width="70%"}
::: {.fragment}
```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 4
#| fig-align: center
#| label: adding-jittered-points-and-boxplots
#| fig-alt: "The same visualization is presented, except there are not boxplots superimposed on top of the points (dots) for each vehicle type. The boxplots display the median (center line), quantiles (edges), and min / max (whiskers) of each vehicle's mileage."

ggplot(data = penguins, 
       mapping = aes(x = species, y = bill_length_mm)
       ) +
  geom_jitter() +
  geom_boxplot()
```
:::
:::
:::
:::

## Aesthetics

::: {.midi}
We map **variables** (columns) from the data to **aesthetics** on the graphic using the `aes()` function.

What aesthetics can we set?

+ x, y
+ color, fill
+ linetype
+ shape
+ size
:::

::: {.callout-tip}
See `ggplot2` cheat sheet for more!
:::

## Geometric Objects

Wee use a `geom_XXX()` function to represent data points.

. . .

:::: {.columns}

::: {.column width="50%"}
::: {.midi}
**one variable**

+ `geom_bar()`
+ `geom_density()`
+ `geom_dotplot()`
+ `geom_histogram()`
+ `geom_boxplot()`
:::
:::

::: {.column width="50%"}
::: {.midi}
**two variable**

+ `geom_boxplot()`
+ `geom_point()`
+ `geom_line()`
:::
:::
::::

::: {.callout-tip}
See `ggplot2` cheat sheet for more!
:::

## ggplot2 Resources

Every person should have a **ggplot2** cheatsheet! 

::: columns
::: {.column width="37%"}
::: {.fragment}
**On the Front**

::: {.small}
- Column 1: the "template" for making a ggplot
- Column 2: creating plots for one continuous or one discrete variable
- Column 3: creating plots for two continuous variables
:::
:::
:::

::: {.column width="3%"}
:::

::: {.column width="37%"}
::: {.fragment}
**On the Back**

::: {.small}
- Column 4: adding facets and labels to your plot
:::
:::
:::

::: {.column width="3%"}
:::

::: {.column width="15%"}
![](images/ggplot-cheatsheet.png){fig-alt="A picture of the ggplot2 cheatsheet, which contains helpful information on assembling a variety of visualizations all using the ggplot2 package."}

:::
:::


# PA 2: Using Data Visualization to Find the Penguins

![Artwork by Allison Horst](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png)

## Essential Abilities

::: columns
::: {.column width="60%"}
::: {.midi}
This puzzle will require knowledge of:

- types of variables
- types of visualizations
- what visualization(s) go with different variable types
- **ggplot2** functions to create visualizations
- choosing between different aesthetic options
:::

:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
::: {.fragment}
::: {.large}
**None of us have all these abilities. Each of us has some of these abilities.**
:::
:::
:::
:::

## Essential Abilities

This collaboration will require:

::: columns
::: {.column width="48%"}
:::{.midi}
üåê Coordination & Collaboration

- Clear communication
- Teamwork
- Interpersonal skills

üîß Engineering Mindset

- Problem-solving
- Decision-making
:::
:::

::: {.column width="2%"}
:::

::: {.column width="50%"}
:::{.midi}
üìä Management

- Leadership
- Time management

üí° Innovation

- Critical thinking

ü§ù Social Responsibility

- Empathy

:::
:::
:::

<!-- ## Pair Programming Process -->

<!-- Add diagram of collaborative process  -->

## Collaborative Protocol

::: {.small}
During your collaboration, you and your partner will alternate between two roles: 
:::

. . .

::: columns
::: {.column width="49%"}
**Computer**

::: {.small}
-   Reads out the prompt and ensures the group understands what is being asked. 
-   Encourages the Coder to vocalize their thinking.
-   Asks the Coder to explain their thinking.
<!-- -   Asks the Coder clarifying questions. -->
-   Types the code specified by the Coder into the Quarto document.
<!-- -   Listens carefully, asks the Coder to repeat statements if needed, or to slow -->
<!-- down. -->
<!-- -   **Does not** give hints to the Coder for how to solve the problem.  -->
<!-- -   **Does not** solve the problem themselves.  -->
-   Runs the code provided by the Coder. 
-   Works with Coder to debug the code. 
<!-- -   **Does not** tell the Coder how to correct an error. -->
-   Evaluates the output against the question prompt.  
:::
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
::: {.fragment}
**Coder**

::: {.small}
-   Confirms they understand what the prompt is asking.
-   Talks with Computer about their ideas. 
-   Explains their thinking.
-   Directs the Computer what to type. 
<!-- -   **Does not** ask the Computer how they would solve the problem.  -->
-   Manages resources (e.g., cheatsheets, textbook). 
<!-- -   **Does not** ask the Computer what functions / tools they should use.  -->
-   Works with Computer to debug the code. 
<!-- -   **Does not** ask the Computer to debug the code.  -->
<!-- -   Works with Computer to write code comments.  -->
:::
:::
:::
:::

## Collaborative Protocol

::: {.small}
During your collaboration, you and your partner will alternate between two roles: 
:::

. . .

::: columns
::: {.column width="49%"}
**Computer**

::: {.small}
-   **Does not** give hints to the Coder for how to solve the problem.
-   **Does not** solve the problem themselves.
-   **Does not** tell the Coder how to correct an error.
:::
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
::: {.fragment}
**Coder**

::: {.small}
-   **Does not** ask the Computer how they would solve the problem.
-   **Does not** ask the Computer what functions / tools they should use.
-   **Does not** ask the Computer to debug the code.
:::
:::
:::
:::

# PA 2 Warm-up

## Creating a Graphic

::: {.midi}
To create a specific type of graphic, we will **combine** aesthetics and
geometric objects. When sitting down to create a plot, it's great to start with
a **game plan**!
:::

. . .

::: {.midi}
1. What variables are you interested in?
2. What types of variables are these?
3. Where do you want to put each of these variables? (i.e., what `aes`thetics)
4. What type(s) of `geom`etries do you need?
:::

## Task 1

**Create a plot showing the number of penguins captured on each island.**

. . .

::: columns
::: {.column width="30%"}
1. What type of variable is `island`? 
:::

::: {.column width="3%"}
:::

::: {.column width="30%"}
2. What type of plot would you make for this type of variable?
:::

::: {.column width="3%"}
:::

::: {.column width="30%"}
3. What `geom` would you use to get this plot?
:::
:::

<!-- Interrupt them while they are speaking. -->

## Task 2

**Create plot displaying the most common bill lengths for the penguins in these data.**

. . .

::: columns
::: {.column width="30%"}
1. What type of variable is `bill_length_mm`? 
:::

::: {.column width="3%"}
:::

::: {.column width="30%"}
2. What type of plot would you make for this type of variable?
:::

::: {.column width="3%"}
:::

::: {.column width="30%"}
3. What `geom` would you use to get this plot?
:::
:::

<!-- Correct them when they say it should be a histogram. -->

## Task 3

**Create a plot showing the relationship between a penguin's bill length and body mass.**

. . .

::: columns
::: {.column width="30%"}
1. What type of variables are `bill_length_mm` and `body_mass_g`? 
:::

::: {.column width="3%"}
:::

::: {.column width="30%"}
2. What type of plot would you make for these types of variables?
:::

::: {.column width="3%"}
:::

::: {.column width="30%"}
3. What `geom` would you use to get this plot?
:::
:::

<!-- Ask them why they think it's a scatterplot. Ask them if the variables need to be in quotes. After they talk about the labels, ask them to pause and say you are lost. Ask them to repeat what they said. -->

# Working with Your Partner

## Group Norms

1. Be curious. Don't correct. 
2. Be open minded.
3. Ask questions rather than contribute. 
4. Respect each other.
5. Allow each teammate to contribute to the activity through their role. Do not divide the work.
6. Ask Dr. T or Jasmine *group* questions. No cross talk with other groups. 
7. Communicate with each other!

## Task Cards

```{r}
#| echo: false
#| fig-alt: "A diagram shows a collaborative software development process in four stages arranged in a cycle. At the top, a woman speaks with the label 'VOCALIZE.' To the right, she points to a diagram with the label 'EXPLAIN.' At the bottom, a man types on a laptop with the label 'IMPLEMENT.' On the left, a computer monitor displays a bug symbol with the label 'DEBUG.' Arrows connect the stages in a loop: Vocalize ‚Üí Explain ‚Üí Implement ‚Üí Debug ‚Üí back to Vocalize."

knitr::include_graphics(here::here("group-activities", 
                                   "collab-process.png")
                        )
```

# 10-minute Break

# Team Assignments

## Section 70 (9:00 am)


## Section 71 (12:00 pm)

![](images/section-71-seats.png)

## Accessing the Practice Activity in Google Colab

The partner whose family name starts first alphabetically starts as the
Computer! The Computer needs to:

::: columns
::: {.column width="40%"}
::: {.midi}
- Click on the Practice Activity 2 link from Canvas
- Log-in to your Google account
- Save a copy of the Colab notebook in your Google Drive
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](images/save-copy-colab.png){fig-alt="A screenshot of the options provided when you click on the File pane within Google Colab. The option to save a copy in Drive is highlighted, to demonstrate how each student needs to make a copy of the notebook before sharing it with their partner." width=50%}

:::
:::

## Sharing with Your Partner

Once you have your copy, you need to:

::: columns
::: {.column width="40%"}
::: {.midi}
- Share your copy with your partner's Google account
- Make sure the Coder can open the file
- The Computer should plug their laptop into the monitor
- The Coder must close their computer
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](images/share-colab.png){fig-alt="A screenshot of the options provided when you click on the Share pane (in the upper right corner) within Google Colab. The user has typed in a Gmail address to share it with Laura Smith, who will receive an email with a link to the document when the Notify option is checked." width=50%}
:::
:::

## Things to Know About Colab

::: columns
::: {.column width="48%"}
**Only one person can type at a time**

::: {.midi}
If two people type at the same time, only one document will be able to save.

This requires your group to adhere to the collaborative protocol!
:::
:::

::: {.column width="2%"}
:::

::: {.column width="50%"}
::: {.fragment}
**Code that was run on one person's computer [will not]{.underline} appear on another 
person's computer**

::: {.midi}
When you switch roles, the new Computer will need to [run all]{.underline} the code
that was typed by the previous Computer. 

![The "Run all" button at the top of the document can help you do this!](images/run-all-colab.png){fig-alt="A screenshot of the 'Run all' button from Google Colab, which is located at the top of the notebook, to the right of the 'Code' and 'Text' buttons for adding content to the notebook. Clicking on this button will run every code chunk in the entire notebook."}
:::

:::
:::
:::

## Submission

- When you have completed the visualization tasks, you will work as a group to
answer the five questions posed at the end of the document. 

- Each person will input the answers to these questions in the PA2 Canvas quiz.
- The person who last occupied the role of Computer will print the notebook as 
a PDF and submit the PDF for the group.
  + Only one submission per group!
