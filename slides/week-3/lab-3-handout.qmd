---
title: "Week 3 Day 2: Lab 3 Warm-up"
---

```{r}
#| label: setup
#| message: false
#| echo: false

library(tidyverse)
```

# Using the Native Pipe (`|>`)

In RStudio: `Tools` \> `Global Options...` \> `Code` \> check `Use native pipe operator` box 

Keyboard shortcut: `ctrl/cmd` + `shift` + `m`

## `filter()`

Do you want to filter a set of values of a variable?

```{r}
cereal |> 
  filter(name %in% c("Cheerios", "Cinnamon Toast Crunch", 
                     "Raisin Bran", "Cracklin' Oat Bran"))
```

## `select()`

```{r}
cereal |> 
  select(name:calories)
```

```{r}
cereal |> 
  select(name, starts_with("c"))
```

```{r}
cereal |> 
  select(name, where(is.numeric))
```

## `rename()`

> Change (bad) column names!

1. In the `rename()` function, what goes on the right hand side of the `=` sign? What goes on the left hand side?


**Bonus:** If you want to rename variables **and then** only select some variables, use `select()`!

```{r}
cereal |> 
  select(name,
         temp = type,
         cons_rating = rating)
```

# `count()`

> Obtain frequency tables of the number of observations in each level of a categorical variable

2. You could have obtained frequencies of observations by using `group_by()` +
`summarize()`. Why is `count()` a better choice?

## `group_by()` + `slice_max()`

3. What happens when you use `group_by()` before `slice_max()`? What output will you get?

## `group_by()` + `summarize()`

4. What groups are dropped after `summarize()` calculates the statistics? 

5. What groups **are not** dropped after `summarize()` calculates the statistics? 

6. How can you make sure all the groups have been dropped after `summarize()` calculates the statistics? 

## `if_else()` & `case_when()`

`if_else()` is designed for **binary** options:

```{r}
colleges_clean |> 
  filter(CONTROL != 3) |> 
  mutate(CONTROL = if_else(CONTROL == 1, 
                           "Public", 
                           "Private, Non-Profit")
         )
```

`case_when()` is designed for **three or more** options:

```{r}
colleges_clean |> 
  mutate(TYPE = case_when(CONTROL == 1 ~ "Public", 
                          CONTROL == 2 ~ "Private, Non-Profit", 
                          CONTROL == 3 ~ "Private, For Profit")
         )
```

## `across()`

> Performing the same function `across()` multiple columns 

```{r}
colleges_clean |> 
  group_by(REGION) |> 
  summarize(
    across(
      .cols = c(ADM_RATE, SAT_AVG, TUITIONFEE_IN, TUITIONFEE_OUT, UGDS), 
      .fns = ~ mean(.x)
      )
    )
```

7. How do columns need to be input into the `across()` function?

8. How do functions need to be input into the `across()` function?

9. What does the `.x` inside the function represent?

## `across()` friends

`if_any()` / `if_all()`

```{r}
colleges <- read_csv("https://www.dropbox.com/s/bt5hvctdevhbq6j/colleges.csv?dl=1")

colleges_clean <- colleges |> 
    select(INSTNM, CITY, STABBR, ZIP,
         ADM_RATE, SAT_AVG, UGDS,
         TUITIONFEE_IN, TUITIONFEE_OUT,
         CONTROL, REGION) |> 
  filter(CONTROL == 1 | CONTROL == 2)
```

```{r}
colleges_clean |> 
  filter(if_any(.cols = ADM_RATE:TUITIONFEE_OUT, 
                 .fns = ~ .x == "NULL")) 
```

```{r}
colleges <- read_csv("https://www.dropbox.com/s/bt5hvctdevhbq6j/colleges.csv?dl=1",
                     na = c("", "NA"))
```

## Saving Objects

Sometimes you just want to show a table and there is no need to save an object:

```{r}
cereal |> 
  filter(type == "cold") |> 
  mutate(potass_per_cup = potass / cups) |> 
  group_by(manuf) |> 
  summarise(mean_potass_per_cup = mean(potass_per_cup))
```

Other times, you will want to save your wrangled data for later:

```{r}
cereal_summary <- cereal |> 
  filter(type == "cold") |> 
  mutate(potass_per_cup = potass / cups) |> 
  group_by(manuf) |> 
  summarise(mean_potass_per_cup = mean(potass_per_cup))
```

## `kable()`

```{r}
library(knitr)
```

```{r}
cereal_clean <- cereal |> 
  mutate(ratio = sugars / potass)
  
cereal_clean |> 
  slice_head(n = 3) |> 
  kable()
```
