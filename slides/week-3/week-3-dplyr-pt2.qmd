---
title: "Extending Data Wrangling Verbs"
format: 
  revealjs:
    theme: [simple, ../style.scss]
editor: source
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
```

## Thursday, October 10

Today we will...

::: {.small}
+ Debrief PA 3
+ Debrief Lab 2 & Challenge 2 
+ Discuss Lab 2 Peer Review
+ Outline Grade Expectations for Syllabus
+ New Material
    -   Extend `dplyr` verbs to have more functionality
+ [Lab 3: Teacher Evaluations](../../labs/instructions/lab-3-instructions.qmd)
:::

# PA 3: Identify the Mystery College

## A few words about `drop_na()`

-   Easy tool to remove missing values
-   Unilaterally removes **any** row with a missing value for **any** variable
-   **But** you can specify what columns it should look at for missing values!

```{r}
# add example with columns specified!
```


# Lab 2 & Challenge 2 

## Grading / Feedback

::: {.small}
+ Each question will earn a score of "Success" or "Growing".
  * Questions marked "Growing" will receive feedback on how to improve your
  solution.
  * These questions can be resubmitted for additional feedback. 
:::

. . .

::: {.small}
+ Earning a "Success" doesn't necessarily mean your solution is without error.
  * You may still receive feedback on how to improve your solution.
  * These questions cannot be resubmitted for additional feedback.
:::

## Growing Points

::: {.incremental}

:::

# Peer Code Review

## What feedback would you give?

```{r}
#| eval: false
#| echo: true

ggplot(data = surveys, mapping = aes(x=hindfoot_length,y= weight)) +  
  geom_jitter(alpha=.2,color='tomato')+ facet_wrap(~species)+geom_boxplot(outlier.shape = NA)+labs(
    title ='Weight to hindfoot comparison'
  )+ xlab('length (mm)')+ylab('Weight(g)')
```


# Grade Expectations

## Defining Grades in 331

</br>

-   A: **Superior** Attainment of Course Objectives

-   B: **Good** Attainment of Course Objectives

-   C: **Acceptable** Attainment of Course Objectives

-   D: **Poor** Attainment of Course Objectives

::: aside
::: {style="color: #dd5227;"}
[STAT 331 / 531 Syllabus](https://docs.google.com/document/d/1-SSRp_mXFNgYiy4uW9tlcpxDpQH4OuMqK-Hh4v5AvZI/edit?usp=sharing)
:::
:::

# Extending `dplyr` verbs

## Example Data set -- [Cereal](https://search.r-project.org/CRAN/refmans/liver/html/cereal.html)

::: {.small}
```{r}
#| echo: true
#| label: data-load-preview
#| code-line-numbers: false

library(liver)
data(cereal)

glimpse(cereal)
```
:::

## Count with `count()`

How many cereals does each `manuf` have in this dataset?

. . .

```{r}
#| echo: true
#| eval: false
#| label: count-manuf-code
#| code-line-numbers: false

cereal |> 
  group_by(manuf) |> 
  count()
```

```{r}
#| eval: true
#| echo: false
#| label: count-manuf-table

cereal |> 
  group_by(manuf) |> 
  count() |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## `group_by()` + `slice()`

For each `manuf`, find the cereal with the most `fiber`.

. . .

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: group-by-slice-code

cereal |> 
  group_by(manuf) |> 
  slice_max(order_by = fiber)
```

</br>

```{r}
#| eval: true
#| echo: false
#| label: group-by-slice-table

cereal |> 
  group_by(manuf) |> 
  slice_max(order_by = fiber) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## Multiple Variables in `slice()`

Find the **3** cereals with the highest `fiber` and `potass`.

. . .

-   If you are ordering by multiple variables, wrap them in a data.frame!

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: slice-max-multiple-vars-code

cereal |> 
  slice_max(order_by = data.frame(fiber, potass),
            n = 3)
```

</br>

```{r}
#| eval: true
#| echo: false
#| label: slice-max-multiple-vars-table

cereal |> 
  slice_max(order_by = data.frame(fiber, potass),
            n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## Discretize with `if_else()`

For each cereal, label the `potass` as "high" or "low".

. . .

::: {.small}
`if_else(<CONDITION>, <TRUE OUTPUT>, <FALSE OUTPUT>)`
:::

. . .

```{r}
#| echo: true
#| eval: false
#| label: if-else-code
#| code-line-numbers: false

cereal |> 
  mutate(po_category = if_else(potass <= 100, 
                               "low", 
                               "high"),
         .after = potass)
```

```{r}
#| eval: true
#| echo: false
#| label: if-else-table
cereal |> 
  mutate(po_category = if_else(potass <= 100, "low", "high"),
         .after = potass) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 25)
```

. . .

What do you think `.after` does?

## Re-level with `case_when()`

For each manufacturer, change the `manuf` code to the name of the manufacturer.

. . .

A **series** of `if-else` statements.

```{r}
#| echo: true
#| eval: false
#| label: case-when-code
#| code-line-numbers: false

cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina")
         )
```

. . .

**Does this code create a new variable or change an existing variable?**

## 

```{r}
#| eval: true
#| echo: false
#| label: case-when-table

cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina")) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "750px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## Calculate a Summary Statistic for Many Columns

For each `type` of cereal, calculate the `mean` nutrient levels.

::: {.small}
```{r}
#| echo: true
#| label: repeated-calculations
#| eval: false
#| code-line-numbers: false

cereal |> 
  group_by(type) |> 
  summarize(mean_cal = mean(calories), 
            mean_protein = mean(protein), 
            mean_fat = mean(fat), 
            mean_sodium = mean(sodium), 
            mean_fiber = mean(fiber), 
            mean_carbs = mean(carbo), 
            mean_sugars = mean(sugars), 
            mean_potassium = mean(potass)
            )
```
:::

. . .

**Does this seem like the most efficient way we could do this?**

## Summarize multiple columns with `across()`

**Within** the `summarize()` function, we use the `across()` function, with three arguments:

-   `.cols` -- to specify the **columns** to apply functions to.
-   `.fns` -- to specify the **function(s)** to apply.
-   `.x` -- as a placeholder (alias) for the variables being passed into the function.

. . .

We use **lambda functions**: `~ <FUN_NAME>(.x, <ARGS>)` to 
specify what function(s) to apply

## Summarize multiple columns with `across()`

For each `type` of cereal, calculate the `mean` nutrient levels.

```{r}
#| echo: true
#| eval: false
#| label: summarize-across-code
#| code-line-numbers: false

cereal |> 
  group_by(type) |> 
  summarise(
    across(.cols = calories:potass, 
           .fns = ~ mean(.x)
           )
    )
```

```{r}
#| eval: true
#| echo: false
#| label: summarize-across-table

cereal |> 
  group_by(type) |> 
  summarise(across(.cols = calories:potass, .fns = mean)) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "130px") |> 
  kableExtra::kable_styling(font_size = 23)
```

## Summarize multiple columns with `across()`

::: {.small}
For each `type` of cereal, calculate the `mean` nutrient levels. *Remove 10% of observations at the ends of the values, so extreme values are not included in the calculations.*


```{r}
#| echo: true
#| eval: false
#| label: summarize-across-additional-args-code
#| code-line-numbers: false

cereal |> 
  group_by(type) |> 
  summarise(
    across(.cols = calories:potass, 
           .fns = ~ mean(.x, trim = 0.1)
           )
    )
```
:::

```{r}
#| eval: true
#| echo: false
#| label: summarize-across-additional-args-table

cereal |> 
  group_by(type) |> 
  summarise(across(.cols = calories:potass,
                   .fns = ~ mean(.x, trim = 0.1))) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "130px") |> 
  kableExtra::kable_styling(font_size = 23)
```

## Getting Fancy with Names

::: columns
::: {.column width="10%"}
::: {.small}
`.names`
:::
:::

::: {.column width="2%"}
:::

::: {.column width="85%"}
::: {.small}
```
A glue specification that describes how to name the output columns. This can use {.col} to stand for the selected column name, and {.fn} to stand for the name of the function being applied. The default (NULL) is equivalent to "{.col}" for the single function case and "{.col}_{.fn}" for the case where a list is used for .fns.
```
:::
:::
:::

. . .

</br>

::: {.small}
```{r}
#| echo: true
#| eval: false
#| label: summarize-across-with-names-code
#| code-line-numbers: false

cereal |> 
  group_by(type) |> 
  summarise(
    across(.cols = calories:potass, 
           .fns = ~ mean(.x), 
           .names = "mean_{.col}"
           )
    )
```

<!-- I'm using mean instead of {.fn} because it expects that {.fn} is a list of functions, so when I use that in the .names argument my columns end up being 1_protein (since the mean is the first function).  -->
:::

```{r}
#| eval: true
#| echo: false
#| label: summarize-across-with-names-table

cereal |> 
  group_by(type) |> 
  summarise(
    across(.cols = calories:potass, 
           .fns = ~ mean(.x), 
           .names = "mean_{.col}"
           )
    ) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "130px") |> 
  kableExtra::kable_styling(font_size = 23)
```

## Piping into `ggplot()`

Plot the `mean` `protein` per `cup` for each `manuf`.

. . .

```{r}
#| echo: true
#| code-line-numbers: '|1-12|13-26'
#| fig-align: center
#| output-location: slide

cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina")) |> 
  filter(type == "cold") |> 
  mutate(pro_per_cup = protein / cups) |> 
  group_by(manuf) |> 
  summarise(mean_pro_per_cup = mean(pro_per_cup)) |> 
  ggplot(mapping = aes(y = manuf, 
                       x = mean_pro_per_cup, 
                       shape = manuf)) +
  geom_point(show.legend = FALSE,
             size = 6) +
  labs(subtitle = "for 77 different breakfast cereals",
       title = "Mean Grams of Protein per Cup", 
       x = "", 
       y = "") +
  theme_bw() +
  theme(plot.title = element_text(size = 24),
        plot.subtitle = element_text(size = 18),
        axis.text = element_text(size = 22)
        ) +
  scale_x_continuous(limits = c(0, 10))
```

# Creating a Game Plan

## Creating a Game Plan

::: {.small}
Just like when creating graphics with `ggplot`, wrangling data with `dplyr` involves thinking through many steps and writing many *layers* of code.

-   To help you think through a wrangling problem, I strongly encourage you to create a game plan **before** we start writing code.

This might involve...

-   a sketch or flowchart.
-   a list of `dplyr` verbs and variable names.
-   annotating the `head` of the dataframe.
:::

## Creating a Game Plan

::: panel-tabset
### The Question

What is the `median` grams of `sugars` per `shelf` and the number of cereals per `shelf`, when we drop the missing values (coded as `sugars = -1`)?

<br>

**The person with the nearest birthday**: explain **out loud** to your neighbor how you would do this manipulation.

### The Code

```{r}
#| echo: true
#| code-line-numbers: false
#| label: median-sugars-per-shelf

cereal |> 
  select(sugars, shelf) |> 
  filter(sugars != -1) |> 
  group_by(shelf) |> 
  summarise(med_sugars = median(sugars),
            num_shelf = n()
            )
```
:::


# [Lab 3](../../labs/instructions/lab-3-instructions.qmd) & [Challenge 3](../../labs/instructions/challenge-3-instructions.qmd)

Exploring teacher evaluations during COVID-19

## To do...

-   **Lab 3: Teacher Evaluations**
    -   Due Sunday, 10/13 at 11:59pm
-   **Read Chapter 4: Data Joins and Transformations**
    -   **Check-in 4.1 + 4.2** due Tuesday 10/15 at 12pm
