---
title: "Extending Data Wrangling Verbs"
format: 
  revealjs:
    theme: [simple, ../style.scss]
editor: source
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
```

<!-- Add slide on deciding if you need to save an intermediate object. -->

<!-- ## Save your changes! -->

<!-- When you manipulate your data, make sure you assign your new dataset to a variable. -->

<!-- ```{r} -->

<!-- #| code-line-numbers: "1" -->

<!-- #| echo: true -->

<!-- #| eval: false -->

<!-- #| label: saving-summary-to-object -->

<!-- cereal_potass_summary <- cereal |>  -->

<!--   filter(type == "cold") |>  -->

<!--   mutate(potass_per_cup = potas / cups) |>  -->

<!--   group_by(manuf) |>  -->

<!--   summarise(mean_potass_per_cup = mean(potass_per_cup)) -->

<!-- ``` -->

## Thursday, October 10

Today we will...

-   New Material
    -   Extend `dplyr` verbs to have more functionality.
    -   Think about data ethics.
-   [Lab 3: Teacher Evaluations](../../labs/instructions/lab-3-instructions.qmd)

# Extending `dplyr` verbs

## Example Data set -- [Cereal](https://search.r-project.org/CRAN/refmans/liver/html/cereal.html)

```{r}
#| echo: true
library(liver)
data(cereal)
head(cereal)
```

## Count with `count()`

How many cereals does each `manuf` have in this dataset?

. . .

```{r}
#| echo: true
#| eval: false
#| label: count-manuf-code
#| code-line-numbers: false

cereal |> 
  group_by(manuf) |> 
  count()
```

```{r}
#| eval: true
#| echo: false
#| label: count-manuf-table

cereal |> 
  group_by(manuf) |> 
  count() |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```

<!-- Possibly insert example slide on calculating many different means of variables  -->

<!-- Connect to the DRY principle -->
<!-- Connect to efficiency -->

## Summarize multiple columns with `across()`

For each `type` of cereal, calculate the `mean` nutrient levels.

. . .

**Within** the `summarize()` function, we use the `across()` function, with three arguments:

-   `.cols` -- to specify the **columns** to apply functions to.
-   `.fns` -- to specify the **function(s)** to apply.
-   `.x` -- as a placeholder for **additional arguments** being passed into the function(s).

. . .

We use **lambda functions**: `~ <FUN_NAME>(.x, <ARGS>)` to 
specify what function(s) to apply

## Summarize multiple columns with `across()`

For each `type` of cereal, calculate the `mean` nutrient levels.

```{r}
#| echo: true
#| eval: false
#| label: summarize-across-code
#| code-line-numbers: false

cereal |> 
  group_by(type) |> 
  summarise(
    across(.cols = calories:potass, 
           .fns = ~ mean(.x)
           )
    )
```

```{r}
#| eval: true
#| echo: false
#| label: summarize-across-table

cereal |> 
  group_by(type) |> 
  summarise(across(.cols = calories:potass, .fns = mean)) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "130px") |> 
  kableExtra::kable_styling(font_size = 23)
```

## Summarize multiple columns with `across()`

For each `type` of cereal, calculate the `mean` nutrient levels. *Remove 10% of observations at the ends of the values, so extreme values are not included in the calculations.*


```{r}
#| echo: true
#| eval: false
#| label: summarize-across-additional-args-code
#| code-line-numbers: false

cereal |> 
  group_by(type) |> 
  summarise(
    across(.cols = calories:potass, 
           .fns = ~ mean(.x, trim = 0.1)
           )
    )
```

```{r}
#| eval: true
#| echo: false
#| label: summarize-across-additional-args-table

cereal |> 
  group_by(type) |> 
  summarise(across(.cols = calories:potass,
                   .fns = ~ mean(.x, trim = 0.1))) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "130px") |> 
  kableExtra::kable_styling(font_size = 23)
```

## Discretize with `if_else()`

For each cereal, label the `potass` as "high" or "low".

. . .

One `if_else` statement:

<font size = 6>

-   `if_else(<CONDITION>, <TRUE OUTPUT>, <FALSE OUTPUT>)`

</font>

. . .

```{r}
#| echo: true
#| eval: false
#| label: if-else-code
#| code-line-numbers: false

cereal |> 
  mutate(po_category = if_else(potass <= 100, "low", "high"),
         .after = potass)
```

```{r}
#| eval: true
#| echo: false
#| label: if-else-table
cereal |> 
  mutate(po_category = if_else(potass <= 100, "low", "high"),
         .after = potass) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 25)
```

</br>

. . .

::: {.small}
::: {.callout-tip}
# `.after`

This specifies the location of the newly created column!
:::
:::

## Re-level with `case_when()`

For each manufacturer, change the `manuf` code to the name of the manufacturer.

. . .

A **series** of `if-else` statements.

```{r}
#| echo: true
#| eval: false
#| label: case-when-code
#| code-line-numbers: false

cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina"))
```

. . .

**Does this code create a new variable or change an existing variable?**

## 

```{r}
#| eval: true
#| echo: false
#| label: case-when-table

cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina")) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "750px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## `group_by()` + `slice()`

For each `manuf`, find the cereal with the most `fiber`.

. . .

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: group-by-slice-code

cereal |> 
  group_by(manuf) |> 
  slice_max(order_by = fiber)
```

</br>

```{r}
#| eval: true
#| echo: false
#| label: group-by-slice-table

cereal |> 
  group_by(manuf) |> 
  slice_max(order_by = fiber) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## Multiple Variables in `slice()`

Find the **3** cereals with the highest `fiber` and `potass`.

. . .

-   If you are ordering by multiple variables, wrap them in a data.frame!

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: slice-max-multiple-vars-code

cereal |> 
  slice_max(order_by = data.frame(fiber, potass),
            n = 3)
```

</br>

```{r}
#| eval: true
#| echo: false
#| label: slice-max-multiple-vars-table

cereal |> 
  slice_max(order_by = data.frame(fiber, potass),
            n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## Piping into `ggplot()`

Plot the `mean` `protein` per `cup` for each `manuf`.

. . .

```{r}
#| echo: true
#| code-line-numbers: '|1-12|13-26'
#| fig-align: center
#| output-location: slide

cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina")) |> 
  filter(type == "cold") |> 
  mutate(pro_per_cup = protein / cups) |> 
  group_by(manuf) |> 
  summarise(mean_pro_per_cup = mean(pro_per_cup)) |> 
  ggplot(mapping = aes(y = manuf, 
                       x = mean_pro_per_cup, 
                       shape = manuf)) +
  geom_point(show.legend = FALSE,
             size = 6) +
  labs(subtitle = "for each Manufacturer",
       title = "Mean Protein per Cup", 
       x = "", 
       y = "") +
  theme_bw() +
  theme(plot.subtitle = element_text(size = 32),
        axis.text = element_text(size = 22),
        axis.text.x = element_text(angle = 13)) +
  scale_x_continuous(limits = c(0, 10))
```

# Creating a Game Plan

## Creating a Game Plan

Just like when creating graphics with `ggplot`, wrangling data with `dplyr` involves thinking through many steps and writing many *layers* of code.

-   To help you think through a wrangling problem, I strongly encourage you to create a game plan **before** we start writing code.

This might involve...

-   a sketch or flowchart.
-   a list of `dplyr` verbs and variable names.
-   annotating the `head` of the dataframe.

## Creating a Game Plan

::: panel-tabset
### The Question

What is the `median` grams of `sugars` per `shelf` and the number of cereals per `shelf`, when we drop the missing values (coded as `sugars = -1`)?

<br>

**The person with the nearest birthday**: explain **out loud** to your neighbor how you would do this manipulation.

### The Code

```{r}
#| echo: true
#| code-line-numbers: false
#| label: median-sugars-per-shelf

cereal |> 
  select(sugars, shelf) |> 
  filter(sugars != -1) |> 
  group_by(shelf) |> 
  summarise(med_sugars = median(sugars),
            num_shelf = n()
            )
```
:::

# Thinking about Data Ethics

## Data Ethics

<br>

<br>

**What do we mean by *data ethics*?**

<br>

**Why do we (as statisticians, data scientists, folks working with data) need to think about *data ethics*?**

## Data Ethics

**What do we mean by *data ethics*?**

-   The process of evaluating data collection, processing, analysis, and dissemination practices for their adverse impacts on individuals, systems, and society.

. . .

**Why do we (as statisticians, data scientists, folks working with data) need to think about *data ethics*?**

-   We have a lot of power to declare **truth and fact**, hiding behind the *black box* of data science methods.

## Data Science Oath

-   I will not be ashamed to say, **“I know not,”** nor will I fail to call in my colleagues when the skills of another are needed.
-   I will respect the **privacy** of my data subjects, for their data are not disclosed to me that the world may know.
-   I will remember that my data are not just numbers without meaning or context, but represent **real people and situations**, and that my work may lead to unintended societal consequences, such as inequality, poverty, and disparities due to algorithmic bias.

## ASA Ethical Guidelines

-   The American Statistical Association’s Ethical Guidelines for Statistical Practice are intended to help statistics practitioners make decisions ethically.
-   They aim to promote accountability by informing those who rely on statistics of the standards they should expect.

. . .

> Visit [Ethical Guidelines for Statistical Practice](https://www.amstat.org/your-career/ethical-guidelines-for-statistical-practice) and discuss one of the guidelines with your neighbor.
>
> -   What surprises you? What did you learn?
> -   In what scenario might this come into play?

# [Lab 3](../../labs/instructions/lab-3-instructions.qmd) & [Challenge 3](../../labs/instructions/challenge-3-instructions.qmd)

Exploring teacher evaluations during COVID-19

## To do...

-   **Lab 3: Teacher Evaluations**
    -   Due Sunday, 10/13 at 11:59pm
-   **Read Chapter 4: Data Joins and Transformations**
    -   **Check-in 4.1 + 4.2** due Tuesday 10/15 at 12pm
