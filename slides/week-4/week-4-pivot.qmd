---
title: "Data Pivots + Joins"
format: 
  revealjs:
        theme: [simple, ../style.scss]
editor: source
---

```{r}
#| include: false
#| message: false
#| label: setup

library(tidyverse)
library(readxl)
```

## Tuesday, October 15

Today we will discuss...

-   Challenge 2 Sticking Points
    + Updated ChatGPT Policy
-   Grade Expectations 
    + Survey on Canvas
-   New Material
    -   Reading in Excel spreadsheets with `readxl`
    -   Filtering out 
    -   Pivoting data with `tidyr`
-   PA 4: Military Spending

# Challenge 2

## Common Sticking Points

::: {.midi}
- What are these species of???
    + I want you to spend more time creating really good plot labels that 
    include details about the data context!
:::

. . .

::: {.midi}    
- After Lab 1, your Challenges will **always** be a separate `.qmd` file. 
    + Please do not add these to the end of your Lab submission! 
:::

. . .

::: {.midi}
- Jittered points are nice to add to a boxplot, but with too many points it 
gets hard to see the boxplots! 
    + Move the points behind the boxplot! 
    + Make the points more transparent! 
::: 

## Updates to ChatGPT Policy

::: {.small}
At Cal Poly, you have full access to ChatGPT. Used thoughtfully, these tools 
can support your learning. However, they can also become a shortcut that
prevents real learning. Only you can make the right choice about how you use
them.
:::

. . .

::: {.small}
To help you stay on the right side of that line, here are a few AI guardrails
for this course:

- Do not copy and paste assignment prompts or entire code files into ChatGPT. 

- Use ChatGPT as a learning aid: 
    + describe what you’re trying to do,
    + explain what you’ve already tried, and 
    + ask for guidance or clarification.

- Your questions should invite understanding, not replacement of your own
thinking.
:::

# Grade Expectations

# Grade Expectations

> The course syllabus has been updated to reflect the grade criteria you all
> proposed. 

# Grade Expectations

> The course syllabus has been updated to reflect the grade criteria you all
> proposed. 

You have until Frday to vote on whether you agree with the proposed criteria,
and to suggest ways these criteria could be revised.

# Data Layouts

## Tidy Data

Tidy data...

-   is rectangular.
-   has observations as rows and variables as columns.
-   **has different formats for different tasks.**

![](https://r4ds.hadley.nz/images/tidy-1.png){fig-alt="This image shows a visual representation of the three key concepts in tidy data: variables, observations, and values. It is divided into three sections. The first section on the left highlights vertical arrows pointing down each column of a table, labeled 'variables,' showing that each column represents a different variable (country, year, cases, population). The middle section has horizontal arrows pointing across rows of the same table, labeled 'observations,' indicating that each row is an observation or data point. The third section on the right has circles around individual data points within the table, labeled 'values,' indicating the actual values for each variable in the dataset."}

## Creating Tidy Data

We may need to **transform** our data to turn it into the **version of tidy** that is best for a task at hand.

![Image by Allison Horst](https://www.openscapes.org/img/blog/tidydata/tidydata_4.jpg){fig-alt="An illustration of two round, fluffy characters, one green and one purple, holding a large table between them labeled 'TIDY.' The table is held by clamps on either side labeled 'WRANGLE' in orange and pink. The green character on the left is smiling with one arm raised, while the purple character on the right is cheering with both arms up. The table represents tidy data, and the clamps labeled 'WRANGLE' suggest data manipulation or preparation."}

# Military Expenditures

## Military Expenditures

::: {.midi}
We will be using data from the Stockholm International Peace Research Institute
(SIPRI). The SIPRI Military Expenditure Database is an open source data set
containing time series on the military spending of countries from 1949--2019. 
The database is updated annually, which may include updates to data from
previous years.

Military expenditure is presented in many ways:

+ in local currency and in US $ (both from 2018 and current);
+ in terms of financial years and calendar years;
+ as a share of GDP and per capita.
:::

## [A Messy Excel File](https://cpslo-my.sharepoint.com/:x:/g/personal/atheobol_calpoly_edu/ESF5LJhLI0FLihBUZINkS7MB-qdforgA9uA7p1-ZbmwvXQ?e=B4g3iI)

::: {.midi}
First, you should notice that there are ten different sheets included in the
dataset. 

We are interested in the sheet labeled *"Share of Govt. spending"*, 
which contains information about the share of all government spending that is
allocated to the military.
:::

</br>

. . .

::: {.midi}
Next, you'll notice that there are notes about the data in the first six rows.
Ugh!
:::

. . .

::: {.midi}
Finally, you should also note that the last six rows are footnotes about the
data. **Ugh**!
:::


## Exploring `read_xlsx()` Arguments

The `read_xlsx()` function has several useful arguments:

+ `sheet`: specify the name of the sheet that you want to use. The name must be
passed in as a string (in quotations)!
+ `skip`: specify the number of rows you want to skip *before* reading in the
data.
+ `n_max`: specify the maximum number of rows of data to read in.

## Declaring the Sheet

::: {.midi}
```{r}
#| label: sheet-argument
#| eval: false
#| echo: true

military <- read_xlsx("gov_spending_per_capita.xlsx", 
                      sheet = )
```
:::

::: {.callout-important}
# Argument Input

What should we input as the `sheet`?
:::

## Skipping the Notes at the Top

::: {.midi}
```{r}
#| label: skip-top
#| eval: false
#| echo: true

military <- read_xlsx("gov_spending_per_capita.xlsx", 
                      sheet = "Share of Govt. spending", 
                      skip  = )
```
:::

::: {.callout-important}
# Argument Input

How many rows should we `skip` at the top of the Excel file?
:::

## Skipping the Footnotes at the Bottom

::: {.midi}
```{r}
#| label: skip-bottom
#| eval: false
#| echo: true

military <- read_xlsx("gov_spending_per_capita.xlsx", 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = )
```
:::

::: {.callout-important}
# Argument Input

What is the maximum number of rows we should let `read_xlsx()` read in? 
:::

```{r}
#| label: reading-in-data
#| echo: false

military <- read_xlsx(here::here("group-activities",
                                 "week-4", 
                                 "data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 190)

```

# 

![](images/high-five.webp)

## Missing Data

::: {.midi}
The availability of data varies considerably by country, but we note that data
is available from at least the late 1950s for a majority of countries that were
independent at the time. 

Estimates for regional military expenditure have been extended backwards
depending on availability of data, but no estimates for total world military
expenditure are available before 1988 due to the lack of data from the Soviet
Union.
:::

## Finding the `NA` Values

Open the Excel file and see if you can find the three ways missing values were
coded!

## Declaring `NA` Values

::: {.midi}
```{r}
#| label: read-in-data-code-missing-values-preview
#| eval: false
#| echo: true

military <- read_xlsx("gov_spending_per_capita.xlsx", 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 190, 
                      na = c(". .", "xxx", "..")
                      )
```
:::

::: {.callout-tip}
# Multiple Versions of `NA`s

Note that if there was only **one** other version of an `NA` (e.g., `99999`), 
then we wouldn't need the `c()` function. We could just use `na = "99999"`. 
:::

```{r}
#| label: read-in-data-code-missing-values
#| echo: false

military <- read_xlsx(here::here("group-activities",
                                 "week-4", 
                                 "data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 190, 
                      na = c(". .", "xxx", "..")
                      )
```

# 

![](images/heck-yeah.webp)

## Creating Tidy Data

::: {.midi}
Let's say we want to plot how military expenditures have changed over time. 
:::

```{r}
eastern_europe <- c("Armenia", 
                    "Azerbaijan",
                    "Belarus", 
                    "Georgia", 
                    "Moldova", 
                    "Russia", 
                    "Ukraine")

military |> 
  pivot_longer(cols = `1988`:`2019`,
               names_to  = "Year",
               values_to = "Expenditures") |> 
  filter(Country %in% eastern_europe, 
         Year > 1994) |> 
  ggplot(mapping = aes(x = Year, y = Expenditures)) +
  geom_point() +
  scale_y_continuous(labels = scales::label_percent()) +
  theme_bw() +
  labs( x = "", 
        y = "", 
        title = "Percentage of GDP Allocated to Military Spending", 
        subtitle = "in Former Soviet Republics")
``` 

. . .

::: {.midi}
To do this, we need to pivot the year from wide to long format! 
:::

# Pivoting Data

::: columns
::: column
![](https://github.com/gadenbuie/tidyexplain/raw/main/images/static/png/original-dfs-tidy.png){fig-alt="Two tables side by side, illustrating the difference between 'wide' and 'long' data formats. The left table labeled 'wide' has columns: 'id,' 'x,' 'y,' and 'z.' The 'id' column contains the values 1 and 2, and the 'x,' 'y,' and 'z' columns contain the values a, b, c, d, e, and f spread across the rows. The right table labeled 'long' has columns: 'id,' 'key,' and 'val.' The 'id' column has repeated values (1 and 2), the 'key' column contains 'x,' 'y,' and 'z,' and the 'val' column contains 'a' through 'f,' corresponding to the wide table but reorganized in a 'long' format."}
:::

::: column
![](https://github.com/gadenbuie/tidyexplain/raw/main/images/tidyr-pivoting.gif){fig-alt="A gif showing the visual transformation of the data pictured, going from the wide format to the long format. Above the image is the R code that would produce each data layout."}
:::
:::


## Manual Method

::: {.large}

Given the current layout of the data, how would you **manually** convert this
dataset into a **long format**?
:::

## Manual Method: Steps

::: columns
::: {.column width="40%"}
::: incremental
::: {.small}
0.  Keep the column `Country`.
1.  Create a new column `Year`.
2.  Create a new column `Expenditures` (hold yearly military expenditure values).
3.  Now we have three columns -- move Algeria's values over.
:::
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
::: {.fragment}
::: {.centered}
![](images/pivot_algeria.png){width=45% fig-alt=""}
:::
:::
:::
:::

## Manual Method: Steps

::: columns
::: {.column width="40%"}
::: {.small}
0.  Keep the column `Country`.
1.  Create a new column `Year`.
2.  Create a new column `Expenditures` (hold yearly military expenditure values).
3.  Now we have three columns -- move Algeria's values over.
4.  Move Libya's values over.
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
::: {.centered}
![](images/pivot_algeria_libya.png){width=45% fig-alt=""}
:::
:::
:::


## Manual Method: Steps

::: {.small}
0.  Keep the column `Country`.
1.  Create a new column `Year`.
2.  Create a new column `Expenditures` (hold yearly military expenditure values).
3.  Now we have three columns -- move `Algeria`'s values over.
4.  Move Libya's values over.
5.  Move Morocco's values over.
6.  Continue for the rest of the countries.
:::

## `pivot_longer()`

We can use `pivot_longer()` to turn a **wide** dataset into a **long(er)**
dataset.

+ `cols` -- specify the columns that should be pivoted.
  + Do **not** include the names of ID columns (columns to not be pivoted).
+ `names_to` -- the name of the new column containing the old column names.
+ `values_to` -- the name of the new column containing the old column values.


## `pivot_longer()`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: military-longer-code-cols

military |> 
  pivot_longer(cols = ,
               names_to  = ,
               values_to = )
```

::: {.callout-important}
# Argument Input

What columns do we want to pivot longer? 
:::

## `pivot_longer()`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: military-longer-code-names

military |> 
  pivot_longer(cols = `1988`:`2019`,
               names_to  = ,
               values_to = )
```

::: {.callout-important}
# Argument Input

What name should we give the new column column containing the old column names?
:::

## `pivot_longer()`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: military-longer-code-values

military |> 
  pivot_longer(cols = `1988`:`2019`,
               names_to  = "Year",
               values_to = )
```

::: {.callout-important}
# Argument Input

What name should we give the new column containing the old column values?
:::

## `pivot_longer()`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: military-longer-code-full

military |> 
  pivot_longer(cols = `1988`:`2019`,
               names_to  = "Year",
               values_to = "Expenditures")
```

. . .

```{r}
#| eval: true
#| echo: false
#| code-line-numbers: false
#| label: military-longer-table

military |> 
  pivot_longer(cols = `1988`:`2019`,
               names_to  = "Year",
               values_to = "Expenditures") |> 
  select(Country, Year, Expenditures, everything()) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "500px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## Remember: `if_any()` & `if_all()`

These functions are used with `filter()` to select rows based on a logical
statement applied to multiple columns

- `if_any()` – returns a logical vector (one element for each row) that is `TRUE`
if the logical statement is true for **any** column in the supplied columns

- `if_all()` – returns a logical vector (one element for each row) that is `TRUE`
if the logical statement is true for **all** columns in the supplied columns

## `if_any()` Example

::: {.midi}
Suppose we want to know what countries have missing values for **at least one**
of the years. 

We can `filter()` our data to only include observations where **any** of the 
columns have a missing value. 

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: if-any-missing-code

military |> 
  filter(
    if_any(
      .cols = `1988`:`2019`, 
      .fns = ~ is.na(.x)
      )
    ) 
```
:::

## `if_any()` Example

```{r}
#| eval: true
#| echo: false
#| code-line-numbers: false
#| label: if-any-missing-table


military |> 
  filter(
    if_any(
      .cols = `1988`:`2019`, 
      .fns = ~ is.na(.x)
      )
    ) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "500px") |> 
  kableExtra::kable_styling(font_size = 25)
```

# PA 4: Military Spending

Today you will be tidying messy data to explore the relationship between
countries of the world and military spending.

## This activity will require knowledge of:

::: columns
::: {.column width="60%"}
::: {.small}
- character vectors
- searching / iterating over multiple columns
- pivoting data from wide to long
- creating side-by-side boxplots
- locating the median on a boxplot
- estimating the variability from a boxplot
:::
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
[**None of us have all these abilities. Each of us has some of these abilities.**]{.midi}

:::
:::

## tidyr Resources

::: columns
::: {.column width="60%"}
Every group should have a **tidyr** cheatsheet!

**On the Front**: The Reshape Data section gives advice on pivoting a dataset
from wide to long
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
![](images/tidyr-cheatsheet.png){fig-alt="A picture of the tidyr cheatsheet, which contains helpful information on transforming data in a variety of ways."}

:::
:::

## Pair Programming Expectations

![](images/collab-process.png){fig-alt="A diagram shows a collaborative software development process in four stages arranged in a cycle. At the top, a woman speaks with the label 'VOCALIZE.' To the right, she points to a diagram with the label 'EXPLAIN.' At the bottom, a man types on a laptop with the label 'IMPLEMENT.' On the left, a computer monitor displays a bug symbol with the label 'DEBUG.' Arrows connect the stages in a loop: Vocalize → Explain → Implement → Debug → back to Vocalize."}

## External Resources

During the Practice Activity, you **are not** permitted to use Google or ChatGPT
for help. 

</br> 

You **are** permitted to use:

- the `tidyr` cheatsheet,
- the course textbook, 
- any notes you've taken, and
- the course slides. 

## Submission

- Each person will input your responses to Canvas Questions 1, 2, and 3 into 
the PA4 Canvas quiz.
- The person who last occupied the role of Computer will submit the link to your
group's Colab notebook.
  + Only one submission per group!

# 5-minute break

## Team Assignments - 9am

::: {.centered}
![](images/section-70-seats.png){width=75%}
:::

::: {.small}
The partner who woke up the earliest starts as the Coder!
:::

## Team Assignments - 12pm

::: {.centered}
![](images/section-71-seats.png){width=75%}
:::

::: {.small}
The partner who woke up the earliest starts as the Coder!
:::
