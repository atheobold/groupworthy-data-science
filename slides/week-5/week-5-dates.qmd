---
title: "Using `lubridate` to Work with Dates"
format: 
  revealjs:
        theme: [simple, ../style.scss]
editor: source
---

```{r}
#| include: false
#| message: false
#| label: setup

library(tidyverse)
library(palmerpenguins)
```


## Thursday, October 16

Today we will...

::: columns
::: {.column width="55%"}
-   Reminder About Lab 3 / Challenge 3 Revisions
-   Reminder About Lab 4 Peer Code Review
-   Week 6 Layout
    + What to Expect
    + Midterm Portfolios
    + How to Get Started
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
-   New Material
    -   Working with Date & Time Variables
-   PA 5.2: Jewel Heist 
:::
:::


# Lab 3 / Challenge 3 Revisions

# Lab 3 / Challenge 3 Revisions

> Revisions are due by Friday

. . .

Any problem receiving a "Growing" can be revised and submitted for additional
feedback

# Don't forget to complete your Lab 4 code review!

# Don't forget to complete your Lab 4 code review!

</br> 

> Make sure your feedback follows the [code review guidelines](../../code-review/code-review-guidelines.qmd). 

> Insert your review into the comment box! 

# Week 6 Layout

# Week 6 Layout

- Tuesday: Version Control
  + Live Code / Troubleshoot In-Class 
  + Midterm Portfolio Work Session
  
. . .

- Thursday: Midterm Portfolio Work Session
  + Midterm Portfolios Due **Sunday**, October 19


## What to Expect

You will create a Midterm Portfolio, with code covering the
learning targets we have covered thus far in the course. 

. . .

- Your code will be pulled from your Lab and Challenge
assignments. 

. . .

- You will write reflections on how you've:
  + revised your thinking
  + extended your thinking
  + supported and collaborated with your peers
  
## Getting Started

::: {.incremental}
1. Follow [these directions](../../weeks/week-6-version-control.qmd) to install `git` and sign-up for a GitHub account
2. Follow [these directions](https://scribehow.com/viewer/Forking_the_Portfolio_Repository_and_Cloning_into_RStudio__TKGOvrrYQ1GMfYCafxercg?sharer_id=8cbd2b3a-5127-401d-a44b-5aeb0975f8ef&sharer_domain=gmail.com&add_to_team_with_invite=True) to fork a copy of the [Final Portfolio repository](https://github.com/atheobold/STAT331_portfolio_template). 
3. Start finding excerpts of code you wrote for the Labs or Challenges that fit
each learning target. 
4. [Sign-up for a time to meet with Dr. T during Week 7](https://docs.google.com/spreadsheets/d/1Lpstqy8YYs3MFzFNn2Kob7E289HyUJWxWpHkp1N_lJA/edit?usp=sharing)
:::

# Date + Time Variables

## Why are dates and times tricky?

When parsing dates and times, we have to consider complicating factors like...

-   Daylight Savings Time.
    -   One day a year is 23 hours; one day a year is 25 hours.
    -   Some places use it, some don't.
-   Leap years -- most years have 365 days, some have 366.
-   Time zones.

## `lubridate`

::::: columns
::: {.column width="80%"}
-   Convert a date-like variable ("May 8, 1995") to a date or date-time object.

-   Find the weekday, month, year, etc from a date-time object.

-   Convert between time zones.
:::

::: {.column width="20%"}
```{r}
#| fig-align: center
#| fig-alt: "The image shows the hex logo for the lubridate R package. The logo is a green hexagon with a stylized calendar in the center. The calendar has a small clock icon overlapping its bottom left corner, symbolizing time-related functions. The text 'lubridate' appears prominently below the calendar icon within the hexagon. Lubridate is commonly used in R for working with date and time data."

knitr::include_graphics("https://github.com/rstudio/hex-stickers/blob/main/thumbs/lubridate.png?raw=true")
```
:::
:::::

::: callout-note
The `lubridate` package **installs** and **loads** with the `tidyverse`. 
:::

<!-- ## `date-time` Objects -->

<!-- There are multiple **data types** for dates and times. -->

<!-- -   A date: -->
<!--     -   `date` or `Date` -->
<!-- -   A date and a time (identifies a unique instant in time): -->
<!--     -   `dtm` -->
<!--     -   `POSIXlt` -- stores date-times as the number of seconds since January 1, 1970 ("Unix Epoch") -->
<!--     -   `POSIXct` -- stores date-times as a list with elements for second, minute, hour, day, month, year, etc. -->

## Creating `date-time` Objects

::: {.midi}
From individual components:

```{r}
#| echo: true
#| code-line-numbers: false

make_date(year = 1995, month = 05, day = 08)
```
:::

. . .

::: {.midi}
From a string:

```{r}
#| echo: true
#| code-line-numbers: false

mdy("August 29, 1991")
```
:::

. . .

::: {.midi}
With a time zone:

```{r}
#| echo: true
#| code-line-numbers: false

dmy("29-August-1991", 
    tz = "America/Denver")
```

```{r}
#| echo: true
#| code-line-numbers: false

dmy_hms("29-August-1991 9:32:12", 
        tz = "America/Denver")
```
:::

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- #| code-line-numbers: false -->

<!-- as_datetime("91-08-29",  -->
<!--             format = "%y-%m-%d") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- #| code-line-numbers: false -->

<!-- parse_datetime("8/29/1991",  -->
<!--                format = "%m/%d/%Y") -->
<!-- ``` -->

<!-- ## Creating `date-time` Objects -->

<!-- ![](images/date_symbols.png){width="80%" fig-alt=""} -->

## Common Mistake with Dates

::: columns
::: {.column width="48%"}
```{r}
#| echo: true
#| code-line-numbers: false

as_datetime(2023-02-6)
```

:::

::: {.column width="3%"}
:::

::: {.column width="48%"}
```{r}
#| echo: true
#| code-line-numbers: false

my_date <- 2023-02-6
my_date
```
:::
:::

</br>

::: {.centered}
***What's wrong here?***
:::

<br>

. . .

Make sure you use quotes!

-   2,015 seconds $\approx$ 33.5 minutes

## Extracting `date-time` Components

```{r}
#| echo: true
#| code-line-numbers: false

bday <- ymd_hms("1989-01-14 12:03:12", 
                tz = "America/Denver")
bday
```

. . .

</br> 

::::: columns
::: column
::: {.midi}
```{r}
#| echo: true
#| code-line-numbers: false

year(bday)
month(bday)
day(bday)
hour(bday)
```
:::
:::

::: column
::: {.midi}
::: {.fragment}
```{r}
#| echo: true
#| code-line-numbers: false

wday(bday)

wday(bday, 
     label = TRUE, 
     abbr = FALSE)
```
:::
:::
:::
:::::

## Subtraction with `date-time` Objects

Doing subtraction gives you a `difftime` object. 

`difftime` objects do not always have the same units -- it depends on the scale of the objects you are working with.

## How old am I?

```{r}
#| echo: true
#| code-line-numbers: false

today() - mdy(01141989)
```

. . .

</br> 

How long did it take me to type this slide?

```{r}
#| echo: true
#| code-line-numbers: false

begin <- mdy_hms("10/13/2025 6:40:34")
finish <- mdy_hms("10/13/2025 6:43:11")

finish - begin
```

## Durations and Periods

::: columns
::: {.column width="48%"}
**Durations** will always give the time span in an **exact number of seconds**.

```{r}
#| echo: true
#| code-line-numbers: false

as.duration(
  today() - mdy(01141989)
            )
```

:::

::: {.column width="3%"}
:::

::: {.column width="48%"}
::: {.fragment}
**Periods** will give the time span in more approximate, but **human readable times**.

```{r}
#| echo: true
#| code-line-numbers: false

as.period(
  today() - mdy(01141989)
  )
```
:::
:::
:::

## Durations and Periods

::: columns
::: {.column width="40%"}
We can also **add** time to `date-time` objects:

-   `days()`, `years()`, etc. will add a **period** of time.
-   `ddays()`, `dyears()`, etc. will add a **duration** of time.
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
::: {.fragment}
Because durations use the **exact** number of seconds to represent days and years, you might get unexpected results. 

</br> 

When is is my 99th birthday?

```{r}
#| echo: true
#| code-line-numbers: false

mdy(01141989) + years(99)
```

```{r}
#| echo: true
#| code-line-numbers: false

mdy(01141989) + dyears(99)
```
:::
:::
:::

## Intervals of Time

::: {.midi}

Suppose American Airlines requires members to travel within 4 weeks before or
after their birthday to earn a "Birthday Bonus Flight."
:::

. . .

::: {.midi}
Well, we first need to make an interval of time around my birthday.

```{r}
#| echo: true
#| code-line-numbers: false

bonus_flight_window <- interval(
  bday - weeks(4),
  bday + weeks(4)
  )
```
:::

. . .

</br>

::: {.midi}

Then I can check if today is within this interval. 

```{r}
#| echo: true
#| code-line-numbers: false

today() %within% bonus_flight_window
```
:::


## Time Zones...

...are complicated! 

</br> 

Specify time zones in the form:

-   {continent}/{city} -- "America/Denver", "Africa/Nairobi"
-   {ocean}/{city} -- "Pacific/Auckland"

. . .

What time zone does R think I'm in?

```{r}
#| echo: true
#| code-line-numbers: false

Sys.timezone()
```

## Time Zones

::: {.midi}
You can change the time zone of a date in two ways:

```{r}
#| echo: true
#| code-line-numbers: false

x <- ymd_hms("2025-10-13 18:00:00", 
             tz = "Europe/Copenhagen")
```
:::

. . .

::: columns
::: {.column width="52%"}
`with_tz()`

::: {.small}
Keeps the instant in time the same, but modifies the representation based on the
new time zone

```{r}
#| echo: true
#| code-line-numbers: false

x |> 
  with_tz(tzone = "America/Los_Angeles")

x |> 
  with_tz(tzone = "Asia/Kolkata")
```
:::
:::

::: {.column width="3%"}
:::

::: {.column width="45%"}
::: {.fragment}
`force_tz()`

::: {.small}
Changes the instant in time by forcing a time zone change.

```{r}
#| echo: true
#| code-line-numbers: false

x |> 
  force_tz(tzone = "America/Los_Angeles")

x |> 
  force_tz(tzone = "Asia/Kolkata")
```
:::
:::
:::
:::

## Common Mistake with Dates

::: {.midi}
When you read data in or create a new date-time object, the default time zone (if not specified) is UTC (Universal Time Coordinated)*.  
:::

::: {.small}
*UTC is the same as GMT (Greenwich Mean Time)
:::

. . .

</br>

::: {.midi}
So, make sure you specify your desired time zone!

```{r}
#| echo: true
#| code-line-numbers: false

x <- mdy("11/20/1993")
tz(x)
```

```{r}
#| echo: true
#| code-line-numbers: false

x <- mdy("11/20/1993", 
         tz = "America/Los_Angeles")
tz(x)
```
:::



# PA 5.2: Jewel Heist

::: columns
::: {.column width="40%"}

:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](images/jewels.png){fig-alt="The image displays five colorful gemstones placed on a dark surface. Each gem has a distinct color and shape. A rectangular green gem (emerald-like) on the left. A round white gem (resembling a diamond) at the top. An oval pink gem in the center. An oval blue gem in the foreground. An oval yellow gem in the background on the right. The gems are cut and polished, reflecting light and showing their intricate facets. They appear to represent a variety of precious stones with vibrant colors."}
:::
:::

<!-- Just down the road in Montecito, CA several rare jewels went missing last fall. The jewels were stolen and replaced with fakes, but detectives have not been able to solve the case. They are now calling in a data scientist to help parse their clues. -->

<!-- Unfortunately, the date and time of the jewel heist is not known. You have been hired to crack the case. Use the clues below to discover the thief's identity. -->

## This activity will require knowledge of:

::: {.small}
- Converting time zones
- Extracting components of a date
- Filtering based on date components
- Making intervals of time
- Filtering values that fall into an interval
- Finding the duration between two dates
- Modulus division
:::

[**None of us have all these abilities. Each of us has some of these abilities.**]{.midi}


<!-- ## lubridate Resources -->

<!-- ::: columns -->
<!-- ::: {.column width="60%"} -->
<!-- Every group should have a **lubridate** cheatsheet! -->

<!-- ::: {.small} -->
<!-- **On the Front**:  -->

<!-- - **Middle Column** -- functions related to "getting components" of dates -->
<!-- - **Bottom Right** -- functions related to time zones -->
<!-- ::: -->

<!-- ::: {.fragment} -->
<!-- ::: {.small} -->
<!-- **On the Back**:  -->

<!-- - **Left Column** -- functions related to adding / subtracting "periods" to /  -->
<!-- from dates -->
<!-- - **Right Column** -- functions related to creating and using intervals of time -->
<!-- ::: -->
<!-- ::: -->
<!-- ::: -->

<!-- ::: {.column width="5%"} -->
<!-- ::: -->

<!-- ::: {.column width="35%"} -->
<!-- ![](images/lubridate-cheatsheet.png){fig-alt="The image is a cheat sheet for the lubridate R package, titled 'Dates and times with lubridate::CHEATSHEET.' It is packed with key information on working with dates and times using lubridate, displayed in a visually organized format."} -->
<!-- ::: -->
<!-- ::: -->

## Pair Programming Expectations

```{r}
#| echo: false
#| fig-alt: "A diagram shows a collaborative software development process in four stages arranged in a cycle. At the top, a woman speaks with the label 'VOCALIZE.' To the right, she points to a diagram with the label 'EXPLAIN.' At the bottom, a man types on a laptop with the label 'IMPLEMENT.' On the left, a computer monitor displays a bug symbol with the label 'DEBUG.' Arrows connect the stages in a loop: Vocalize → Explain → Implement → Debug → back to Vocalize."

knitr::include_graphics(here::here("group-activities", 
                                   "collab-process.png")
                        )
```

## External Resources

During the Practice Activity, you **are not** permitted to use Google or ChatGPT
for help. 

</br> 

You **are** permitted to use:

- today's handout, 
- the `lubridate` cheatsheet,
- the course slides, and 
- the course textbook

## Submission

> Submit the name of the thief to the Canvas Quiz.

- Each person will input the full name of the thief into the PA 5.2 quiz. 
- The person who last occupied the role of Computer will submit the link to your
group's Colab notebook.
  + Please don't forget to put your names at the top!

# 5-minute break

## Team Assignments - 9am

::: {.centered}
![](images/section-70-seats-pt2.png){width=75%}
:::

::: {.small}
The partner who has broken the most bones starts as the Talker!
:::

## Team Assignments - 12pm

::: {.centered}
![](images/section-71-seats-pt2.png){width=75%}
:::

::: {.small}
The partner who has broken the most bones starts as the Talker!
:::
