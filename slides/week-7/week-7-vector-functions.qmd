---
title: "Writing Vector Functions"
format: 
  revealjs:
      theme: [simple, ../style.scss]
      auto-stretch: false
editor: source
---

```{r}
#| include: false
#| message: false
#| label: set-up

library(tidyverse)
library(palmerpenguins)
library(countdown)

```

## Thursday, October 30

Today we will...

+ New Material
  + Function Basics
+ Practice writing functions!
  + `[]` Refresher
  + `seq_along()`
  + `if()` and `else if()` Refresher

  
+ PA 7: Writing Functions

+ Extra Slides for Lab 7
  + Variable Scope + Environment

# Functions

## Why write functions?

Functions allow you to automate common tasks!

+ We've been using functions since Day 1, but when we write our own, we can
**customize** them!
+ Have you found yourself copy-pasting code and only changing small parts?

## Why write functions?

**Writing functions has three big advantages over copy-paste:**

1. Your code is easier to read.
2. To change your analysis, simply change one function.
3. You avoid mistakes.


# Function Basics


## Function Syntax

<br>

![](images/syntax.png){width=90% fig-alt="Basic syntax of a function in R. The function 'func_name' is assigned using '<-' to 'function(func_arg1, func_arg2)'. The body of the function is enclosed in curly brackets. Inside the brackets, there is a placeholder comment labeled '# FUNCTION_BODY' and a 'return(func_value)' statement indicating the output of the function."}


## Function Syntax

![](images/func_structure.png){fig-alt="Illustration of R function syntax. The image explains the parts of a function in R using labeled arrows and colors. At the top, the name 'func_name' is assigned using '<-' to a function. An arrow points to 'func_name' with the label 'assign the function a NAME.' The keyword 'function' is highlighted, with an arrow labeled 'indicate we are creating a function.' The parentheses contain 'func_arg1, func_arg2,' which are labeled as 'specify ARGUMENTS of the function.' The body of the function is placed between curly brackets and labeled 'write the BODY of the function between curly brackets.' Finally, the 'return(func_value)' statement is labeled 'return a value as the OUTPUT of the function."}


## A (Very) Simple Function

</br>
</br>

::: {.large}
Write a function named `add_two()` that will add `2` to whatever number is
input. 
:::

```{r}
countdown(minutes = 3)
```


. . .

</br>

::: {.callout-tip}
# Compare Your Function with Your Neighbor

In what ways are your functions the same? In what ways do they differ?
:::

<!-- ::: {.midi} -->
<!-- ```{r my_fun} -->
<!-- #| echo: true -->
<!-- #| code-line-numbers: false -->

<!-- add_two <- function(x){ -->

<!--   return(x + 2) -->

<!-- } -->
<!-- ``` -->
<!-- ::: -->

## Function Names

The **name** of the function is chosen by the author.

::: {.midi}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

add_two <- function(x){
  
  return(x + 2)

}
```
:::

. . .

::: {.midi}
::: {.callout-caution}
## Function names have no inherent meaning.

The name you give to a function does not affect what the function does.

```{r}
#| echo: true
#| code-line-numbers: false

add_three <- function(x){
  return(x + 7)
}
```

```{r}
#| echo: true
add_three(5)
```
:::
:::

## Function Arguments 

The **argument(s)** of the function are chosen by the author.

+ Arguments are how we pass external values into the function.
+ They are temporary variables that only exist inside the function body.

. . .

:::: {.columns}
::: {.column width="50%"}
::: {.midi}
+ We give them general names:
  + `x`, `y`, `z` -- vectors
  + `df` -- data frame
  + `i`, `j` -- indices
:::
:::
::: {.column width="50%"}

<br>

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

add_two <- function(x){
  return(x + 2)
}
```

:::
::::

## Function Arguments 

What if we wanted to write a more general function, named `add_something()`. 
The function would take **two** inputs: 

1. `x` the vector to add to
2. `something` the value to add to `x`

How would your function change?

```{r}
countdown(minutes = 2)
```



## Function Arguments 

::: panel-tabset

### Required Arguments

::: {.midi}
If we **do not** supply a default value when *defining* the function, the
argument is **required** when *calling* the function.

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

add_something <- function(x, something){
  x + something
}
```
:::

</br> 

::: {.midi}
::: {.fragment}
::: columns
::: {.column width="50%"}
```{r}
#| code-line-numbers: false
#| echo: true

add_something(x = 2, 
              something = 3)
```

:::

::: {.column width="50%"}
```{r}
#| error: true
#| code-line-numbers: false
#| echo: true

add_something(x = 2)
```

:::
:::
:::
:::

### Optional Arguments

::: {.midi}
If we supply a **default** value when *defining* the function, the argument is
**optional** when *calling* the function.

```{r}
#| echo: true
#| code-line-numbers: false

add_something <- function(x, something = 2){
  return(x + something)
}
```
:::

</br>

::: {.midi}
::: {.fragment}
::: columns
::: {.column width="50%"}
```{r}
#| code-line-numbers: false
#| echo: true

add_something(x = 5, 
              something = 6)
```
:::

::: {.column width="50%"}
If a value is not supplied, `something` defaults to 2.

```{r}
#| error: true
#| code-line-numbers: false
#| echo: true

add_something(x = 5)
```
:::
:::
:::
:::
:::

## Body: `{  }`

The **body** of the function is where the action happens.

+ The body must be specified within a set of curly brackets.
+ The code in the body will be executed (in order) whenever the function is
called.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"

add_something <- function(x, something = 2){
  x + something
}
```


## Output: Last Value

Your function will *give back* what would normally *print out*...

```{r}
#| echo: true

add_something <- function(x, something = 2){
  x + something
}
```

<br>

:::: columns
::: column
```{r}
#| echo: true
#| code-line-numbers: false

7 + 2
```
:::
::: column
```{r}
#| echo: true
#| code-line-numbers: false

add_something(7)
```
:::
::::

. . .

</br>

...but some of us might prefer an explicit `return()`.

## Output: `return()`

If you are coming to R from a background in Python, C, or Java then an 
explicit return may feel more natural to you.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"

add_something <- function(x, something = 2){
  return(x + something)
}
```

## Function Style -- Using `return()`s

::: {.midi}
> ["Only use `return()` for early returns. Otherwise, rely on R to return the result of the last evaluated expression."](https://style.tidyverse.org/functions.html#return)
:::

. . .

</br> 

```{r}
#| code-line-numbers: false
#| echo: true

safe_square <- function(x) {
  if (!is.numeric(x)) return(NA)
  x^2
}

```

## Explicit Returns vs. Implicit Returns

::: {.small}
::: columns
::: {.column width="50%"}
::: {.fragment}
✅ Pros of Using `return()`

- Clarity and explicit intent
- Early returns / branching logic
- Consistency with other languages
:::

::: {.fragment}
⚠️ Cons of Using `return()`

- More typing / slightly less idiomatic use of R
- Can be overused in simple functions
- Can complicate control flow unnecessarily
:::
:::

::: {.column width="50%"}
::: {.fragment}
✅ Pros of Implicit Return (no `return()`)

- Concise and idiomatic
- Encourages "last expression" thinking
:::

::: {.fragment}
⚠️ Cons of Implicit Return

- Less obvious for beginners
- Harder to do early exits
:::
:::
:::
:::

## General Function Writing Advice

When you have a concept that you want to turn into a function...

::: {.incremental}
1. Write a simple **example** of the code without the function framework.

2. **Generalize** the example by assigning variables.

3. **Write** the code into a function.

4. **Call** the function on the desired arguments
:::

. . .

**This structure allows you to address issues as you go.**

# Let's Practice

<!-- make sure seq_along() is included -->
<!-- do a refresher of [] for vectors  -->
<!-- - using logical values  -->
<!-- - using indices -->
<!-- refresher on if() and else if() -->
<!-- include optional versus required arguments -->

## Base R Refresher 

::: {.midi}
- We can extract components of a vector using `[ ]`
  + The inputs can be:
      - logical values (`TRUE`, `FALSE`)
      - indices (e.g., `1`, `2`, `3`)
:::

. . .

::: {.midi}
- We can grab the indices of a vector using the `seq_along()` function

```{r}
#| echo: true
#| code-line-numbers: false

x <- 15:25

seq_along(x)
```
:::

## `above_average()`

::: {.midi}
> Goal: Keep only the elements of `x` greater than the mean.
:::

. . .

::: {.midi}
Fill in the code to create a function named `above_average()`. The
function should keep only the elements of `x` greater than the mean.

```{r}
#| echo: true

above_average <- function(x) {
  # Step 1: Compute mean of x
  
  
  # Step 2: Subset x to keep only values > mean
  
  
  # Step 3: Return the result
  
}
```
:::

## Option 1: Using Logical Values

::: {.midi}
**Step 1:** Find locations where values of `x` are larger than the mean

```{r}
#| echo: true
#| code-line-numbers: false

x > mean(x)
```
:::

. . .

::: {.midi}
**Step 2:** Use this output to extract the desired values from `x`

```{r}
#| echo: true
#| code-line-numbers: false

x[x > mean(x)]
```
:::

. . .

::: {.midi}
**Step 3:** Make a function

```{r}
#| echo: true
#| code-line-numbers: false

above_average <- function(x) {
  x[x > mean(x)]
}
```
:::

## Option 2: Using Indices

::: {.midi}
**Step 1:** Find indices where values of `x` are larger than the mean

```{r}
#| echo: true
#| code-line-numbers: false

which(x > mean(x))
```
:::

. . .

::: {.midi}
**Step 2:** Use this output to extract the desired values from `x`

```{r}
#| echo: true
#| code-line-numbers: false

x[which(x > mean(x))]
```
:::

. . .

::: {.midi}
**Step 3:** Make a function

```{r}
#| echo: true
#| code-line-numbers: false

above_average <- function(x) {
  x[which(x > mean(x))]
}
```
:::

## `every_third()`

> Goal: Return every third element from a vector.

. . .

::: {.midi}
Write down the steps you would need to create a function named `every_third()` 
that takes in a vector and returns every third element from that vector 
(i.e., indices 1, 4, 7, 10, etc.). 

**Think about:**

- What inputs the function should take.
- How to identify which positions in the vector are "every third."
- How to select those elements from the vector.

:::

```{r}
countdown(minutes = 3)
```


## Generate Indices

> Represent the indices (positions) of each element of `x`.

. . .

```{r}
#| echo: true
#| code-line-numbers: false

x

seq_along(x)
```

## Identify Every Third Position

> Identify which positions are "every third."

. . .

::: {.midi}

| index | Remainder (`index %% 3`) | Keep? |
| :---: | :----------------------: | :---: |
|   1   |             1            |   ✅   |
|   2   |             2            |   ❌   |
|   3   |             0            |   ❌   |
|   4   |             1            |   ✅   |
|   5   |             2            |   ❌   |
|   6   |             0            |   ❌   |
|   7   |             1            |   ✅   |

:::

## Identify Every Third Position

> Identify which positions are "every third."

```{r}
#| echo: true
#| code-line-numbers: false

seq_along(x) %% 3 == 1
```

## Subset `x`

> Grab the elements of `x` we want to keep. 

```{r}
#| echo: true
#| code-line-numbers: false

x
```

</br>

```{r}
#| echo: true
#| code-line-numbers: false

x[ 
  seq_along(x) %% 3 == 1
]
```

## Make it into a function!

```{r}
#| echo: true
#| code-line-numbers: false

every_third <- function(x) {
  
  x[ 
  seq_along(x) %% 3 == 1
  ]

  }
```

# [PA 7: Writing Functions](../../group-activities/week-7/PA-7-functions.qmd)

![](images/number-tiles.png){fig-alt=""}

## PA 7

::: {.midi}
You will write several small functions, then use them to unscramble a message. 
Many of the functions have been started for you, but **none** of them are
complete as is.
:::

. . .

::: columns
::: {.column width="55%"}
::: {.small}
This activity will require knowledge of:

- Summary functions
- Function documentation (for optional arguments)
- Function syntax
- modulus division (and remainders)
- `if ()` & `else if()` statements
- Using `[]` and logical values to extract elements of a vector
- Negating logical statements
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
</br>
</br>

[**None of us have all these abilities. Each of us has some of these abilities.**]{.midi}

:::
:::

<!-- ## Base R Resources -->

<!-- ::: columns -->
<!-- ::: {.column width="60%"} -->
<!-- Every group should have a **base R** cheatsheet! -->

<!-- ::: {.fragment} -->
<!-- ::: {.small} -->
<!-- **On the front middle**: -->

<!-- - ***Selecting Vectors*** can refresh your memory on using `[]` to extract -->
<!-- elements of a vector -->
<!-- ::: -->
<!-- ::: -->

<!-- ::: {.fragment} -->
<!-- ::: {.small} -->
<!-- **On the front right**: -->

<!-- - ***If Statements*** can help you write conditional checks / returns for your -->
<!-- functions -->
<!-- - ***Functions*** can help you remember the syntax for creating a function -->
<!-- ::: -->
<!-- ::: -->
<!-- ::: -->

<!-- ::: {.column width="5%"} -->
<!-- ::: -->

<!-- ::: {.column width="35%"} -->
<!-- ![](images/base-r-cheatsheet.png){fig-alt="A Base R Cheat Sheet with various R programming syntax and examples. It covers topics such as reading and writing data (e.g., read.csv, write.csv), accessing help with R functions (e.g., ?mean), using control structures like for loops and if statements, defining functions, vector operations, using libraries, and working with different data types like lists, matrices, and data frames. There are examples of matrix operations, conditions, statistical functions (e.g., mean, sd), and plotting basics (e.g., plot, hist). The cheat sheet includes tips on environment management and converting between data types."} -->
<!-- ::: -->
<!-- ::: -->

## Pair Programming Expectations

```{r}
#| echo: false
#| fig-alt: "A diagram shows a collaborative software development process in four stages arranged in a cycle. At the top, a woman speaks with the label 'VOCALIZE.' To the right, she points to a diagram with the label 'EXPLAIN.' At the bottom, a man types on a laptop with the label 'IMPLEMENT.' On the left, a computer monitor displays a bug symbol with the label 'DEBUG.' Arrows connect the stages in a loop: Vocalize → Explain → Implement → Debug → back to Vocalize."
#| out-width: 80%

knitr::include_graphics(here::here("group-activities", 
                                   "collab-process.png")
                        )
```

## External Resources

During the Practice Activity, you **are not** permitted to use Google or ChatGPT
for help. 

</br> 

You **are** permitted to use:

- today's handout, 
- the course slides, 
- the `base R` cheatsheet, and 
- the course textbook

## Submission

> Submit the name of the television show the six numbers are asssociated with.

- Each person will input the full name of the TV show into the PA 7 quiz. 
- The person who last occupied the role of Typer will submit the link to your
group's Colab notebook.
  + Please don't forget to put your names at the top!

# 5-minute break

## Team Assignments - 9am

::: {.centered}
![](images/section-70-seats-pt2.png){width=75%}
:::

::: {.small}
The partner who has the most siblings starts as the Talker!
:::

## Team Assignments - 12pm

::: {.centered}
![](images/section-71-seats-pt2.png){width=75%}
:::

::: {.small}
The partner who has the most siblings starts as the Talker!
:::

# Lab 7 Bonus Slides

## Lab 7 & Challenge 7: Functions + Fish

::: {.centered}
![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/blackfoot_river.jpg?raw=true){fig-alt="A serene scene of the Blackfoot River in Montana, with a small raft carrying two people navigating the gentle current. The river winds through a landscape of rugged, rocky shores and lush, green pine forests. Rolling hills and distant mountains frame the background under a lightly clouded sky."}
:::

## Input Validation


When a function requires an input of a specific data type, check that the supplied argument is valid.

::: panel-tabset

### [`stopifnot()`]{.midi}
::: {.midi}

```{r}
#| echo: true
#| error: true
#| code-line-numbers: "2"
add_something <- function(x, something){
  stopifnot(is.numeric(x))
  return(x + something)
}

add_something(x = "statistics", something = 5)
```
:::

### [`if() + stop()`]{.midi}

::: {.midi}
```{r}
#| echo: true
#| error: true
#| code-line-numbers: "2-4"
add_something <- function(x, something){
  if(!is.numeric(x)){
    stop("Please provide a numeric input for the x argument.")
  }
  return(x + something)
}

add_something(x = "statistics", something = 5)
```
:::

### [Multiple validations]{.midi}

::: {.midi}
How would you modify the previous code to validate **both** `x` and 
`something`? 

Meaning, the function should check if **both** `x` and `something` are numeric. 
:::
:::

## Multiple Validations

::: panel-tabset

## Option 1: `if()` + `stop()`

```{r}
#| echo: true
#| error: true
#| code-line-numbers: "2-4"

add_something <- function(x, something){
  if(!is.numeric(x) | !is.numeric(something)){
    stop("Please provide numeric inputs for both arguments.")
  }
  return(x + something)
}

add_something(x = 2, something = "R")
```

## Option 2: `stopifnot()`

```{r}
#| echo: true
#| error: true
#| code-line-numbers: "2"

add_something <- function(x, something){
  stopifnot(is.numeric(x), is.numeric(something))
  return(x + something)
}

add_something(x = 2, something = "R")
```
:::

# Variable Scope + Environment


## Variable Scope

The location (environment) in which we can find and access a variable is called its **scope**.

+ We need to think about the scope of variables when we write functions.
+ What variables can we access **inside** a function?
+ What variables can we access **outside** a function?


## Global Environment

+ The top right pane of Rstudio shows you the **global environment**.
  + This is the *current state* of all objects you have created.
  + These objects can be accessed **anywhere**.

```{r}
#| fig-align: center
#| out-width: 80%
#| fig-alt: "A screenshot of the Environment tab in the RStudio environment, which displays the set of objects created by the user that are stored in the global environment and can be used for analysis. This is where we've see the datasets we read in stored!"

knitr::include_graphics("images/environment.jpg")
```


## Function Environment

+ The code inside a function executes in the **function environment**.
  + Function arguments and any variables created inside the function only exist
  inside the function.
    + They **disappear** when the function code is complete.
+ What happens in the function environment **does not affect** things in the
global environment.


## Function Environment

We **cannot** access variables created inside a function outside of the function.

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

add_two <- function(x) {
  my_result <- x + 2
  return(my_result)
}
```

</br>

::: columns
::: {.column width="45%"}
```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

add_two(9)
```

:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
::: {.fragment}
```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

my_result
```
:::
:::
:::

## Name Masking

::: {.midi}
Name masking occurs when an object in the *function environment* has the
**same name** as an object in the *global environment*.

::: columns
::: {.column width="45%"}
```{r}
#| echo: true
#| code-line-numbers: "2"

add_two <- function(x) {
  my_result <- x + 2
  return(my_result)
}
```

:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
```{r}
#| echo: true
#| code-line-numbers: false

my_result <- 2000
```
:::
:::
:::

. . .

</br>

::: {.midi}
The `my_result` created **inside** the function is different from the
`my_result` created **outside**.

:::: columns
::: column

```{r}
#| echo: true
#| code-line-numbers: false

add_two(5)
```
:::
::: column
```{r}
#| echo: true
#| code-line-numbers: false

my_result
```
:::
::::
:::

## Dynamic Lookup

::: {.midi}
Functions look for objects FIRST in the function environment and SECOND in the
global environment.

:::: columns
::: column

+ If the object doesn't exist in either, the code will give an error.

```{r}
#| error: true
#| echo: true
#| code-line-numbers: false

add_two <- function() {
  return(x + 2)
}

add_two()
```
:::
::: column
::: {.fragment}

+ If it doesn't exist in the function environment, then it will look in the 
global environment

```{r}
#| echo: true
#| code-line-numbers: false

x <- 10

add_two()
```
:::
:::
::::
:::

. . .

::: {.small}
::: {.callout-warning}
## It is not good practice to rely on global environment objects inside a function!
:::
:::