---
title: Iterating over Multiple Inputs"
format: revealjs
execute: 
  eval: false
---

Today we will...

-   Midterm Exam (extra point on SA and OEA)
-   New Material
    -   The `map2()` Family
-   Work Time
    -   Lab 8: The Twelve Days of Christmas
    -   PC3: Project Proposal + Data

## The `map2()` Family

These functions allow us to iterate over **two** lists at the same time.

![](images/map2.png){width="80%)"}

## The `map2()` Family

These functions include:

-   `map2()`
-   `map2_chr()`
-   `map2_lgl()`
-   `map2_int()`
-   `map2_dbl()`

Each function has **two** list arguments, denoted `.x` and `.y`, and a function argument.

## Small `map2()` Example

Find the minimum.

```{r}
a <- c(1, 2, 4)
b <- c(6, 5, 3)

map2_chr(a, b,
         ~ str_glue("The minimum of {.x} and {.y} is {min(.x, .y)}."))
```

## Big `map2()` Example

::: panel-tabset
### The Problem

-   Regress vehicle MPG on vehicle weight.
-   Do the regression *separately* for 4-, 6-, and 8-cylinder vehicles.

### Split Data

```{r}
(by_cyl <- mtcars |>
   split(mtcars$cyl))
```

### Fit Model

Fit a linear regression model to each subset of the data.

-   Regress vehicle MPG on vehicle weight.
-   We are fitting **three** separate models.

```{r}
mods <- by_cyl |>
  map(~ lm(mpg ~ wt, data = .x))
```

### Predict

Predict vehicle MPG from observed vehicle weight.

-   The `predict()` function needs **two** inputs.

```{r}
map2(mods, by_cyl, predict)
```
:::

## `nest()` and `unnest()`

-   We can pair functions from the `map()` family very nicely with two `tidyr` functions: `nest()` and `unnest()`.
-   These allow us to easily map functions onto subsets of the data.

## `nest()`

**Nest** subsets of the data (as tibbles) inside a tibble.

-   Specify the column(s) to create subsets on.

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
mtcars |> 
  nest(cyl_data = -cyl)
```
:::

::: {.column width="50%"}
```{r}
mtcars |> 
  nest(cg_data = -c(cyl,gear))
```
:::
:::

## `unnest()`

**Un-nest** the data by row binding the subsets back together.

-   Specify the column(s) that contains the subsets.

```{r}
#| echo: true
mtcars |> 
  nest(cyl_data = -cyl) |> 
  unnest(cyl_data) |> 
  head()
```

## Big `map2()` Example (Again)

::: panel-tabset
### `nest()`

```{r}
mtcars |>
  nest(cyl_data = -cyl)
```

### `lm()`

```{r}
mtcars |>
  nest(cyl_data = -cyl) |>
  mutate(mod = map(cyl_data, 
                   ~ lm(mpg ~ wt, data = .x)))
```

### `predict()`

```{r}
mtcars |>
  nest(cyl_data = -cyl) |>
  mutate(mod = map(cyl_data, 
                   ~ lm(mpg ~ wt, data = .x)),
         pred_mpg = map2(.x = mod,
                         .y = cyl_data, 
                         .f = ~ predict(object = .x, data = .y)))
```

### `unnest()`

```{r}
mtcars |>
  nest(cyl_data = -cyl) |>
  mutate(mod = map(cyl_data, 
                   ~ lm(mpg ~ wt, data = .x)),
         pred_mpg = map2(.x = mod,
                         .y = cyl_data,
                         .f = ~ predict(object = .x, data = .y))) |> 
  select(-mod) |> 
  unnest(cols = c(cyl_data, pred_mpg)) |> 
  select(cyl, wt, mpg, pred_mpg)
```
:::

## [Lab 8: The Twelve Days of Christmas](https://zoerehnberg.github.io/STAT331-S23/lab_assignments/lab8/LA8_fprogram.html)

1.  Write a `sing_day()` function.

::: callout-tip
-   Start with a small example and test it on a single day **outside of the function**.
-   `str_flatten()` might be useful -- find its arguments in the documentation.
:::

2.  Iterate your `sing_day()` function over all days.
3.  Style your output!

## To do...

-   **Lab 8: The Twelve Days of Christmas**
    -   Due Saturday, 5/25 at 11:59pm.
-   **Project Proposal + Data**
    -   Due Tuesday, 5/28 at 11:59pm.
-   Read **Chapter 9: Regression & Simulation**
    -   Check-in 9.1 & 9.2 due Tuesday, 5/28 at 10:00am.
