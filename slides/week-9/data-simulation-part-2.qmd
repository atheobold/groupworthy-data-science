---
title: "Using `map()` to Simulate Data"
format: 
  revealjs:
      theme: [simple, ../style.scss]
      auto-stretch: false
editor: source
execute:
  echo: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)

set.seed(435)

fake_data <- tibble(names   = charlatan::ch_name(1000),
        height  = rnorm(1000, mean = 67, sd = 3),
        age     = runif(1000, min = 15, max = 75),
        measure = rbinom(1000, size = 1, prob = 0.6)) |> 
  mutate(supports_measure_A = ifelse(measure == 1, "yes", "no"))

```

Today we will...

-   New Material
    -   The `map2()` Family
    -   `nest()`ing Data Frames
-   Work Time
    -   Lab 9

## Simulate Multiple Datasets

::: panel-tabset

### Function

Write a function to simulate height data from a population with some mean and SD height.

```{r}
#| code-line-numbers: false

ht_func <- function(n = 200, avg, std){
  tibble(person = 1:n,
         ht = rnorm(n = n, mean = avg, sd = std))
}

ht_func(n = 5, avg = 66, std = 3)
```

### Parameters

Create a mean and SD height for each population.

```{r}
expand_grid(mean_ht = seq(from = 60, to = 78, by = 6),
            std_ht  = c(3, 6))
```

### Simulate

Simulate datasets with different mean and SD heights.

```{r}
#| code-fold: true

crossing(mean_ht = seq(from = 60, to = 78, by = 6),
         std_ht  = c(3, 6)
         ) |> 
 mutate(ht_data = pmap(.l = list(avg = mean_ht, std = std_ht), 
                       .f = ht_func
                       )
        ) |> 
  unnest(cols = ht_data) |> 
  slice_sample(n = 10)
```

## `nest()` and `unnest()`

-   We can pair functions from the `map()` family very nicely with two `tidyr`
functions: `nest()` and `unnest()`.
-   These allow us to easily map functions onto subsets of the data.

## `nest()`

**Nest** subsets of the data (as tibbles) inside a tibble.

-   Specify the column(s) to create subsets on.

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
mtcars |> 
  nest(cyl_data = -cyl)
```
:::

::: {.column width="50%"}
```{r}
mtcars |> 
  nest(cg_data = -c(cyl,gear))
```
:::
:::

## `unnest()`

**Un-nest** the data by row binding the subsets back together.

-   Specify the column(s) that contains the subsets.

```{r}
#| echo: true
mtcars |> 
  nest(cyl_data = -cyl) |> 
  unnest(cyl_data) |> 
  head()
```


### Plot

Consider the samples simulated from each population.

```{r}
#| echo: false
fake_ht_data <- expand_grid(mean_ht = seq(from = 60, to = 78, by = 6),
                          std_ht  = c(3, 6)) |> 
  mutate(ht_data = pmap(list(avg = mean_ht,
                             std  = std_ht),
                        ht_func)) |>
  unnest(cols = c(ht_data))
```

```{r}
#| code-fold: true
#| fig-width: 8
#| fig-height: 4
#| fig-align: center
fake_ht_data |> 
  ggplot(aes(x = ht)) +
  geom_histogram(color = "white") +
  facet_grid(std_ht ~ mean_ht) +
  labs(x = "Height (in)",
       y = "",
       subtitle = "Frequency",
       title = "Simulated Height Data from 8 Populations")
```
:::

## Draw a Random Sample

Use `sample()` to take a random sample of values from a vector.

```{r}
my_vec <- c("dog", "cat", "bunny", "horse", "goat", "chicken")

sample(x = my_vec, size = 3)

set.seed(1)
sample(x = my_vec, size = 5, replace = T)
```


## Draw a Random Sample

Use `sample_n()` to take a random sample of observations (rows) from a dataset.

```{r}
fake_data |> 
  sample_n(size = 3)
```


## Example: Birthday Simulation

Suppose there is a group of 50 people.

+ Simulate the approximate probability that at least two people have the same birthday (same day of the year, not considering year of birth or leap years).


## Example: Birthday Simulation

Write a function to ...

+ ... simulate the birthdays of 50 people.
+ ... count how many birthdays are shared.
+ ... return whether or not a shared birthday exists.

```{r}
bDays <- function(n = 50){
  bday_data <- tibble(person = 1:n,
                      bday   = sample(1:365, size = n, replace = T))
  
  double_bdays <- bday_data |> 
    count(bday) |> 
    filter(n >= 2) |> 
    nrow()
  
  return(double_bdays > 0)
}
```


## Example: Birthday Simulation

Use a `map()` function to simulate 1000 datasets.

+ What proportion of these datasets contain at least two people with the same birthday?

```{r}
sim_results <- map_lgl(.x = 1:1000,
                       .f = ~ bDays(n = 50))

sum(sim_results)/1000
```





## In-line Code

We can automatically include code output in the written portion of a Quarto document using `` `r ` ``.

+ This ensures reproducibility when you have results from a random generation process.

```{r}
my_rand <- rnorm(1, mean = 0, sd = 1)
my_rand
```

Type this: `` My random number is `r knitr::inline_expr("my_rand")`. ``

To get this: My random number is `r my_rand`.

# [Lab 9: Baby Names](https://zoerehnberg.github.io/STAT331-S23/lab_assignments/lab9/LA9_regression.html)
