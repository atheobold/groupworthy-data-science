---
title: "Debugging Errors!"
format: revealjs
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(flair)
```

# Troubleshooting Errors!

# Syntax Errors

## Did you leave off a parenthesis?

seq<span style="background-color:#ffff7f">(</span>from = 1, to = 10, by = 1

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false
seq(from = 1, to = 10, by = 1
```

. . .

```{r}
#| echo: true
#| code-line-numbers: false
seq(from = 1, to = 10, by = 1)
```

## Did you leave off a comma?

seq(from = 1, to = 10 <span style="background-color:#ffff7f">by</span> = 1)

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false
seq(from = 1, to = 10 by = 1)
```

. . .

```{r}
#| echo: true
#| code-line-numbers: false
seq(from = 1, to = 10, by = 1)
```

## Did you make a typo? Are you using the right names?

<span style="background-color:#ffff7f">sequence</span>(from = 1, to = 10, by = 1)

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false
sequence(from = 1, to = 10, by = 1)
```

. . .

```{r}
#| echo: true
#| code-line-numbers: false

seq(from = 1, to = 10, by = 1)
```

# Object Type Errors

## Are you using the right _input_ that the function expects?

sqrt(<span style="background-color:#ffff7f">'1'</span>)

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

sqrt('1')
```

. . .

```{r}
#| echo: true
#| code-line-numbers: false

sqrt(1)
```

## Are you expecting the right _output_ of the function?

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

my_obj <- seq(from = 1, to = 10, by = 1)

my_obj(5)
```

. . .

```{r}
#| echo: true
#| code-line-numbers: false

my_obj[5]
```

# Errors + Warnings + Messages

## Messages

Just because you see scary red text, this does **not** mean something went wrong! This is just **R** communicating with you.

. . .

+ For example, you will often see:

```{r}
#| echo: true
#| message: true
#| code-line-numbers: false
library(lme4)
```

## Warnings

Often, **R** will give you a **warning**.

+ This means that your code *did* run... 

+ ...but you probably want to make sure it succeeded.

. . .

**Does this look right?**

```{r}
#| echo: true
#| warning: true
#| code-line-numbers: false
my_vec <- c("a", "b", "c")

my_new_vec <- as.integer(my_vec)
```

. . .

```{r}
#| echo: true
#| code-line-numbers: false
my_new_vec
```

## Errors

If the word **Error** appears in your message from **R**, then you have a problem.

+ This means your code **could not run**!

. . .

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false
my_vec <- c("a", "b", "c")

my_new_vec <- my_vec + 1
```

# Parlez-vous ERROR?

## **R** says...

> Error: Object `some_obj` not found.

. . .

It *probably* means...

> You haven't run the code to create `some_obj`  OR you have a typo in the name!

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false
some_ojb <- 1:10

mean(some_obj)
```


## **R** says...

> Error: Object of type 'closure' is not subsettable.

. . .

It *probably* means...

> Oops, you tried to use square brackets on a function

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false
mean[1, 2]
```


## **R** says...

> Error: Non-numeric argument to binary operator.

. . .

It *probably* means...

> You tried to do math on data that isn't numeric.

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false
"a" + 2
```

## What if none of these solved my error?

1. Look at the help file for the function!

2. When all else fails, **Google** your error message.

- Leave out the specifics.

- Include the function you are using.

## Try it...

**What's wrong here?**

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

matrix(c("a", "b", "c", "d"), num_row = 2)
```