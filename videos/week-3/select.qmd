---
title: "Next Steps -- Selecting Columns"
format: revealjs
execute: 
  eval: false
---

```{r, echo = FALSE, message = FALSE}
library(tidyverse)
library(flair)

cereals <- read_csv("cereals.csv") %>% 
  mutate(type = as_factor(type), 
         mfr = as_factor(mfr))
```

.large\[Selecting\]

Verb: `select()`

We **select** which variables we would like to remain in the dataset.

```{r}
select(cereals, 
       name, mfr, calories, cups)
       
```

------------------------------------------------------------------------

.larger\[Selecting a Range of Columns\]

You can use the `:` to select a sequence of columns!

```{r range, eval = FALSE, echo = FALSE}
select(cereals, 
       name:calories)
```

```{r, echo = FALSE}
decorate("range", eval = FALSE) %>% 
  flair(pattern = ":")
```

------------------------------------------------------------------------

.larger\[Omitting Columns\]

You can remove columns from the dataset using a `-`.

```{r omit, eval = FALSE, echo = FALSE}
select(cereals, 
       -rating)
```

```{r, echo = FALSE}
decorate("omit", eval = FALSE) %>% 
  flair(pattern = "-")
```

------------------------------------------------------------------------

.larger\[Reordering\]

You can reorder the columns in the dataset inside of `select()`!

```{r}
select(cereals, name, rating, mfr, type, calories, cups, weight, 
       everything())
```

------------------------------------------------------------------------

.larger\[Handy Helpers\]

-   `:`
-   `-`
-   `everything()`
-   `starts_with()`
-   `ends_with()`
-   `contains()`

------------------------------------------------------------------------

.large\[A Note on Renaming Columns\]

-   You can use `select()` to rename, but all columns not included will be deleted!
    -   Using the `rename()` function is easier!

```{r}
rename(cereals, temp = type)
```
