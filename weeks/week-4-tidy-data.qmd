---
title: "Tidy Data"
---

## Tidy Data

Data can be formatted in what are often referred to as *wide format* or *long format*. Wide format data has variables spread across columns and typically uses less space to display. This format is how you would typically choose to present your data as there is far less repetition of labels and row elements. Long format data is going to have each variable in a column and each observation in a row; this is likely not the most compact form of the data.

Long formatted data is often what we call **tidy data** - a specific format of data in which each *variable* is a *column*, each *observation* is a *row* and each type of observational unit forms a table (or in R, a data frame).

```{r}
#| echo: false
#| eval: false
#| fig-cap: "What is tidy data? Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
#| fig-alt: "Stylized text providing an overview of Tidy Data. The top reads “Tidy data is a standard way of mapping the meaning of a dataset to its structure. - Hadley Wickham.” On the left reads “In tidy data: each variable forms a column; each observation forms a row; each cell is a single measurement.” There is an example table on the lower right with columns ‘id’, ‘name’ and ‘color’ with observations for different cats, illustrating tidy data structure."
knitr::include_graphics("images/tidy-data-1.jpg")
```

::: ex
### Same data, different layouts {.unnumbered}

Can you determine which of the following data sets follows the tidy data format?

::: panel-tabset
#### Option 1: {.unnumbered}

| Name             | Treatment A | Treatment B |
|------------------|-------------|-------------|
| Brian Boatwright | NA          | 18          |
| Trenna Porras    | 4           | 1           |
| Hannaa Kumar     | 6           | 7           |

#### Option 2: {.unnumbered}

| Treatment | Brian Boatwright | Trenna Porras | Hannaa Kumar |
|-----------|------------------|---------------|--------------|
| A         | NA               | 4             | 6            |
| B         | 18               | 1             | 7            |

#### Option 3: {.unnumbered}

| Name             | Treatment | Measurement |
|------------------|-----------|-------------|
| Brian Boatwright | A         | NA          |
| Trenna Porras    | A         | 4           |
| Hannaa Kumar     | A         | 6           |
| Brian Boatwright | B         | 18          |
| Trenna Porras    | B         | 1           |
| Hannaa Kumar     | B         | 7           |

#### Solution {.unnumbered}

**Option 3** follows the tidy data format since each variable (`Name`, `Treatment`, and `Measurement`) belong to their own columns and each observation taken is identified by a single row.
:::
:::

Data frames are a specific object type in R, `data.frame()`, and can be [indexed the same as matrices](#indexing-matrices). It may be useful to actually look at your data before beginning to work with it to see the format of the data. The following functions in R help us learn information about our data sets:

-   `class()`: outputs the object type
-   `names()`: outputs the variable (column) names
-   `head()`: outputs the first 6 rows of a dataframe
-   `glimpse()` or `str()`: output a transpose of dataframe or matrix; shows the data types
-   `summary()` outputs 6-number summaries or frequencies for all variables in the data set depending on the variables data type
-   `data$variable`: extracts a specific variable (column) from the data set

You may also choose to click on the data set name in your Environment window pane in R and the data set will pop up in a new tab in the script pane.

<details class="ex">

<summary>Working with data sets in `R`</summary>

The `cars` data set is a default data set that lives in R (for examples like this!).

```{r}
# outputs the class of the cars data set (data.frame)
class(cars)

# outputs the names of the variables included in the cars data set (speed, dist)
names(cars)

# outputs the first six rows of the cars data set
head(cars)

# outputs
summary(cars)

# outputs the second row of the cars data set
cars[2,]

# outputs the first column of the cars data set as a vector
cars[,1]

# outputs the speed variable of the cars data set as a vector (notice this is the same as above)
cars$speed
```

:::

</details>

In a perfect world, all data would come in the right format for our needs, but this is often not the case. We will spend the next few weeks learning about how to use R to reformat our data to follow the **tidy data** framework and see why this is so important. For now, we will work with nice clean data sets but you should be able to identify when data follows a tidy data format and when it does not.

::: my-opinion
#### Wait. So is it Tidy format?

The concept of tidy data is useful for mapping variables from the data set to elements in a graph, specifications of a model, or aggregating to create summaries. However, what is considered to be "tidy data" format for one task, might not be in the correct "tidy data" format for a different task. It is important for you to consider the end goal when restructuring your data.

Part of this course is building the skills for you to be able to map your data operation steps from an original data set to the correct format (and output).
:::
