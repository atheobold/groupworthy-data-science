---
title: "Week 1, Part 3: Version Control with Git and GitHub"
execute:
  warning: false
  message: false
bibliography: references.bib
number-sections: true
number-depth: 2
editor: source
---

```{r}
#| include: false
#| label: set-up

library(knitr)
library(kableExtra)
library(tidyverse)
```

#### üìñ Reading: 60-75 minutes

#### üìΩÔ∏è  Videos: 0 minute(s)

#### ‚úÖ Check-ins: 4


## Objectives

Most of this section is either heavily inspired by Happy Git and Github for the
UseR [@bryanHappyGitGitHub2021] or directly links to that book. 

+ Recognize the benefits of using version control to improve your coding
practices and workflow.
+ Identify git / GitHub as a version control platform (and helper).
+ Install git onto your computer and register for a GitHub account
+ Start applying version control practices to your workflow.

# What is Version Control?

Version control is a system that (1) allows you to store your files in the
cloud, (2) track change in those files over time, and (3) share your files with
others.

### üìñ Required Reading: [Big Picture](https://happygitwithr.com/big-picture)

# Git

::: columns
::: {.column width="40%"}
Git is a **version control system** - a structured way for tracking changes to
files over the course of a project that may also make it easy to have multiple
people working on the same files at the same time. Git manages a collection of
files in a structured way---like "track changes" in Microsoft Word or version
history in Google Docs, but much more powerful.

:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](https://www.phdcomics.com/comics/archive/phd101212s.gif){width="50%" fig-alt=""}

:::
:::

If you are working alone, you will benefit from adopting version control because
it removes the need to add `_final.qmd` or `_final_finalforreal.qmd` to the end
of your file names. However, most of us work in collaboration with other people
(or will have to work with others eventually), so one of the goals of this
program is to teach you how to use git because it is a useful tool that will
make you a better collaborator. 

In data science programming, we use git for a similar, but slightly different
purpose. We use it to keep track of changes not only to code files, but to data
files, figures, reports, and other essential bits of information. 

### Git Basics

::: columns
::: {.column width="50%"}
Git tracks changes to each file that it is told to monitor, and as the files
change, you provide short labels describing what the changes were and why they
exist (called "**commits**"). The log of these changes (along with the file
history) is called your **commit history**. 

When writing papers, this means you can cut material out freely, so long as the
paper is being tracked by git---you can always go back and get that paragraph
you cut out if you need to. You also don't have to rename files---you can
confidently save over your old files, so long as you remember to commit
frequently. 

### üìñ Required Reading: [Install Git](https://happygitwithr.com/install-git)

:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
![](images/week-1/git.png){fig-alt="Person 1: 'This is GIT. It tracks collaborative work on projects through a beautiful distributed graph theory tree model'. Person 2: 'Cool, How do we use it?' Person 1: 'No Idea. Just memorize these shell commands and type them to sync up. If you get errors, save your work elsewhere, delete the project, and download a fresh copy.'"}
:::
:::


### ‚úÖ Check-in 1.6:  Install Git

We will be working with Git/GitHub every week for the next 10 weeks, starting 
this week! To be prepared for class, follow the instructions in the above
reading to install Git onto your computer. 

<!-- Change to a screenshot they need to submit -->
Once you have installed Git, tell me "yes" in the Canvas Quiz.

# GitHub

Git by itself is nice enough, but where git really becomes amazing is when you
combine it with GitHub---an online service that makes it easy to use git across
many computers, share information with collaborators, publish to the web, and
more. Git is great, but GitHub is ... essential.

Similar to the differences between R and RStudio, git is a program that runs on
your machine which includes a language for monitoring changes to specific 
files (similar to a programming language like R). GitHub is a website that hosts
people's git repositories (similar to a IDE like RStudio). You can use git
without GitHub (like using R without RStudio), but you can't use GitHub without
git. 

If you want, you can hook git up to GitHub, and make a copy of your local git
repository that lives in the cloud. Then, if you configure things correctly,
your local repository will talk to GitHub without too much trouble. Using
Github with git allows you to **easily make a cloud backup of your important
code**, so that even if your computer suddenly catches on fire, all your
important code files exist somewhere else. Any data you don't have in three
different places is data you don't care about.^[Yes, I'm aware that this sounds
paranoid. It's been a very rare occasion that I've needed to restore something
from another backup. You don't want to take chances.]

### üìñ Required Reading: [Register for a GitHub Account](https://happygitwithr.com/github-acct)

### ‚úÖ Check-in 1.7 Register for a GitHub Account

Follow the instructions in [Registering a GitHub Account](https://happygitwithr.com/github-acct.html) to create a **free**
GitHub account.

Copy and paste the link to your GitHub profile into the Canvas quiz. 

+ Your GitHub profile link should look like -- https://github.com/USERNAME
+ Here is mine! [https://github.com/atheobold](https://github.com/atheobold)

::: {.callout-tip}
# (Optional) Register for the Student Developer Pack 

I would highly recommend checking out 
[GitHub Education](https://education.github.com/) and signing up for the
[GitHub Student Developer Pack](https://education.github.com/pack). Signing 
up gets you unlimited private repositories among other perks. 
:::

::: {.callout-caution}
### Save your login information!

Make sure you remember your username and password so you don't have to try to
hack into your own account during class this week.

Write your information down somewhere safe.
:::

# Introducing Yourself to Git

Now that you have git downloaded and have a GitHub account, it is time to 
introduce yourself to git! 

### üìñ Required Reading: [Introduce Yourself to Git](https://happygitwithr.com/hello-git)

Rather than using the terminal on your computer (like they do in the chapter
above), let's get familiar with the **usethis** package in R. 

1. Open RStudio.
2. Run the following code **in your console** (bottom left), substituting your 
name for `"Jane Doe"` and the email associated with your GitHub account with 
`"jane@example.org"`. 

```{r}
#| label: introducing-yourself-to-git
#| eval: false

install.packages("usethis")

library(usethis)

# Change this to use your name and your GitHub email address! 
use_git_config(user.name = "Jane Doe", 
               user.email = "jane@example.org")
```

### ‚úÖ Check-in  1.8: Introduce Yourself to git

Follow the instructions for introducing yourself to git by running the code 
in your console. Once you've run the code, take a screenshot of the output in 
your console. 

# Connecting Git, GitHub, and RStudio

In order to interact with a remote Git server (e.g., GitHub), we need to include
our credentials. The credentials proves to GitHub who we are and that we are
allowed to do what we are trying to do. There are a few ways to setup your 
credential, but we will specifically be using **P**ersonal **A**ccess **T**okens
or PATs. 

::: {.callout-warning}
# No support for username & password credentials 

Let it be known that the password that you use to login to GitHub‚Äôs website is
NOT an acceptable credential when talking to GitHub as a Git server. 
:::

### üìñ Required Reading: [Personal Access Tokens for HTTPS](https://happygitwithr.com/hello-git)

::: {.callout-note}
# Skip Section 9.2

We're not using SSH, so feel free to skip that section!
:::

### ‚úÖ Check-in 1.9: PAT

Follow the instructions for setting up your own personal access token. When
selecting an expiration either choose one of the options that will allow your
PAT to last the entire quarter (90 days, No expiration, or use Custom and input
a date after the end of the quarter). 

```{r}
#| label: PAT
#| eval: false

usethis::create_github_token()
gitcreds::gitcreds_set()
```

Once you've completed this process, run the following code **in your console** 
and take a screenshot of the output you get. I've included the output I get 
when I run this, so you have an idea of how your output should look. 

```{r}
#| label: git-sit-rep
#| eval: false

usethis::git_sitrep()
```

```
‚îÄ‚îÄ Git global (user) 
‚Ä¢ Name: 'Allison Theobold'
‚Ä¢ Email: 'atheobol@calpoly.edu'
‚Ä¢ Global (user-level) gitignore file: '~/.gitignore'
‚Ä¢ Vaccinated: FALSE
‚Ñπ See `?git_vaccinate` to learn more
‚Ä¢ Default Git protocol: 'https'
‚Ä¢ Default initial branch name: 'main'

‚îÄ‚îÄ GitHub user 
‚Ä¢ Default GitHub host: 'https://github.com'
‚Ä¢ Personal access token for 'https://github.com': '<discovered>'
‚Ä¢ GitHub user: 'atheobold'
‚Ä¢ Token scopes: 'admin:org, admin:public_key, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:packages'
‚Ä¢ Email(s): 'atheobol@calpoly.edu (primary)', 'theobold.allison970@gmail.com', '12439090+atheobold@users.noreply.github.com'
‚Ñπ No active usethis project
```

# Getting Started with GitHub

Now you are setup and ready to get started working with GitHub and RStudio for 
this week's lab! 

# Learn More

::: {.callout-note}
### Extra Resources

- [Git "Hello World" Tutorial on GitHub](https://guides.github.com/activities/hello-world/)

- [Crash course on git](https://www.youtube.com/watch?v=SWYqp7iY_Tc) (30 minute YouTube video) [@traversymediaGitGitHubCrash2017]

- [Git and GitHub for poets](https://www.youtube.com/watch?v=BCQHnlnPusY&list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV) YouTube playlist (this is supposed to be the best introduction to Git out there...) [@thecodingtrainIntroductionGitGitHub2016]

- [More advanced git concepts, in comic form](https://dev.to/erikaheidi/stage-commit-push-a-git-story-comic-a37), by Erika Heidi [@ericaheidiStageCommitPush2020]

- [A quick guide to the command line (Terminal)](https://towardsdatascience.com/a-quick-guide-to-using-command-line-terminal-96815b97b955) [@weiQuickGuideUsing2019]
:::

<!-- From Lab 1 instructions -->
<!-- # Part One: Workflow for GitHub -->

<!-- ## Step 1: Making a Copy from GitHub Classroom -->

<!-- For the first few weeks of the quarter, we will use GitHub Classroom to create -->
<!-- our lab repositories. GitHub Classroom is a wonderful tool, as it makes it -->
<!-- **incredibly** simple to copy the contents of a repository.  -->

<!-- Use these steps to make a copy of the Lab 1 repository: [List of Steps to Copy the Lab Assignment from GitHub Classroom](https://scribehow.com/shared/Copying_the_Lab_Assignment_with_GitHub_Classroom__jKUfxzJUQjOQ2lqJy2UPoQ)  -->

<!-- ## Step 2: Inspecting the Lab -->

<!-- Once you complete these steps, a dialogue box will open with messages about -->
<!-- cloning (making a copy) of your Lab 1 repository. When the messages are -->
<!-- finished, you should have a new RStudio session open. You should notice a few -->
<!-- things: -->

<!-- -   In the upper right corner you should see a blue R cube with  -->
<!-- `introdcution-to-quarto` written next to it ![](images/r-project.png){width="15%" fig-alt="A picture of a blue cube with an R inside, next to the text 'introduction-to-quarto-allison-theobold'"}, this tells -->
<!-- you that you are working in an R Project (we'll learn more about these next -->
<!-- week). -->
<!-- -   In the "Files" pane, you should see a list of all the files included in the -->
<!-- `lab-1` repository you copied. -->
<!-- -   In the upper right pane, you should see a tab labeled "Git". -->
<!-- -   Nothing should be displayed in this pane, since you haven't made any changes  -->
<!-- to the files that were copied!  -->

<!-- ## Step 3: Making a Small Change -->

<!-- Now, find the `lab-1-student.qmd` file in the "Files" tab in the lower right  -->
<!-- hand corner. Click on this file to open it.  -->

<!-- At the top of the document (in the YAML) there is an `author` line that says  -->
<!-- `"Your name here!"`. Change this to be your name and save your file either by -->
<!-- clicking on the blue floppy disk or with a shortcut (command / control + s).  -->

<!-- ## Step 4: Pushing Your Lab to GitHub -->

<!-- Now for our last step, we need to [commit the files to our repo](https://happygitwithr.com/existing-github-first#stage-and-commit).  -->

<!-- -   Click the "Git" tab in upper right pane -->
<!-- -   Check the "Staged" box for the `lab-1-student.qmd` file  -->
<!-- -   Click "Commit" -->
<!-- -   In the box that opens, type a message in "Commit message", such as -->
<!-- "Added my name". -->
<!-- -   Click "Commit". -->
<!-- -   Click the green "Push" button to send your local changes to GitHub. -->

<!-- RStudio will display something like: -->

<!-- ```          -->
<!-- >>> /usr/bin/git push origin HEAD:refs/heads/main -->
<!-- To https://github.com/atheobold/introduction-to-quarto-allison-theobold.git -->
<!--    3a2171f..6d58539  HEAD -> main -->
<!-- ``` -->

<!-- ## Step 5: Verifying Your Changes -->

<!-- Go back to your browser. I assume you're still viewing the GitHub repo you just cloned. Refresh the page. You should see all the project files you committed there. If you click on "commits", you should see one with the message you used, e.g. "Added my name". -->

<!-- ## Step 6: Let's get started working with Quarto! -->

<!-- Now that you've added your name, go ahead and get started with the rest of the  -->
<!-- lab!  -->

### References {-}