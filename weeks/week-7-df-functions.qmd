---
title: "Writing Dataframe & Plot Functions in R"
format: html
number-sections: true
number-depth: 2
bibliography: references.bib
editor: source
execute: 
  echo: true
  include: true
---

```{r}
#| include: false
#| echo: false

library(tidyverse)
library(lubridate)
```

The second half of this week's coursework focuses on writing functions that 
work with *data frames*.

By the end of the week you should have a grasp of:

- What the "embracing" (`{{ }}`) operator is

- How to use the `{{ }}` operator in data frame functions

- Why we need to use the `{{ }}` operator when writing dataframe functions

::: {.callout-tip}
# Tidy Evaluation

The use of the `{{ }}` operator revolves around the idea of "tidy evaluation". 
While it is good to know at a high level what tidy evaluation is and how it is
enacted in data frame functions, you are not required to understand the details 
and nuances of why R uses these. 
::: 

------------------------------------------------------------------------

#### `r emo::ji("play button")` Watch Videos: 0 minutes

#### `r emo::ji("book")` Readings: 60-75 minutes

#### `r emo::ji("check")` Preview Activities: 1 (broken into two parts)

------------------------------------------------------------------------

# Writing Dataframe Functions in R

### `r emo::ji("book")` [Required Reading: *R4DS* -- Functions](https://r4ds.hadley.nz/functions#data-frame-functions)

::: {.callout-caution}
# Read only Section 3 (Data frame functions)! 
::: 

### `r emo::ji("check")` **Check-in 7.2: Writing Data Frame Functions**

**Question 1**: Fill in the code below to write a function that finds all
flights that were cancelled or delayed by more than a user supplied number of 
hours:

```{r}
#| eval: false

filter_severe <- function(df) { 

  }


flights |> 
  filter_severe(hours = 2)
```


**Question 2**: Fill in the code below to write a function that converts the
user supplied variable that uses clock time (e.g., `dep_time`, `arr_time`, etc.)
into a decimal time (i.e. hours + (minutes / 60)).

```{r}
#| eval: false

standardize_time <- function(df) {
  
}

flights |> 
  standardize_time(sched_dep_time)
```

**Question 3**: For each of the following functions list all arguments that use
tidy evaluation and describe whether they use data-masking or tidy-selection:

`distinct()`
`count()`
`group_by()` 
`rename()`
`slice_min()`

::: {.callout-tip}
# Data Masking versus Tidy Selection

Data-masking: this is used in functions like arrange(), filter(), and summarize() that compute with variables.

Tidy-selection: this is used for functions like select(), relocate(), and rename() that select variables.

Your intuition about which arguments use tidy evaluation should be good for many common functions â€” just think about whether you can compute (e.g., x + 1) or select (e.g., a:x).
:::

# Writing Plotting Functions in R

### `r emo::ji("book")` [Required Reading: *R4DS* -- Functions](https://r4ds.hadley.nz/functions#plot-functions)

::: {.callout-caution}
# Read only Section 4 (Data frame functions)! 
::: 

### `r emo::ji("check")` **Check-in 7.2: Writing Data Frame Functions**

**Question 4**: Fill in the code below to build a rich plotting function which:

- draws a scatterplot given dataset and x and y variables, 
- adds a line of best fit (i.e. a linear model with no standard errors)
- add a title.

```{r}
#| eval: false

histogram <- function(df, xvar, yvar) {
  label <- rlang::englue("A scatterplot of {{xvar}} and {{yvar}}, including a line of best fit.")
  
  df |> 
    ggplot(aes(x = {{ var }})) + 
    geom_histogram(binwidth = binwidth) + 
    labs(title = label)
}
```

